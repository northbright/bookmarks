From: <Saved by Blink>
Snapshot-Content-Location: https://rderik.com/blog/making-a-c-library-available-in-swift-using-the-swift-package/
Subject: Making a C library available in Swift using the Swift Package Manager
Date: Thu, 6 Jun 2024 08:56:37 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----"


------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: text/html
Content-ID: <frame-198F3FF6B35070B7521F1F86814AAF8A@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/blog/making-a-c-library-available-in-swift-using-the-swift-package/

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta http-equiv=3D"x-ua-compatible" content=3D"ie=3Dedge">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1, shrink-to-fit=3Dno">
    <meta property=3D"og:type" content=3D"article">
    <meta property=3D"og:title" content=3D"Making a C library available in =
Swift using the Swift Package Manager">
    <meta property=3D"og:description" content=3D"System libraries are typic=
ally defined using C, that means we need a way to make them available to Sw=
ift. In this post, we are going to explore how to use the Swift Package Man=
ager to give us access to C libraries, be it system or user-defined.">
    <meta property=3D"og:url" content=3D"https://rderik.com/blog/making-a-c=
-library-available-in-swift-using-the-swift-package/">
    <meta property=3D"og:image" content=3D"">
    <meta property=3D"description" content=3D"">

    <meta name=3D"twitter:site" content=3D"rderik.com">
    <meta name=3D"twitter:creator" content=3D"@rderik">
    <meta name=3D"twitter:url" content=3D"https://rderik.com/blog/making-a-=
c-library-available-in-swift-using-the-swift-package/">
    <meta name=3D"twitter:title" content=3D"Making a C library available in=
 Swift using the Swift Package Manager">
    <meta name=3D"twitter:description" content=3D"System libraries are typi=
cally defined using C, that means we need a way to make them available to S=
wift. In this post, we are going to explore how to use the Swift Package Ma=
nager to give us access to C libraries, be it system or user-defined.">
    <meta name=3D"twitter:card" content=3D"summary_large_image">
    <meta name=3D"twitter:image" content=3D"">
    <link rel=3D"alternate" type=3D"application/rss+xml" title=3D"rderik.co=
m RSS Feed" href=3D"https://rderik.com/feed.xml">
    <link rel=3D"icon" href=3D"https://rderik.com/blog/making-a-c-library-a=
vailable-in-swift-using-the-swift-package/images/RD.svg" sizes=3D"any" type=
=3D"image/svg+xml">
    <!-- Use the title from a page's frontmatter if it has one -->
    <link rel=3D"preconnect" href=3D"https://fonts.googleapis.com/">
    <link rel=3D"preconnect" href=3D"https://fonts.gstatic.com/" crossorigi=
n=3D"">
    <link href=3D"https://fonts.googleapis.com/css2?family=3DRubik:wght@300=
;500&amp;family=3DRoboto&amp;family=3DSource+Sans+Pro:wght@200;300;400;600&=
amp;display=3Dswap" rel=3D"stylesheet">
    <title>Making a C library available in Swift using the Swift Package Ma=
nager</title>
    <link href=3D"https://rderik.com/stylesheets/site.css" rel=3D"styleshee=
t">
   =20
  </head>
  <body class=3D"light-mode">
    <header>
      <div class=3D"logo"><a href=3D"https://rderik.com/" aria-label=3D"Log=
o that takes you to the home of the site"></a></div>

      <nav id=3D"top-menu"><ul>
  <li><a href=3D"https://rderik.com/shop/">Shop</a></li>
  <li><a href=3D"https://rderik.com/blog/">Blog</a></li>
  <li><a href=3D"https://rderik.com/guides/">Guides</a></li>
  <li><a href=3D"https://rderik.com/code/">Code</a></li>
  <li><a href=3D"https://rderik.com/newsletter/">Newsletter</a></li>
  <li><a href=3D"https://rderik.com/cheat_sheets/">Cheat sheets</a></li>
 <li><nav class=3D"theme-switch"><!-- Rounded switch -->
<label for=3D"theme-switch" class=3D"switch">
  <input id=3D"theme-switch" aria-label=3D"Theme switch" type=3D"checkbox">
  <span class=3D"slider round"></span>
</label>
</nav></li>
</ul>
</nav>
    </header>
    <section id=3D"content">  <article>
    <h1>Making a C library available in Swift using the Swift Package Manag=
er <span>Nov  7 2019 </span>=20
      <span>Latest Update: Jul 25 2020 </span>
    </h1>
    <p>System libraries are typically defined using C, that means we need a=
 way to make them available to Swift. In this post, we are going to explore=
 how to use the Swift Package Manager to give us access to C libraries, be =
it system or user-defined.</p>
<p>Let's start by talking about Swift modules.</p>
<p><strong>*NOTE:  check the following GitHub repositories for the code:</s=
trong></p>

<ul>
<li><a href=3D"https://github.com/rderik/Csqlite3">Csqlite3</a> gives us ac=
cess to <code>sqlite3.h</code> C system library.</li>
<li><a href=3D"https://github.com/rderik/SQLiteTester">SQLiteTester</a> a S=
wift package executable that uses the <code>Csqlite3</code> module.</li>
<li><a href=3D"https://github.com/rderik/SQLite3">SQLite3</a> a wrapper tha=
t provides a Swifty interface to the SQLite3 C library.</li>
<li><a href=3D"https://github.com/rderik/SQLiteClient">SQLiteClient</a> a S=
wift package executable to test <a href=3D"https://github.com/rderik/SQLite=
3">SQLite3</a>.</li>
</ul>
<div class=3D"rd-toc">
<h2>Table of Contents</h2>

<!-- vim-markdown-toc Redcarpet -->

<ul>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#swift-modules">Swift modules</a></li>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#making-a-system-library-accessible-to-swift-usin=
g-module-maps">Making a system library accessible to Swift using module map=
s</a>

<ul>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#testing-our-library">Testing our library</a></li=
>
</ul></li>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#creating-a-wrapper-for-sqlite3">Creating a Wrapp=
er for SQLite3</a></li>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#final-thoughts">Final thoughts</a></li>
<li><a href=3D"https://rderik.com/blog/making-a-c-library-available-in-swif=
t-using-the-swift-package/#related-topics-notes-of-interest">Related topics=
/notes of interest</a></li>
</ul>

<!-- vim-markdown-toc -->
</div>
<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"swift-modules"></a></p>

<!-- vim-markdown-toc -->

<h1>Swift modules</h1>
<p>Swift uses modules to organise code. They allow us to separate code by n=
amespace and define access controls. With namespaces and access controls, w=
e can define cleaner APIs for our modules. We can also hide all the impleme=
ntation details from the user and only let them interact with the public AP=
I. In this way, we can be sure the user won't depend on implementation deta=
ils, giving us the flexibility to refactor code in the future.</p>
<p>In Swift when we use <code>import A</code>, we are saying import the mod=
ule A.</p>
<p>The system libraries usually provide a C interface. This means that we'l=
l need to interoperate with C code. If you want to learn more about interop=
erability with C, you can read two of my previous posts:</p>

<ul>
<li><a href=3D"https://rderik.com/blog/understanding-objective-c-and-swift-=
interoperability/">Understanding Objective-C and Swift interoperability</a>=
. Especially the section "Expose Objective-c code to Swift".</li>
<li><a href=3D"https://rderik.com/blog/using-bsd-sockets-in-swift/">Using B=
SD Sockets in Swift</a>. Read the section "C interoperability".</li>
</ul>
<p>That should give you a good base on using C APIs.</p>
<p>If we want to make the system library accessible to our Swift code, we c=
ould take different approaches. As a first approach, we could make the syst=
em library available to our code and deal with the C interoperability. A se=
cond option could be to create a wrapper and try to abstract the "complexit=
ies" of working with C code (pointers, etcetera). If we create a wrapper, w=
e can provide a cleaner API that will feel more "Swifty".</p>
<p>We'll see two examples, one for each case. Let's start with just making =
the system library accessible to Swift.</p>

<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"making-a-system-library-accessible-to-swift-using-module-maps=
"></a></p>

<!-- vim-markdown-toc -->

<h1>Making a system library accessible to Swift using module maps</h1>
<p>If you read the two posts I recommended, you now understand the interope=
rability between Swift and C (also with Objective-C). In the posts, you saw=
 that Objective-C and C use header files and Swift uses modules. We needed =
a way to make the header files accessible to Swift, enter Module Maps.</p>
<p>The idea here is the same. We are going to use a module map to encapsula=
te the library and make it accessible to Swift.</p>
<p>To have a concrete example, let's create a module map for the <code>sqli=
te3</code> library.</p>
<p>Create a directory to put our code. I'll create a directory with the nam=
e <code>Csqlite3</code>. By convention, we prepend a letter "C" to the name=
 of the library that we want to wrap. This makes explicit that its a wrappe=
r for a C library. For example, if we were going to use <code>libgit</code>=
 the name of our wrapper would be <code>Clibgit</code>.</p>
<p>Ok, create the directory for SQLite 3:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">mkdir </span>Csqlite3
</pre></td></tr></tbody></table></code></pre></div><p>Let's initialise the =
directory structure with the Swift Package Manager (SPM).</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span>swift =
package init <span class=3D"nt">--type</span> library
</pre></td></tr></tbody></table></code></pre></div><p>We are going to use a=
 shim header file to import the system's <code>sqlite3.h</code> file. To ke=
ep the code organised, let's create a directory to hold our header files:</=
p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">mkdir </span>Headers
</pre></td></tr></tbody></table></code></pre></div><p>Here we are going to =
add a new file, <code>Csqlite3-Bridging-Header.h</code> and add the followi=
ng content:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight c"><code><table class=3D"rouge-table=
"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"cp">#import &lt;sql=
ite3.h&gt;
</span></pre></td></tr></tbody></table></code></pre></div><p>Ok, let's add =
the map module. We are going to create a new file inside our <code>Sources/=
Csqlite/</code> directory. Give the new file the name <code>module.modulema=
p</code>, and add the following content:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">//Sources/Csqli=
te3/module.modulemap</span>
<span class=3D"n">module</span> <span class=3D"kt">CSQLite</span> <span cla=
ss=3D"p">{</span>
    <span class=3D"n">header</span> <span class=3D"s">"../../Headers/Csqlit=
e3-Bridging-Header.h"</span>
    <span class=3D"n">link</span> <span class=3D"s">"sqlite3"</span>
    <span class=3D"n">export</span> <span class=3D"o">*</span>
<span class=3D"p">}</span>
</pre></td></tr></tbody></table></code></pre></div><p>If we make this modul=
e accessible to our Swift code, we'll be able to <code>import CSQLite</code=
> and get access to the <code>sqlite3.h</code> library.</p>
<p>How can we make it accessible? Well, the Clang importer, that is built i=
nto Swift, takes care of that. When we specify the dependency to this libra=
ry, it'll be subject to the Clang importer, making the <code>CSQLite</code>=
 module available. Pretty cool, eh?</p>
<p>If you want to learn more about how modules work, check out the <a href=
=3D"http://clang.llvm.org/docs/Modules.html">Clang Module's documentation</=
a>.</p>
<p>Another thing you might see is that when people define the module, they =
add the [system] attribute. Like this:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
</pre></td><td class=3D"rouge-code"><pre><span class=3D"n">module</span> <s=
pan class=3D"kt">CSQLite</span> <span class=3D"p">[</span><span class=3D"n"=
>system</span><span class=3D"p">]</span> <span class=3D"p">{</span>
    <span class=3D"n">header</span> <span class=3D"s">"../../Headers/Csqlit=
e3-Bridging-Header.h"</span>
    <span class=3D"n">link</span> <span class=3D"s">"sqlite3"</span>
    <span class=3D"n">export</span> <span class=3D"o">*</span>
<span class=3D"p">}</span>
</pre></td></tr></tbody></table></code></pre></div><p>Some people call it a=
 system module. Adding [system] is the same as when you use <code>gcc</code=
> and add the macro <code>#pragma system_header</code>. What this does is i=
ndicate to the compiler that the header is a system header. A system header=
 is different than a regular header because it might include code that is n=
ot entirely standard. The code in a system header could include code that g=
enerates warnings for regular headers.</p>
<p>Because a system header is written for the OS, the system header might t=
ake some liberties. If you want to learn more check  <a href=3D"https://gcc=
.gnu.org/onlinedocs/cpp/System-Headers.html">gcc's systems header descripti=
on</a>, or this <a href=3D"https://stackoverflow.com/questions/41685746/sys=
tem-header-and-normal-header-gcc">Stack overflow question</a>. In summary, =
if you are using a system library and know it's ok to suppress the warnings=
, use the [system] attribute.</p>
<p>One last thing before we are done with the system library. We need to up=
date our <code>Package.swift</code> to create a system library target. From=
 the <a href=3D"https://docs.swift.org/package-manager/PackageDescription/P=
ackageDescription.html">documentation</a>, we get the following definition =
of a system library target:</p>
<p>"
System library targets are used to adapt a library installed on the system =
to work with Swift packages. Such libraries are generally installed by syst=
em package managers (such as Homebrew and APT) and exposed to Swift package=
s by providing a modulemap file along with other metadata such as the libra=
ry's pkg-config name.
"</p>
<p>So our <code>Package.swift</code> file should look like this(I removed t=
he testing targets and all the comments, leaving only the bare minimum):</p=
>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">// swift-tools-=
version:5.1</span>
<span class=3D"c1">// The swift-tools-version declares the minimum version =
of Swift required to build this package.</span>

<span class=3D"kd">import</span> <span class=3D"kt">PackageDescription</spa=
n>

<span class=3D"k">let</span> <span class=3D"nv">package</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">Package</span><span class=3D"p">(</spa=
n>
  <span class=3D"nv">name</span><span class=3D"p">:</span> <span class=3D"s=
">"Csqlite3"</span><span class=3D"p">,</span>
  <span class=3D"nv">products</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
  <span class=3D"o">.</span><span class=3D"nf">library</span><span class=3D=
"p">(</span><span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"Csqlite3"</span><span class=3D"p">,</span> <span class=3D"nv">=
targets</span><span class=3D"p">:</span> <span class=3D"p">[</span><span cl=
ass=3D"s">"Csqlite3"</span><span class=3D"p">]),</span>
  <span class=3D"p">],</span>
  <span class=3D"nv">targets</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
    <span class=3D"o">.</span><span class=3D"nf">systemLibrary</span><span =
class=3D"p">(</span><span class=3D"nv">name</span><span class=3D"p">:</span=
> <span class=3D"s">"Csqlite3"</span><span class=3D"p">),</span>
  <span class=3D"p">]</span>
<span class=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>Ok, that's our Swift =
library package. The minimal structure of the package is the following:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
</pre></td><td class=3D"rouge-code"><pre>Csqlite3
=E2=94=9C=E2=94=80=E2=94=80 Headers
=E2=94=82&nbsp;&nbsp; =E2=94=94=E2=94=80=E2=94=80 Csqlite3-Bridging-Header.=
h
=E2=94=9C=E2=94=80=E2=94=80 Package.swift
=E2=94=94=E2=94=80=E2=94=80 Sources
    =E2=94=94=E2=94=80=E2=94=80 Csqlite3
        =E2=94=94=E2=94=80=E2=94=80 module.modulemap
</pre></td></tr></tbody></table></code></pre></div><p>Alright, let's test i=
t. To test our library, we'll create a Swift package executable that will m=
ake use of our library.</p>

<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"testing-our-library"></a></p>

<!-- vim-markdown-toc -->

<h2>Testing our library</h2>
<p>We are going to create a Swift executable using SPM. We are going to nam=
e it <code>SQLiteTester</code> (remember, I'm terrible with names).</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">mkdir </span>SQLiteTester
<span class=3D"nv">$ </span><span class=3D"nb">cd </span>SQLiteTester
<span class=3D"nv">$ </span>swift package init <span class=3D"nt">--type</s=
pan> executable
</pre></td></tr></tbody></table></code></pre></div><p>Our <code>Package.swi=
ft</code> will have the following content:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">// swift-tools-=
version:5.1</span>
<span class=3D"c1">// The swift-tools-version declares the minimum version =
of Swift required to build this package.</span>

<span class=3D"kd">import</span> <span class=3D"kt">PackageDescription</spa=
n>

<span class=3D"k">let</span> <span class=3D"nv">package</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">Package</span><span class=3D"p">(</spa=
n>
    <span class=3D"nv">name</span><span class=3D"p">:</span> <span class=3D=
"s">"SQLiteTester"</span><span class=3D"p">,</span>
    <span class=3D"nv">dependencies</span><span class=3D"p">:</span> <span =
class=3D"p">[</span>
         <span class=3D"o">.</span><span class=3D"nf">package</span><span c=
lass=3D"p">(</span><span class=3D"nv">path</span><span class=3D"p">:</span>=
 <span class=3D"s">"../Csqlite3"</span><span class=3D"p">),</span>
    <span class=3D"p">],</span>
    <span class=3D"nv">targets</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
        <span class=3D"c1">// Targets are the basic building blocks of a pa=
ckage. A target can define a module or a test suite.</span>
        <span class=3D"c1">// Targets can depend on other targets in this p=
ackage, and on products in packages which this package depends on.</span>
        <span class=3D"o">.</span><span class=3D"nf">target</span><span cla=
ss=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLiteTester"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[</span><span class=3D"s">"Csqlite3"</span><span class=
=3D"p">]),</span>
        <span class=3D"o">.</span><span class=3D"nf">testTarget</span><span=
 class=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLiteTesterTests"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[</span><span class=3D"s">"SQLiteTester"</span><span cl=
ass=3D"p">]),</span>
    <span class=3D"p">]</span>
<span class=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>In our main, we'll im=
port <code>CSQLite</code> and get the version of SQLite. This is how our ma=
in will look:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">//Sources/SQLit=
eTester/main.swift</span>
<span class=3D"kd">import</span> <span class=3D"kt">CSQLite</span>

<span class=3D"nf">print</span><span class=3D"p">(</span><span class=3D"s">=
"Hello, world!"</span><span class=3D"p">)</span>
<span class=3D"k">let</span> <span class=3D"nv">version</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">String</span><span class=3D"p">(</span=
><span class=3D"nv">cString</span><span class=3D"p">:</span> <span class=3D=
"nf">sqlite3_libversion</span><span class=3D"p">())</span>
<span class=3D"nf">print</span><span class=3D"p">(</span><span class=3D"s">=
"SQLite3 Version: </span><span class=3D"se">\(</span><span class=3D"n">vers=
ion</span><span class=3D"se">)</span><span class=3D"s">"</span><span class=
=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>That's it, we can run=
 our code.</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span>swift =
run
<span class=3D"c"># on my computer I got</span>
Hello, world!
SQLite3 Version: 3.28.0
</pre></td></tr></tbody></table></code></pre></div><p>Perfect! Now you have=
 access to sqlite3 library. If you want to see all of the <a href=3D"https:=
//www.sqlite.org/c3ref/funclist.html">functions available</a> you can check=
 <a href=3D"https://www.sqlite.org/c3ref/intro.html">C-language Interface S=
pecification for SQLite</a>.</p>
<p>Ok, with that we've shown how to make the library accessible to Swift. L=
et's see an example of creating a Wrapper to abstract the SQLite C interfac=
e complexities and just providing a simple API.</p>

<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"creating-a-wrapper-for-sqlite3"></a></p>

<!-- vim-markdown-toc -->

<h1>Creating a Wrapper for SQLite3</h1>
<p>If you've never used SQLite before, it is a small "relational Data Base =
Management System contained in a C library". SQLite is very lightweight and=
 perfect as a data source for our applications and data models. macOS comes=
 with the <code>sqlite3</code> command-line utility already installed. We a=
re going to use it to create and manage our database.</p>
<p>We want to write a wrapper to abstract the C code interaction, that way =
the use of the library is easier, and the users of our library don't have t=
o deal with C pointers and other quirks.</p>
<p>The example library we are going to create is limited in scope and will =
be simple. Our library will only serve to illustrate the basics. It will no=
t be production-ready (until you make it so :) ).</p>
<p>Ok, let's start by creating a directory for our library:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">mkdir </span>SQLite3
<span class=3D"nv">$ </span><span class=3D"nb">cd </span>SQLite3
<span class=3D"nv">$ </span>swift package init <span class=3D"nt">--type</s=
pan> library
</pre></td></tr></tbody></table></code></pre></div><p>We are going to use t=
he <code>sqlite3</code> command-line tool to create a database and prepare =
our data. You can put the following instructions in a file (I'll name it <c=
ode>init.sql</code>):</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight sql"><code><table class=3D"rouge-tab=
le"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class=3D"rouge-code"><pre><span class=3D"k">create</span> <s=
pan class=3D"k">table</span> <span class=3D"n">Elements</span><span class=
=3D"p">(</span>
 <span class=3D"n">id</span>   <span class=3D"nb">integer</span> <span clas=
s=3D"k">primary</span> <span class=3D"k">key</span> <span class=3D"n">autoi=
ncrement</span> <span class=3D"k">not</span> <span class=3D"k">null</span><=
span class=3D"p">,</span>
 <span class=3D"n">name</span> <span class=3D"nb">char</span><span class=3D=
"p">(</span><span class=3D"mi">50</span><span class=3D"p">)</span>    <span=
 class=3D"k">not</span> <span class=3D"k">null</span>
<span class=3D"p">);</span>
<span class=3D"k">insert</span> <span class=3D"k">into</span> <span class=
=3D"n">Elements</span><span class=3D"p">(</span><span class=3D"n">name</spa=
n><span class=3D"p">)</span> <span class=3D"k">values</span>
<span class=3D"p">(</span><span class=3D"s1">'Pedro'</span><span class=3D"p=
">),</span>
<span class=3D"p">(</span><span class=3D"s1">'Miguel'</span><span class=3D"=
p">),</span>
<span class=3D"p">(</span><span class=3D"s1">'Marta'</span><span class=3D"p=
">),</span>
<span class=3D"p">(</span><span class=3D"s1">'Patricia'</span><span class=
=3D"p">);</span>
</pre></td></tr></tbody></table></code></pre></div><p>Let's run the script =
and build the database (I'll call it <code>database.db</code>):</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">cat </span>init.sql | sqlite3 database.db
</pre></td></tr></tbody></table></code></pre></div><p>This will create the =
database. Let's check if everything is Ok.</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span>sqlite=
3 database.db
<span class=3D"o">&gt;</span> <span class=3D"k">select</span> <span class=
=3D"k">*</span> from Elements<span class=3D"p">;</span>
1|Pedro
2|Miguel
3|Marta
4|Patricia
<span class=3D"o">&gt;</span> .quit
<span class=3D"nv">$ </span>
</pre></td></tr></tbody></table></code></pre></div><p>Our test database is =
ready. We can continue creating the wrapper.</p>
<p>We are going to use our C library wrapper to make the C API accessible t=
o us. So let's update our <code>Package.swift</code>. It should look like t=
he following:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">// swift-tools-=
version:5.1</span>
<span class=3D"c1">// The swift-tools-version declares the minimum version =
of Swift required to build this package.</span>

<span class=3D"kd">import</span> <span class=3D"kt">PackageDescription</spa=
n>

<span class=3D"k">let</span> <span class=3D"nv">package</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">Package</span><span class=3D"p">(</spa=
n>
    <span class=3D"nv">name</span><span class=3D"p">:</span> <span class=3D=
"s">"SQLite3"</span><span class=3D"p">,</span>
    <span class=3D"nv">products</span><span class=3D"p">:</span> <span clas=
s=3D"p">[</span>
        <span class=3D"c1">// Products define the executables and libraries=
 produced by a package, and make them visible to other packages.</span>
        <span class=3D"o">.</span><span class=3D"nf">library</span><span cl=
ass=3D"p">(</span><span class=3D"nv">name</span><span class=3D"p">:</span> =
<span class=3D"s">"SQLite3"</span><span class=3D"p">,</span> <span class=3D=
"nv">targets</span><span class=3D"p">:</span> <span class=3D"p">[</span><sp=
an class=3D"s">"SQLite3"</span><span class=3D"p">]),</span>
    <span class=3D"p">],</span>
    <span class=3D"nv">dependencies</span><span class=3D"p">:</span> <span =
class=3D"p">[</span>
        <span class=3D"c1">// Dependencies declare other packages that this=
 package depends on.</span>
         <span class=3D"o">.</span><span class=3D"nf">package</span><span c=
lass=3D"p">(</span><span class=3D"nv">path</span><span class=3D"p">:</span>=
 <span class=3D"s">"../Csqlite3"</span><span class=3D"p">),</span>
         <span class=3D"cm">/*.package(url: "https://github.com/rderik/Csql=
ite3", from: "0.1.0"),*/</span>
    <span class=3D"p">],</span>
    <span class=3D"nv">targets</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
        <span class=3D"c1">// Targets are the basic building blocks of a pa=
ckage. A target can define a module or a test suite.</span>
        <span class=3D"c1">// Targets can depend on other targets in this p=
ackage, and on products in packages which this package depends on.</span>
        <span class=3D"o">.</span><span class=3D"nf">target</span><span cla=
ss=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLite3"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[</span><span class=3D"s">"Csqlite3"</span><span class=
=3D"p">]),</span>
        <span class=3D"o">.</span><span class=3D"nf">testTarget</span><span=
 class=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLite3Tests"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[]),</span>
    <span class=3D"p">]</span>
<span class=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>We are just setting t=
he dependency on our <code>Csqlite3</code> Swift package. We could also pul=
l it from git. I left a comment with an example.</p>
<p>Ok, let's now work on Our wrapper. Create a new file in <code>Sources/SQ=
Lite3/</code> directory, name it <code>SQLite3.swift</code> and add the fol=
lowing content:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class=3D"rouge-code"><pre><span class=3D"kd">import</span> <=
span class=3D"kt">CSQLite</span>

<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"kt">SQLite3</span> <span class=3D"p">{</span>
  <span class=3D"k">var</span> <span class=3D"nv">db</span><span class=3D"p=
">:</span> <span class=3D"kt">OpaquePointer</span><span class=3D"p">?</span=
> <span class=3D"o">=3D</span> <span class=3D"kc">nil</span>

  <span class=3D"kd">public</span> <span class=3D"nf">init</span><span clas=
s=3D"p">?(</span><span class=3D"nv">path</span><span class=3D"p">:</span> <=
span class=3D"kt">String</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"nf=
">sqlite3_open</span><span class=3D"p">(</span><span class=3D"n">path</span=
><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n"=
>db</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span cl=
ass=3D"kt">SQLITE_OK</span><span class=3D"p">)</span> <span class=3D"p">{</=
span>
      <span class=3D"k">return</span> <span class=3D"kc">nil</span>
    <span class=3D"p">}</span>
  <span class=3D"p">}</span>

  <span class=3D"kd">deinit</span> <span class=3D"p">{</span>
    <span class=3D"nf">sqlite3_close</span><span class=3D"p">(</span><span =
class=3D"n">db</span><span class=3D"p">)</span>
  <span class=3D"p">}</span>

  <span class=3D"kd">public</span> <span class=3D"kd">func</span> <span cla=
ss=3D"nf">version</span><span class=3D"p">()</span> <span class=3D"o">-&gt;=
</span> <span class=3D"kt">String</span> <span class=3D"p">{</span>
    <span class=3D"k">let</span> <span class=3D"nv">version</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"kt">String</span><span class=3D"p">(</s=
pan><span class=3D"nv">cString</span><span class=3D"p">:</span> <span class=
=3D"nf">sqlite3_libversion</span><span class=3D"p">())</span>
    <span class=3D"k">return</span> <span class=3D"n">version</span>
  <span class=3D"p">}</span>

  <span class=3D"kd">public</span> <span class=3D"kd">func</span> <span cla=
ss=3D"nf">executeQuery</span><span class=3D"p">(</span><span class=3D"n">_<=
/span> <span class=3D"nv">query</span><span class=3D"p">:</span> <span clas=
s=3D"kt">String</span><span class=3D"p">)</span> <span class=3D"o">-&gt;</s=
pan> <span class=3D"p">[[</span><span class=3D"kt">String</span><span class=
=3D"p">]]</span> <span class=3D"p">{</span>
    <span class=3D"k">var</span> <span class=3D"nv">result</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"p">[[</span><span class=3D"kt">String</s=
pan><span class=3D"p">]]()</span>
    <span class=3D"k">var</span> <span class=3D"nv">selectStatement</span><=
span class=3D"p">:</span> <span class=3D"kt">OpaquePointer</span><span clas=
s=3D"p">?</span> <span class=3D"o">=3D</span> <span class=3D"kc">nil</span>
    <span class=3D"k">if</span><span class=3D"p">(</span><span class=3D"nf"=
>sqlite3_prepare_v2</span><span class=3D"p">(</span><span class=3D"n">db</s=
pan><span class=3D"p">,</span> <span class=3D"n">query</span><span class=3D=
"p">,</span> <span class=3D"o">-</span><span class=3D"mi">1</span><span cla=
ss=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">selectSta=
tement</span><span class=3D"p">,</span> <span class=3D"kc">nil</span><span =
class=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span class=3D"kt">SQL=
ITE_OK</span><span class=3D"p">)</span> <span class=3D"p">{</span>
      <span class=3D"k">let</span> <span class=3D"nv">columnCount</span> <s=
pan class=3D"o">=3D</span> <span class=3D"kt">Int</span><span class=3D"p">(=
</span><span class=3D"nf">sqlite3_column_count</span><span class=3D"p">(</s=
pan><span class=3D"n">selectStatement</span><span class=3D"p">))</span>
      <span class=3D"k">let</span> <span class=3D"nv">columnNames</span><sp=
an class=3D"p">:</span> <span class=3D"p">[</span><span class=3D"kt">String=
</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=
=3D"p">(</span><span class=3D"mi">0</span><span class=3D"o">..&lt;</span><s=
pan class=3D"kt">Int32</span><span class=3D"p">(</span><span class=3D"n">co=
lumnCount</span><span class=3D"p">))</span><span class=3D"o">.</span><span =
class=3D"n">map</span> <span class=3D"p">{</span>
        <span class=3D"kt">String</span><span class=3D"p">(</span><span cla=
ss=3D"nv">cString</span><span class=3D"p">:</span> <span class=3D"nf">sqlit=
e3_column_name</span><span class=3D"p">(</span><span class=3D"n">selectStat=
ement</span><span class=3D"p">,</span> <span class=3D"nv">$0</span><span cl=
ass=3D"p">))</span>
      <span class=3D"p">}</span>
      <span class=3D"n">result</span><span class=3D"o">.</span><span class=
=3D"nf">append</span><span class=3D"p">(</span><span class=3D"n">columnName=
s</span><span class=3D"p">)</span>
      <span class=3D"k">while</span><span class=3D"p">(</span><span class=
=3D"nf">sqlite3_step</span><span class=3D"p">(</span><span class=3D"n">sele=
ctStatement</span><span class=3D"p">)</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"kt">SQLITE_ROW</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span>
        <span class=3D"k">var</span> <span class=3D"nv">row</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"p">[</span><span class=3D"kt">String</s=
pan><span class=3D"p">]()</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=
=3D"k">in</span> <span class=3D"mi">0</span><span class=3D"o">..&lt;</span>=
<span class=3D"n">columnCount</span> <span class=3D"p">{</span>
        <span class=3D"k">let</span> <span class=3D"nv">element</span> <spa=
n class=3D"o">=3D</span> <span class=3D"kt">String</span><span class=3D"p">=
(</span><span class=3D"nv">cString</span><span class=3D"p">:</span> <span c=
lass=3D"nf">sqlite3_column_text</span><span class=3D"p">(</span><span class=
=3D"n">selectStatement</span><span class=3D"p">,</span><span class=3D"kt">I=
nt32</span><span class=3D"p">(</span><span class=3D"n">i</span><span class=
=3D"p">)))</span>
        <span class=3D"n">row</span><span class=3D"o">.</span><span class=
=3D"nf">append</span><span class=3D"p">(</span><span class=3D"n">element</s=
pan><span class=3D"p">)</span>=20
        <span class=3D"p">}</span>
        <span class=3D"n">result</span><span class=3D"o">.</span><span clas=
s=3D"nf">append</span><span class=3D"p">(</span><span class=3D"n">row</span=
><span class=3D"p">)</span>
      <span class=3D"p">}</span>
      <span class=3D"nf">sqlite3_finalize</span><span class=3D"p">(</span><=
span class=3D"n">selectStatement</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"n">result</span>
  <span class=3D"p">}</span>
<span class=3D"p">}</span>
</pre></td></tr></tbody></table></code></pre></div><p>Our wrapper is simple=
. It allows us to extract the objects we get from a query into an array of =
Strings. The first array represents the names of the columns, and the rest =
of the arrays are the content.</p>
<p>Good, let's create an executable that makes use of our wrapper. Outside =
the <code>SQLite3</code> Swift package, let's create a new directory:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">mkdir </span>SQLiteClient
<span class=3D"nv">$ </span>swift package init <span class=3D"nt">--type</s=
pan> executable
</pre></td></tr></tbody></table></code></pre></div><p>Here is the <code>Pac=
kage.swift</code>:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class=3D"rouge-code"><pre><span class=3D"c1">// swift-tools-=
version:5.1</span>
<span class=3D"c1">// The swift-tools-version declares the minimum version =
of Swift required to build this package.</span>

<span class=3D"kd">import</span> <span class=3D"kt">PackageDescription</spa=
n>

<span class=3D"k">let</span> <span class=3D"nv">package</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">Package</span><span class=3D"p">(</spa=
n>
    <span class=3D"nv">name</span><span class=3D"p">:</span> <span class=3D=
"s">"SQLiteClient"</span><span class=3D"p">,</span>
    <span class=3D"nv">dependencies</span><span class=3D"p">:</span> <span =
class=3D"p">[</span>
         <span class=3D"o">.</span><span class=3D"nf">package</span><span c=
lass=3D"p">(</span><span class=3D"nv">path</span><span class=3D"p">:</span>=
 <span class=3D"s">"../SQLite3"</span><span class=3D"p">),</span>
    <span class=3D"p">],</span>
    <span class=3D"nv">targets</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
        <span class=3D"o">.</span><span class=3D"nf">target</span><span cla=
ss=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLiteClient"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[</span><span class=3D"s">"SQLite3"</span><span class=
=3D"p">]),</span>
        <span class=3D"o">.</span><span class=3D"nf">testTarget</span><span=
 class=3D"p">(</span>
            <span class=3D"nv">name</span><span class=3D"p">:</span> <span =
class=3D"s">"SQLiteClientTests"</span><span class=3D"p">,</span>
            <span class=3D"nv">dependencies</span><span class=3D"p">:</span=
> <span class=3D"p">[</span><span class=3D"s">"SQLiteClient"</span><span cl=
ass=3D"p">]),</span>
    <span class=3D"p">]</span>
<span class=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>Our <code>main.swift<=
/code> (inside <code>Sources/SQLiteClient/</code> directory) will have the =
following content:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
8
</pre></td><td class=3D"rouge-code"><pre><span class=3D"kd">import</span> <=
span class=3D"kt">SQLite3</span>

<span class=3D"nf">print</span><span class=3D"p">(</span><span class=3D"s">=
"This is our database content:"</span><span class=3D"p">)</span>
<span class=3D"k">if</span> <span class=3D"k">let</span> <span class=3D"nv"=
>db</span> <span class=3D"o">=3D</span> <span class=3D"kt">SQLite3</span><s=
pan class=3D"p">(</span><span class=3D"nv">path</span><span class=3D"p">:</=
span> <span class=3D"s">"./database.db"</span><span class=3D"p">)</span> <s=
pan class=3D"p">{</span>
  <span class=3D"k">let</span> <span class=3D"nv">query</span> <span class=
=3D"o">=3D</span> <span class=3D"s">"select id, name from Elements"</span>
  <span class=3D"k">let</span> <span class=3D"nv">elements</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">db</span><span class=3D"o">.</span><s=
pan class=3D"nf">executeQuery</span><span class=3D"p">(</span><span class=
=3D"n">query</span><span class=3D"p">)</span>
  <span class=3D"nf">print</span><span class=3D"p">(</span><span class=3D"n=
">elements</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</pre></td></tr></tbody></table></code></pre></div><p>Let's run it:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span>swift =
run
</pre></td></tr></tbody></table></code></pre></div><p>Oops, we got lots of =
errors. The linker is having trouble finding/linking <code>sqlite3.h</code>=
. I'm not sure why using relative paths on the <code>module.modulemap</code=
> causes this. So instead of using a "shim" that imports the <code>sqlite3.=
h</code> library, we'll define the absolute path of the header. We'll go ba=
ck to updating the code on our <code>Csqlite</code> Swift package. Our <cod=
e>module.modulemap</code> will look like this:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
</pre></td><td class=3D"rouge-code"><pre><span class=3D"n">module</span> <s=
pan class=3D"kt">CSQLite</span> <span class=3D"p">{</span>
    <span class=3D"cm">/*header "../../Headers/Csqlite3-Bridging-Header.h"*=
/</span>
    <span class=3D"n">header</span> <span class=3D"s">"/Applications/Xcode.=
app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/=
usr/include/sqlite3.h"</span>
    <span class=3D"n">link</span> <span class=3D"s">"sqlite3"</span>
    <span class=3D"n">export</span> <span class=3D"o">*</span>
<span class=3D"p">}</span>
</pre></td></tr></tbody></table></code></pre></div><p>In the past, we were =
able to access the system libraries from the usual path <code>/usr/include/=
</code>, but since Xcode 10 (<a href=3D"https://developer.apple.com/documen=
tation/xcode_release_notes/xcode_10_release_notes#3035623">check release no=
tes</a>), the system headers are only located in the SDK. To obtain the pat=
h in your system, you can use the following command:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span><span =
class=3D"nb">echo</span> <span class=3D"sb">`</span>xcrun <span class=3D"nt=
">--show-sdk-path</span><span class=3D"sb">`</span>/usr/include
</pre></td></tr></tbody></table></code></pre></div><p>Ok, now let's try to =
run it again:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight shell"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
</pre></td><td class=3D"rouge-code"><pre><span class=3D"nv">$ </span>swift =
run
This is our database content:
<span class=3D"o">[[</span><span class=3D"s2">"id"</span>, <span class=3D"s=
2">"name"</span><span class=3D"o">]</span>, <span class=3D"o">[</span><span=
 class=3D"s2">"1"</span>, <span class=3D"s2">"Pedro"</span><span class=3D"o=
">]</span>, <span class=3D"o">[</span><span class=3D"s2">"2"</span>, <span =
class=3D"s2">"Miguel"</span><span class=3D"o">]</span>, <span class=3D"o">[=
</span><span class=3D"s2">"3"</span>, <span class=3D"s2">"Marta"</span><spa=
n class=3D"o">]</span>, <span class=3D"o">[</span><span class=3D"s2">"4"</s=
pan>, <span class=3D"s2">"Patricia"</span><span class=3D"o">]]</span>
</pre></td></tr></tbody></table></code></pre></div><p>Prefect, it's working=
 correctly!</p>
<p>Congratulations. Now you can expand that wrapper and make it more Swifty=
.</p>

<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"final-thoughts"></a></p>

<!-- vim-markdown-toc -->

<h1>Final thoughts</h1>
<p>We saw some examples of making a C library accessible to our Swift code.=
 Also, a basic example to demonstrate the idea of generating a wrapper to a=
bstract the complexities of a C API. I hope you find it useful.</p>
<p>I'm not sure why the relative path gives us problems, so if you have any=
 ideas, let me know, and we can figure it out together.</p>
<p><strong>*NOTE:  check the following GitHub repositories for the code:</s=
trong></p>

<ul>
<li><a href=3D"https://github.com/rderik/Csqlite3">Csqlite3</a> gives us ac=
cess to <code>sqlite3.h</code> C system library.</li>
<li><a href=3D"https://github.com/rderik/SQLiteTester">SQLiteTester</a> a S=
wift package executable that uses the <code>Csqlite3</code> module.</li>
<li><a href=3D"https://github.com/rderik/SQLite3">SQLite3</a> a wrapper tha=
t provides a Swifty interface to the SQLite3 C library.</li>
<li><a href=3D"https://github.com/rderik/SQLiteClient">SQLiteClient</a> a S=
wift package executable to test <a href=3D"https://github.com/rderik/SQLite=
3">SQLite3</a>.</li>
</ul>

<!-- vim-markdown-toc Redcarpet -->
<p><a name=3D"related-topics-notes-of-interest"></a></p>

<!-- vim-markdown-toc -->

<h1>Related topics/notes of interest</h1>

<ul>
<li><a href=3D"https://swift.org/package-manager/">Swift Package Manager - =
conceptual Overview</a> Good reference to understand the concepts behind th=
e SPM.</li>
<li>The <a href=3D"https://clang.llvm.org/docs/Modules.html">Clang Module d=
ocumentation</a> a Good source of information on Clang modules. If you want=
 to understand more of the details have a look.</li>
<li> <a href=3D"https://github.com/apple/swift-package-manager/blob/master/=
Documentation/Usage.md#release">Swift Package Manager GitHub readme</a>, It=
 has useful information, but a little bit outdated.</li>
<li><a href=3D"https://www.sqlite.org/c3ref/intro.html">SQLite C-Language I=
nterface documentation</a> From this link, you can get more information on =
SQLite's C API.</li>
<li><a href=3D"https://github.com/apple/swift-evolution/blob/master/proposa=
ls/0208-package-manager-system-library-targets.md">Swift Package Manager - =
System Library Targets proposal</a>. Already implemented since Swift 4.2.</=
li>
<li><a href=3D"https://forums.swift.org/t/module-system/144/2">Swift Forums=
 question on Module System</a>, Read the reply clears out some concepts.</l=
i>
<li><a href=3D"https://gcc.gnu.org/onlinedocs/cpp/System-Headers.html">GCC =
System Headers</a>, explains what are system headers and sheds light on the=
 [system] attribute on <code>module.modulemap</code> declarations. A relate=
d <a href=3D"https://stackoverflow.com/questions/41685746/system-header-and=
-normal-header-gcc">Stack overflow Question</a> and <a href=3D"http://dbp-c=
onsulting.com/tutorials/SuppressingGCCWarnings.html#toc_link5">article</a>.=
</li>
<li><a href=3D"https://github.com/stephencelis/SQLite.swift/blob/master/Sou=
rces/SQLite/Core/Statement.swift">A proper Swift SQLite Wrapper</a>. You sh=
ould be able to understand the code now.</li>
<li>We can also define the provider of the system library. At the time of w=
riting, two package managers are supported Homebrew (brew, for macOS) and U=
buntu's Advanced Package Tool (apt).</li>
</ul>
<p>That means we could also have used the system's package manager to make =
make the libraries available to swift like this:</p>
<button class=3D"copy-code-button" type=3D"button">Copy</button><div class=
=3D"highlight"><pre class=3D"highlight swift"><code><table class=3D"rouge-t=
able"><tbody><tr><td class=3D"rouge-gutter gl"><pre class=3D"lineno">1
2
3
4
5
6
7
</pre></td><td class=3D"rouge-code"><pre><span class=3D"k">let</span> <span=
 class=3D"nv">package</span> <span class=3D"o">=3D</span> <span class=3D"kt=
">Package</span><span class=3D"p">(</span>
    <span class=3D"nv">name</span><span class=3D"p">:</span> <span class=3D=
"s">"CSQLite"</span><span class=3D"p">,</span>
    <span class=3D"nv">providers</span><span class=3D"p">:</span> <span cla=
ss=3D"p">[</span>
        <span class=3D"o">.</span><span class=3D"nf">brew</span><span class=
=3D"p">(</span><span class=3D"s">"sqlite"</span><span class=3D"p">),</span>
        <span class=3D"o">.</span><span class=3D"nf">apt</span><span class=
=3D"p">(</span><span class=3D"s">"libsqlite3-dev"</span><span class=3D"p">)=
</span>
    <span class=3D"p">]</span>
<span class=3D"p">)</span>
</pre></td></tr></tbody></table></code></pre></div><p>Then the Swift packag=
e manager will make sure to search the default directories (where brew or a=
pt install system libraries) and link them.</p>


    <br>
    <div class=3D"comments">
      ** If you want to check what else I'm currently doing, be sure to fol=
low me on twitter <a href=3D"https://twitter.com/rderik">@rderik</a> or sub=
scribe to the newsletter. If you want to send me a direct message, you can =
send it to <a href=3D"mailto:derik@rderik.com">derik@rderik.com</a>.
    <div>
  </div></div></article>
</section>
    <footer>
      <div class=3D"footer-content"><div class=3D"logo"><a href=3D"https://=
rderik.com/" aria-label=3D"Logo that takes you to the home of the site"></a=
></div>
=20
      <div class=3D"r-content">
        <div class=3D"mc-subscribe">
         <form action=3D"https://tinyletter.com/rderik" method=3D"post" tar=
get=3D"popupwindow"><p><label for=3D"tlemail">Subscribe to the newsletter</=
label></p><p><input type=3D"text" style=3D"width:140px" name=3D"email" id=
=3D"tlemail" placeholder=3D"name@email.com"></p><input type=3D"submit" valu=
e=3D"Subscribe"></form>
        </div>
        <div class=3D"handles"><div class=3D"github">
            <a href=3D"https://github.com/rderik">/rderik</a>
          </div>
          <div class=3D"twitter">
            <a href=3D"https://twitter.com/rderik">@rderik</a>
          </div>
          <div class=3D"reddit">
            <a href=3D"https://www.reddit.com/user/rcderik">@rcderik</a>
          </div>
          <div class=3D"feed"><a href=3D"https://rderik.com/feed.xml">blog =
- feed</a></div>
          <div class=3D"feed"><a href=3D"https://rderik.com/notes-feed.xml"=
>notes - feed</a></div>
          <div class=3D"privacy"><a href=3D"https://rderik.com/privacy">Pri=
vacy Policy</a></div>
        </div>
      </div>
      </div>
      <div class=3D"copyright">=C2=A9 2021 AmberTTY</div>
    </footer>
    <!-- Google tag (gtag.js) -->
   =20
   =20
 =20

</body></html>
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css2?family=Rubik:wght@300;500&family=Roboto&family=Source+Sans+Pro:wght@200;300;400;600&display=swap

@charset "utf-8";

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu72xKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+460-52F, U+1C=
80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu5mxKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+301, U+400-45=
F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu7mxKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu4WxKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+370-377, U+37=
A-37F, U+384-38A, U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu7WxKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+102-103, U+11=
0-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+300-301, U+303-304, U+=
308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu7GxKKTU1Kvnz.woff2") format("woff2"); unicode-range: U+100-2AF, U+30=
4, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0=
, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu=
92Fr1Mu4mxKKTU1Kg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+=
152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, =
U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nErXyw023e1Ik.woff2") format("woff2"); unicode-range: U+600-6FF, U+750-7=
7F, U+870-88E, U+890-891, U+898-8E1, U+8E3-8FF, U+200C-200E, U+2010-2011, U=
+204F, U+2E41, U+FB50-FDFF, U+FE70-FE74, U+FE76-FEFC, U+102E0-102FB, U+10E6=
0-10E7E, U+10EFD-10EFF, U+1EE00-1EE03, U+1EE05-1EE1F, U+1EE21-1EE22, U+1EE2=
4, U+1EE27, U+1EE29-1EE32, U+1EE34-1EE37, U+1EE39, U+1EE3B, U+1EE42, U+1EE4=
7, U+1EE49, U+1EE4B, U+1EE4D-1EE4F, U+1EE51-1EE52, U+1EE54, U+1EE57, U+1EE5=
9, U+1EE5B, U+1EE5D, U+1EE5F, U+1EE61-1EE62, U+1EE64, U+1EE67-1EE6A, U+1EE6=
C-1EE72, U+1EE74-1EE77, U+1EE79-1EE7C, U+1EE7E, U+1EE80-1EE89, U+1EE8B-1EE9=
B, U+1EEA1-1EEA3, U+1EEA5-1EEA9, U+1EEAB-1EEBB, U+1EEF0-1EEF1; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nMrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-=
1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nFrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+301, U+400-45F, =
U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nDrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+590-5FF, U+200C-=
2010, U+20AA, U+25CC, U+FB1D-FB4F; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nPrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, =
U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U=
+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 300; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nBrXyw023e.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-=
153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20=
74, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nErXyw023e1Ik.woff2") format("woff2"); unicode-range: U+600-6FF, U+750-7=
7F, U+870-88E, U+890-891, U+898-8E1, U+8E3-8FF, U+200C-200E, U+2010-2011, U=
+204F, U+2E41, U+FB50-FDFF, U+FE70-FE74, U+FE76-FEFC, U+102E0-102FB, U+10E6=
0-10E7E, U+10EFD-10EFF, U+1EE00-1EE03, U+1EE05-1EE1F, U+1EE21-1EE22, U+1EE2=
4, U+1EE27, U+1EE29-1EE32, U+1EE34-1EE37, U+1EE39, U+1EE3B, U+1EE42, U+1EE4=
7, U+1EE49, U+1EE4B, U+1EE4D-1EE4F, U+1EE51-1EE52, U+1EE54, U+1EE57, U+1EE5=
9, U+1EE5B, U+1EE5D, U+1EE5F, U+1EE61-1EE62, U+1EE64, U+1EE67-1EE6A, U+1EE6=
C-1EE72, U+1EE74-1EE77, U+1EE79-1EE7C, U+1EE7E, U+1EE80-1EE89, U+1EE8B-1EE9=
B, U+1EEA1-1EEA3, U+1EEA5-1EEA9, U+1EEAB-1EEBB, U+1EEF0-1EEF1; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nMrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-=
1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nFrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+301, U+400-45F, =
U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nDrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+590-5FF, U+200C-=
2010, U+20AA, U+25CC, U+FB1D-FB4F; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nPrXyw023e1Ik.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, =
U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U=
+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Rubik; font-style: normal; font-weight: 500; font=
-display: swap; src: url("https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDn=
IV7nBrXyw023e.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-=
153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20=
74, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wmhdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F=
, U+FE2E-FE2F; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wkxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wmxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wlBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+38E-3A1, U+3A3=
-3FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wmBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U=
+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20A=
B; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wmRdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF=
, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 200; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_wlxdu3cOWxw.woff2") format("woff2")=
; unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, =
U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U=
+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmhdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F=
, U+FE2E-FE2F; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwkxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+38E-3A1, U+3A3=
-3FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U=
+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20A=
B; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwmRdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF=
, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 300; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zwlxdu3cOWxw.woff2") format("woff2")=
; unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, =
U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U=
+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+=
FE2E-FE2F; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+38E-3A1, U+3A3-3FF=
; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF=
-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lujVj9_mf.woff2") format("woff2"); =
unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+=
2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7lujVj9w.woff2") format("woff2"); un=
icode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+30=
4, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+221=
2, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F=
, U+FE2E-FE2F; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+38E-3A1, U+3A3=
-3FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U=
+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20A=
B; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRdu3cOWxy40.woff2") format("woff2=
"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF=
, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Sans Pro"; font-style: normal; font-weigh=
t: 600; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcesan=
spro/v22/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu3cOWxw.woff2") format("woff2")=
; unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, =
U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U=
+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/stylesheets/site.css

@charset "utf-8";

@import url("syntax_highlighting.css");

.switch { position: relative; display: inline-block; width: 40px; height: 1=
8px; }

.switch input { opacity: 0; width: 0px; height: 0px; }

.slider { position: absolute; cursor: pointer; inset: 0px; background-color=
: rgb(238, 150, 32); transition: all 0.4s ease 0s; }

.slider::before { position: absolute; content: ""; height: 12px; width: 12p=
x; left: 3px; bottom: 3px; background: rgba(255, 255, 255, 0.82); transitio=
n: all 0.4s ease 0s; }

input:checked + .slider { background-color: rgb(6, 216, 255); }

input:focus + .slider { box-shadow: rgb(3, 214, 28) 0px 0px 1px; }

input:checked + .slider::before { transform: translateX(22px); }

.slider.round { border-radius: 4px; }

.slider.round::before { border-radius: 20%; }

.copy-code-button { color: rgb(39, 40, 34); background-color: rgb(255, 255,=
 255); border: 2px solid; border-radius: 3px 3px 0px 0px; display: block; m=
argin-left: auto; margin-right: 0px; margin-bottom: -2px; padding: 3px 8px;=
 font-size: 0.8em; }

.copy-code-button:hover { cursor: pointer; background-color: rgb(242, 242, =
242); }

.copy-code-button:focus { background-color: rgb(230, 230, 230); outline: 0p=
x; }

.copy-code-button:active { background-color: rgb(217, 217, 217); }

.highlight pre { margin: 0px; }

body { margin: 0px; display: grid; height: 100vh; align-items: stretch; gri=
d-template: "header header header header header header header header header=
 header header header" 86px ". . content content content content content co=
ntent content content . ." auto "footer footer footer footer footer footer =
footer footer footer footer footer footer" 380px / 1fr 1fr 1fr 1fr 1fr 1fr =
1fr 1fr 1fr 1fr 1fr 1fr; background-color: rgb(255, 255, 255); color: rgb(5=
1, 51, 51); font-family: Verdana, Merriweather, Helvetica, Lato, -apple-sys=
tem, BlinkMacSystemFont, "Avenir Next", Avenir, "Segoe UI", "Lucida Grande"=
, "Helvetica Neue", "Fira Sans", Roboto, Noto, "Droid Sans", Cantarell, Oxy=
gen, Ubuntu, "Franklin Gothic Medium", "Century Gothic", "Liberation Sans",=
 sans-serif; }

body h1, body h2, body h3, body h4, body h5, body h6 { font-family: "Source=
 Sans Pro"; letter-spacing: 0.01em; margin-bottom: 0px; margin-top: 40px; f=
ont-weight: 300; }

code { background: rgb(221, 225, 226); padding: 3px; border-radius: 7px; }

.highlight code { background: rgb(18, 43, 59); padding: 0px; }

pre.highlight { overflow: auto; padding: 15px; }

.paginate_nav { height: 10px; }

.paginate_nav .prev { float: left; }

.paginate_nav .next { float: right; }

header { grid-area: header / header / header / header; align-self: center; =
display: grid; align-items: stretch; grid-template-columns: 1fr 1fr 1fr 1fr=
 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr; grid-template-areas: "logo logo logo . . =
. menu menu menu menu menu menu"; background: rgba(136, 136, 136, 0.19); }

header .logo { grid-area: logo / logo / logo / logo; justify-self: start; }

header #top-menu { grid-area: menu / menu / menu / menu; align-self: center=
; margin-right: 28px; font-family: Rubik; font-weight: 300; }

header #top-menu ul { list-style-type: none; margin: 0px; padding: 0px; tex=
t-align: right; }

header #top-menu ul li { display: inline; border-right: 1px rgb(108, 139, 1=
59); margin-left: 12px; padding: 4px; }

header #top-menu ul li a { text-decoration: none; text-transform: uppercase=
; color: rgb(23, 150, 82); }

header #top-menu ul li a:hover { color: rgb(238, 150, 32); }

header #top-menu .handles .feed a::before { background: url("/images/Generi=
c_Feed-icon_black.svg") center center no-repeat; }

header #top-menu .handles .github a::before { background: url("/images/Gith=
ub_Social_Icon_Circle_Black.svg") center center no-repeat; }

header #top-menu .handles .discord a::before { background: url("/images/Dis=
cord-Logo-Black.svg") center center no-repeat; }

header #top-menu .handles .reddit a::before { background: url("/images/Redd=
it_Circle_Black.svg") center center no-repeat; }

header #top-menu .handles .twitter a::before { background: url("/images/Twi=
tter_Social_Icon_Circle_Black.svg") center center no-repeat; }

header #top-menu .handles .github, header #top-menu .handles .reddit, heade=
r #top-menu .handles .twitter, header #top-menu .handles .feed, header #top=
-menu .handles .privacy { float: left; }

header #top-menu .handles a { color: rgb(16, 14, 23); }

header #top-menu .handles a::before { color: rgb(16, 14, 23); }

header #top-menu .theme-switch { display: inline; margin-top: 5px; }

hr { border-color: rgba(187, 187, 187, 0.12); width: 50%; }

#content { grid-area: content / content / content / content; width: 100%; }

#content a { color: rgb(31, 137, 204); }

#content article { margin-bottom: 50px; }

#content article a { text-decoration: none; }

#content article a.read-more { font-size: 0.75em; }

#content article h1 { font-size: 2.75em; }

#content article h1 a { text-decoration: none; }

#content article h1 code { font-size: 1.15em; }

#content article h1 span { display: block; color: rgba(127, 127, 127, 0.63)=
; font-size: 0.35em; }

#content article h1.main-title, #content article h1:first-child { font-size=
: 3em; font-weight: 200; color: rgb(3, 214, 28); }

#content article img:not(.img_specific_size) { width: 70%; border: none; ba=
ckground: none; }

#content article p { line-height: 1.5em; }

#content article p code { font-size: 1.15em; }

#content article.guides .description { margin-left: 300px; }

#content article.guides img { float: left; width: 300px; height: 425px; pad=
ding: 10px; }

#content article.guides a.gumroad-button { background-color: rgb(28, 135, 2=
01); border: none; color: white; padding: 20px 34px; text-align: center; te=
xt-decoration: none; display: inline-block; font-size: 20px; margin: 4px 2p=
x; cursor: pointer; }

#content article.thumbnails img { float: left; width: 200px; height: 200px;=
 padding: 10px; }

#content article.thumbnails h1.main-title, #content article.thumbnails h1:f=
irst-child { font-size: 2.5em; font-weight: 200; color: rgb(3, 214, 28); }

#content .rd-toc { grid-area: toc / toc / toc / toc; border: 2px solid rgba=
(187, 187, 187, 0.12); border-radius: 15px; background: rgba(185, 185, 185,=
 0.1); padding: 25px; margin-left: 20%; margin-right: 20%; }

#content .rd-toc a { font-family: "Source Sans Pro"; font-size: 1.25em; col=
or: rgb(166, 166, 166); text-decoration: none; }

#content .rd-toc code { color: rgb(132, 131, 131); }

#content .rd-toc h1, #content .rd-toc h2, #content .rd-toc h3, #content .rd=
-toc h4, #content .rd-toc h5, #content .rd-toc h6 { margin-top: 0px; text-t=
ransform: uppercase; }

#content .rd-toc ul { list-style-type: none; padding: 0px; margin-left: 10p=
x; }

#content .rd-toc ul li { margin: 12px; }

#content h1.main-title { font-size: 4em; font-weight: 200; color: rgb(3, 21=
4, 28); }

#content li { margin: 8px; }

#content li code { font-size: 1.15em; }

#content strong.notice { font-size: 1.1em; text-decoration: underline; }

#content .mc-subscribe label { font-weight: bold; color: rgb(255, 255, 255)=
; display: block; }

#content .mc-subscribe input[type=3D"text"] { border-radius: 0.4rem; paddin=
g: 7px 25px; }

#content .mc-subscribe input[type=3D"submit"] { background-color: rgb(0, 21=
4, 29); border-radius: 5px; border: none; color: white; padding: 5px 12px; =
text-align: center; text-decoration: none; display: inline-block; font-size=
: 16px; }

.logo a { padding: 28px 28px 18px; text-decoration: none; float: left; heig=
ht: 40px; color: rgb(18, 43, 59); text-transform: uppercase; font-weight: b=
old; font-size: 2.25rem; }

.logo a::before { background: url("/images/rderik-logo.svg"); content: ""; =
width: 130px; height: 29px; border: none; display: inline-block; }

.handles div { padding: 9px; }

.handles a { color: rgb(255, 255, 255); }

.handles .feed a::before { background: url("/images/Generic_Feed-icon.svg")=
 center center / 17px 17px no-repeat; color: rgb(0, 0, 0); content: ""; wid=
th: 17px; height: 17px; display: inline-block; margin-right: 3px; }

.handles .github a::before { background: url("/images/Github_Social_Icon_Ci=
rcle_White.svg") center center / 17px 17px no-repeat; color: rgb(0, 0, 0); =
content: ""; width: 17px; height: 17px; display: inline-block; margin-right=
: 3px; }

.handles .discord a::before { background: url("/images/Discord-Logo-White.s=
vg") center center / 17px 17px no-repeat; color: rgb(0, 0, 0); content: "";=
 width: 17px; height: 17px; display: inline-block; margin-right: 3px; }

.handles .reddit a::before { background: url("/images/Reddit_Circle_White.s=
vg") center center / 17px 17px no-repeat; color: rgb(0, 0, 0); content: "";=
 width: 17px; height: 17px; display: inline-block; margin-right: 3px; }

.handles .twitter a::before { background: url("/images/Twitter_Social_Icon_=
Circle_White.svg") center center / 17px 17px no-repeat; color: rgb(0, 0, 0)=
; content: ""; width: 17px; height: 17px; display: inline-block; margin-rig=
ht: 3px; }

footer { grid-area: footer / footer / footer / footer; background: rgb(59, =
64, 69); padding: 0vh 1rem; align-self: end; font-family: Rubik; font-weigh=
t: 300; }

footer .footer-content { padding: 0rem 0.5rem 0.5rem; }

footer .footer-content .handles a { color: rgb(255, 255, 255); }

footer .logo a { filter: grayscale(1) brightness(1.99); margin-top: 4px; co=
lor: rgb(255, 255, 255) !important; }

footer .logo a::before { width: 347px; height: 77px; }

footer .copyright { color: rgb(255, 255, 255); text-align: center; position=
: absolute; margin-left: 55px; margin-bottom: 10px; }

footer .r-content { float: right; }

footer .mc-subscribe label { font-weight: bold; color: rgb(255, 255, 255); =
display: block; }

footer .mc-subscribe input[type=3D"text"] { border-radius: 0.4rem; padding:=
 7px 25px; }

footer .mc-subscribe input[type=3D"submit"] { background-color: rgb(0, 214,=
 29); border-radius: 5px; border: none; color: white; padding: 5px 12px; te=
xt-align: center; text-decoration: none; display: inline-block; font-size: =
16px; }

div.comments { color: rgb(168, 169, 170); }

a { color: rgba(0, 0, 0, 0.7); }

a:focus, a:hover { color: rgba(0, 0, 0, 0.6); }

#rderik-apps { display: grid; grid-template-rows: auto; }

#rderik-apps .app { display: grid; grid-template-columns: 150px auto; grid-=
template-areas: "app-icon app-description"; }

#rderik-apps .app .app-icon { grid-area: app-icon / app-icon / app-icon / a=
pp-icon; }

#rderik-apps .app .app-icon img { width: 100px; height: 100px; border-radiu=
s: 10px; }

#rderik-apps .app .app-description { grid-area: app-description / app-descr=
iption / app-description / app-description; }

@media (max-width: 812px) {
  body { grid-template: "header header" "menu menu" "content content" "foot=
er footer" / 1fr 1fr; }
  #content { grid-area: content / content / content / content; }
  #content #greeting { margin: 5px; }
  #content #derik-apps { margin: 5px; }
  #content #derik-apps .app { display: grid; grid-template-columns: 1fr; gr=
id-template-areas: "app-icon" "app-description"; }
  #content #derik-apps .app .app-icon { grid-area: app-icon / app-icon / ap=
p-icon / app-icon; }
  #content #derik-apps .app .app-description { grid-area: app-description /=
 app-description / app-description / app-description; }
  #content article { margin-left: 5px; margin-right: 5px; }
  #content article h1 { font-size: 1.75em; }
  #content article img { width: 100%; border: none; background: none; }
  #content article .highlight { border-radius: 7px; font-size: 1.25rem; }
  #content .rd-toc { margin-left: 10px; margin-right: 10px; }
  footer .copyright { margin-left: 55px; margin-bottom: 10px; }
  footer .logo a { margin-top: 4px; }
  footer .logo a::before { width: 300px; height: 67px; }
  header { grid-area: header / header / header / header; align-self: center=
; display: grid; align-items: stretch; grid-template-columns: 1fr 1fr; grid=
-template-areas: "logo logo" "menu menu"; background: rgb(214, 214, 214); }
  header .logo { grid-area: logo / logo / logo / logo; justify-self: start;=
 }
  header #top-menu { grid-area: menu / menu / menu / menu; text-align: cent=
er; margin-bottom: 10px; }
  header #top-menu .theme-switch { float: none; }
  header #top-menu ul > li { margin-left: 3px; }
  header #top-menu ul > li:last-child { position: absolute; margin-top: -67=
px; right: 9px; }
}

body.dark-mode { background-color: rgb(51, 51, 51); color: rgb(187, 187, 18=
7); }

body.dark-mode #top-menu a { color: rgb(27, 174, 95); }

body.dark-mode a { color: rgb(203, 223, 228); }

body.dark-mode header .logo a { color: rgb(32, 109, 127); }

body.dark-mode code { background: rgba(85, 86, 87, 0.46); color: rgb(255, 2=
55, 255); }

body.dark-mode div.comments { color: rgb(135, 135, 135); }

body.dark-mode h1, body.dark-mode h2, body.dark-mode h3, body.dark-mode h4,=
 body.dark-mode h5, body.dark-mode h6 { color: rgb(225, 225, 225); }

body.dark-mode .rd-toc a { color: rgb(203, 223, 228); }

@media screen and (prefers-color-scheme: dark) {
  body { background-color: rgb(51, 51, 51); color: rgb(187, 187, 187); }
  body #top-menu a { color: rgb(27, 174, 95); }
  body a { color: rgb(203, 223, 228); }
  body header .logo a { color: rgb(32, 109, 127); }
  body code { background: rgba(85, 86, 87, 0.46); color: rgb(255, 255, 255)=
; }
  body div.comments { color: rgb(135, 135, 135); }
  body h1, body h2, body h3, body h4, body h5, body h6 { color: rgb(225, 22=
5, 225); }
  body .rd-toc a { color: rgb(203, 223, 228); }
}

body.light-mode { background-color: rgb(255, 255, 255); color: rgb(51, 51, =
51); }

body.light-mode a { color: rgb(31, 137, 204); }

body.light-mode header .logo a { color: rgb(32, 109, 127); }

body.light-mode code { background: rgb(221, 225, 226); }

body.light-mode div.comments { color: rgb(168, 169, 170); }

body.light-mode h1, body.light-mode h2, body.light-mode h3, body.light-mode=
 h4, body.light-mode h5, body.light-mode h6 { color: rgb(51, 51, 51); }

body.light-mode #content .rd-toc a { color: rgb(166, 166, 166); }

@media screen and (prefers-color-scheme: light) {
  body { background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); }
  body a { color: rgb(31, 137, 204); }
  body header .logo a { color: rgb(32, 109, 127); }
  body code { background: rgb(221, 225, 226); }
  body div.comments { color: rgb(168, 169, 170); }
  body h1, body h2, body h3, body h4, body h5, body h6 { color: rgb(51, 51,=
 51); }
  body #content .rd-toc a { color: rgb(166, 166, 166); }
}
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/stylesheets/syntax_highlighting.css

@charset "utf-8";

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight { color: rgb(250, 246, 228); background-color: rgb(18, 43, 59); =
}

.highlight .gl { color: rgb(222, 229, 231); background-color: rgb(78, 93, 9=
8); }

.highlight .gp { color: rgb(168, 225, 254); }

.highlight .c, .highlight .ch, .highlight .cd, .highlight .cm, .highlight .=
cpf, .highlight .c1, .highlight .cs { color: rgb(108, 139, 159); font-style=
: italic; }

.highlight .cp { color: rgb(178, 253, 109); font-style: italic; }

.highlight .err { color: rgb(254, 254, 236); background-color: rgb(204, 0, =
0); }

.highlight .gr { color: rgb(204, 0, 0); font-style: italic; }

.highlight .k, .highlight .kd, .highlight .kv { color: rgb(246, 221, 98); }

.highlight .o, .highlight .ow { color: rgb(77, 244, 255); }

.highlight .p, .highlight .pi { color: rgb(77, 244, 255); }

.highlight .gd { color: rgb(204, 0, 0); }

.highlight .gi { color: rgb(178, 253, 109); }

.highlight .ge { font-style: italic; }

.highlight .gs { }

.highlight .gt { color: rgb(222, 229, 231); background-color: rgb(78, 93, 9=
8); }

.highlight .kc { color: rgb(246, 150, 219); }

.highlight .kn { color: rgb(255, 176, 0); }

.highlight .kp { color: rgb(255, 176, 0); }

.highlight .kr { color: rgb(255, 176, 0); }

.highlight .gh { color: rgb(255, 176, 0); }

.highlight .gu { color: rgb(255, 176, 0); }

.highlight .kt { color: rgb(178, 253, 109); }

.highlight .no { color: rgb(178, 253, 109); }

.highlight .nc { color: rgb(178, 253, 109); }

.highlight .nd { color: rgb(178, 253, 109); }

.highlight .nn { color: rgb(178, 253, 109); }

.highlight .bp { color: rgb(178, 253, 109); }

.highlight .ne { color: rgb(178, 253, 109); }

.highlight .nl { color: rgb(255, 176, 0); }

.highlight .nt { color: rgb(255, 176, 0); }

.highlight .m, .highlight .mb, .highlight .mf, .highlight .mh, .highlight .=
mi, .highlight .il, .highlight .mo, .highlight .mx { color: rgb(246, 150, 2=
19); }

.highlight .ld { color: rgb(246, 150, 219); }

.highlight .ss { color: rgb(246, 150, 219); }

.highlight .s, .highlight .sa, .highlight .sb, .highlight .dl, .highlight .=
sd, .highlight .s2, .highlight .sh, .highlight .sx, .highlight .sr, .highli=
ght .s1 { color: rgb(255, 240, 166); }

.highlight .se { color: rgb(77, 244, 255); }

.highlight .sc { color: rgb(77, 244, 255); }

.highlight .si { color: rgb(77, 244, 255); }

.highlight .nb { }

.highlight .ni { color: rgb(153, 153, 153); }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .go { color: rgb(187, 187, 187); }

.highlight .nf, .highlight .fm { color: rgb(168, 225, 254); }

.highlight .py { color: rgb(168, 225, 254); }

.highlight .na { color: rgb(168, 225, 254); }

.highlight .nv, .highlight .vc, .highlight .vg, .highlight .vi, .highlight =
.vm { color: rgb(168, 225, 254); }

.highlight { border-radius: 7px; font-size: 1rem; }
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/images/rderik-logo.svg

<svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 2047.5 454.59"><de=
fs><style>.cls-1{fill:#00d61d;}</style></defs><g id=3D"Layer_2" data-name=
=3D"Layer 2"><g id=3D"Logo_Smooth_EE" data-name=3D"Logo Smooth EE"><path cl=
ass=3D"cls-1" d=3D"M0,197a36.15,36.15,0,0,1,5.88-18.09L130.12,8.09C133.35,3=
.64,140.5,0,146,0H449c5.5,0,13.31,3.05,17.35,6.78l9.26,8.56a11.58,11.58,0,0=
,1,1.48,14.88L343.87,213.9a11.62,11.62,0,0,0,1.46,14.91L514.67,386.19c4,3.7=
5,7.33,11.31,7.33,16.81v10.79c0,5.5-3.88,12.29-8.61,15.08l-40.78,24.05a14.2=
3,14.23,0,0,1-15.92-1.74L218.31,228.82a11.66,11.66,0,0,1-1.45-14.92L300.34,=
98.5c3.23-4.46,3.57-10.22.76-12.8S291.5,81,286,81H199c-5.5,0-12.62,3.66-15.=
82,8.13L93.82,213.87C90.62,218.34,83.5,222,78,222H10A10,10,0,0,1,0,212Z"/><=
path class=3D"cls-1" d=3D"M891,243a36,36,0,0,0,5.9,18.07l94.2,128.86c3.24,4=
.44,10.4,8.07,15.9,8.07h143c5.5,0,12.62-3.66,15.81-8.14l8.38-11.72c3.19-4.4=
8,5.85-11.78,5.9-16.23s-2.59-11.69-5.87-16.11L1141,301c-3.28-4.42-10.46-8-1=
6-8h-82c-5.5,0-12.63-3.65-15.84-8.12l-11.32-15.76A36.47,36.47,0,0,1,1010,25=
1v-9a10,10,0,0,1,10-10h128c5.5,0,12.63-3.65,15.85-8.11l1.3-1.78c3.22-4.46,5=
.85-11.71,5.85-16.11s-2.62-11.66-5.83-16.13l-21.34-29.74c-3.21-4.47-10.33-8=
.13-15.83-8.13H989a9.79,9.79,0,0,1-10-9.5c0-5.22,2.59-13.18,5.75-17.68l14.5=
-20.64c3.16-4.5,10.25-8.18,15.75-8.18h132c5.5,0,12.66-3.63,15.9-8.07l37.2-5=
0.86a14.68,14.68,0,0,0,0-16.17l-9.26-12.8C1187.64,3.64,1180.5,0,1175,0H923c=
-5.5,0-12.6,3.67-15.79,8.16L896.79,22.84A36.82,36.82,0,0,0,891,41Z"/><path =
class=3D"cls-1" d=3D"M840.85,8.11C837.63,3.65,830.5,0,825,0H565c-5.5,0-12.6=
5,3.64-15.89,8.08L501.89,72.92A36,36,0,0,0,496,91V305c0,5.5,3.29,13.07,7.32=
,16.82l67,62.43A14.28,14.28,0,0,0,586.25,386L857.37,227.06c4.75-2.78,8.63-9=
.56,8.63-15.06V53a36.31,36.31,0,0,0-5.85-18.11ZM780,156c0,5.5-3.87,12.29-8.=
61,15.09L639.61,248.91A43.31,43.31,0,0,1,621,254h-4a10,10,0,0,1-10-10V124a3=
6.15,36.15,0,0,1,5.88-18.09l12.24-16.82C628.35,84.64,635.5,81,641,81H756c5.=
5,0,12.67,3.62,15.93,8l2.14,2.9A35.71,35.71,0,0,1,780,110Z"/><path class=3D=
"cls-1" d=3D"M1212.48,363.5a37,37,0,0,0,5.8,18.16l5.44,7.68c3.18,4.49,10.28=
,8.16,15.78,8.16h37c5.5,0,12.64-3.64,15.87-8.1l9.26-12.8a36.2,36.2,0,0,0,5.=
87-18.1v-226a36.74,36.74,0,0,1,5.81-18.14l18.38-25.72c3.19-4.48,10.31-8.14,=
15.81-8.14h87c5.5,0,12.63,3.65,15.84,8.12l6.32,8.76a36.47,36.47,0,0,1,5.84,=
18.12v33c0,5.5-3.88,12.28-8.62,15.07l-94.26,55.36c-4.74,2.79-8.6,9.57-8.57,=
15.07l0,6.57c0,5.5,3.34,13.08,7.36,16.83l143.24,133.77c4,3.76,11.81,6.83,17=
.31,6.83h73a9.79,9.79,0,0,0,10-9.5c0-5.22-3.28-12.58-7.28-16.35l-121.94-114=
.8c-4-3.77-3.42-9.16,1.3-12l77.34-46.24c4.72-2.82,8.58-9.63,8.58-15.13V75a3=
6.26,36.26,0,0,0-5.86-18.1L1518.86,8.1C1515.64,3.65,1508.5,0,1503,0H1278c-5=
.5,0-12.65,3.64-15.88,8.09l-44.24,60.82A36,36,0,0,0,1212,87Z"/><path class=
=3D"cls-1" d=3D"M1642.09,8.07C1645.34,3.63,1652.5,0,1658,0h24c5.5,0,12.54,3=
.71,15.65,8.25l1.7,2.5A38,38,0,0,1,1705,29V368a37.3,37.3,0,0,1-5.73,18.19l-=
2.54,3.62c-3.15,4.5-10.23,8.19-15.73,8.19h-7c-5.5,0-13.28-3.08-17.28-6.85l-=
53.44-50.3c-4-3.77-7.28-11.35-7.28-16.85V81a35.89,35.89,0,0,1,5.91-18.07Z"/=
><path class=3D"cls-1" d=3D"M1908,0c-5.5,0-13,3.33-16.74,7.39L1739.74,173.6=
1C1736,177.67,1733,185.5,1733,191V369.28c0,5.5,3.29,13.07,7.3,16.83l5.4,5.0=
6c4,3.75,11.8,6.83,17.3,6.83h25c5.5,0,12.73-3.58,16.06-8l.88-1.17a34.68,34.=
68,0,0,0,6.06-17.95V329a39.57,39.57,0,0,1,5.47-18.37l6.06-9.26c3-4.6,9.52-8=
.37,14.47-8.37s12.28,3.08,16.3,6.84l97.4,91.32c4,3.76,11.8,6.84,17.3,6.84h5=
7c5.5,0,12.67-3.63,15.92-8.06l4.48-6.09A11.59,11.59,0,0,0,2044,369L1871.43,=
207a11.12,11.12,0,0,1-1.09-14.69L1998.8,29.84a14,14,0,0,0,.32-15.93l-4.24-5=
.82C1991.65,3.64,1984.5,0,1979,0Z"/></g></g></svg>
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/images/Generic_Feed-icon.svg

<?xml version=3D"1.0" encoding=3D"UTF-8"?>
<svg xmlns=3D"http://www.w3.org/2000/svg"
     id=3D"RSSicon"
     viewBox=3D"0 0 8 8" width=3D"256" height=3D"256">

  <title>RSS feed icon</title>

  <style type=3D"text/css">
    .button {stroke: none; fill: white; opacity: 0;}
    .symbol {stroke: none; fill: white; opacity: 1;}
  </style>

  <rect   class=3D"button" width=3D"8" height=3D"8" rx=3D"1.5" />
  <circle class=3D"symbol" cx=3D"2" cy=3D"6" r=3D"1" />
  <path   class=3D"symbol" d=3D"m 1,4 a 3,3 0 0 1 3,3 h 1 a 4,4 0 0 0 -4,-4=
 z" />
  <path   class=3D"symbol" d=3D"m 1,2 a 5,5 0 0 1 5,5 h 1 a 6,6 0 0 0 -6,-6=
 z" />

</svg>=0A
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/images/Github_Social_Icon_Circle_White.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<svg version=3D"1.1" id=3D"White" xmlns=3D"http://www.w3.org/2000/svg" xmln=
s:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 viewBox=3D"0 0 16 16" style=3D"enable-background:new 0 0 400 400;" xml:sp=
ace=3D"preserve">
<style type=3D"text/css">
	.st0{fill:#FFFFFF;}
</style>
<path class=3D"st0" fill-rule=3D"evenodd" d=3D"M8 0C3.58 0 0 3.58 0 8c0 3.5=
4 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.5=
3-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08=
.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-=
3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.=
64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.1=
6 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73=
.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0=
-4.42-3.58-8-8-8z"/>
</svg>=0A
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/images/Reddit_Circle_White.svg

<?xml version=3D"1.0" ?><svg id=3D"Layer_1" style=3D"enable-background:new =
0 0 1000 1000;" version=3D"1.1" viewBox=3D"0 0 1000 1000" xml:space=3D"pres=
erve" xmlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"http://www.w3.org=
/1999/xlink"><style type=3D"text/css">
	.st0{fill:#3b4045;}
	.circle{fill:#ffffff;}
</style><title/><g><path class=3D"circle" d=3D"M500,1000L500,1000C223.9,100=
0,0,776.1,0,500l0,0C0,223.9,223.9,0,500,0l0,0c276.1,0,500,223.9,500,500l0,0=
   C1000,776.1,776.1,1000,500,1000z"/><path class=3D"st0" d=3D"M614.6,604.2=
c-28.7,0-52.1-23.4-52.1-52.1c0-28.7,23.4-52.1,52.1-52.1s52.1,23.4,52.1,52.1=
   C666.7,580.8,643.3,604.2,614.6,604.2 M623.8,689.7C588.2,725.2,520.1,728,=
500.1,728c-20,0-88.2-2.8-123.7-38.3   c-5.3-5.3-5.3-13.8,0-19.1s13.8-5.3,19=
.1,0C417.9,693,465.8,701,500.1,701c34.2,0,82.2-8,104.6-30.4c5.3-5.3,13.8-5.=
3,19.1,0   C629,675.9,629,684.4,623.8,689.7 M333.3,552.1c0-28.7,23.4-52.1,5=
2.1-52.1s52.1,23.4,52.1,52.1s-23.4,52.1-52.1,52.1   C356.7,604.2,333.3,580.=
8,333.3,552.1 M833.3,500c0-40.3-32.6-72.9-72.9-72.9c-19.7,0-37.5,7.8-50.6,2=
0.5   c-49.8-36-118.5-59.2-195-61.9L548,229.4l108.5,23.1c1.3,27.6,23.9,49.6=
,51.8,49.6c28.8,0,52.1-23.3,52.1-52.1   s-23.3-52.1-52.1-52.1c-20.5,0-38,11=
.9-46.5,29.1l-121.2-25.8c-3.4-0.7-6.9-0.1-9.8,1.8c-2.9,1.9-4.9,4.8-5.6,8.2l=
-36.4,171.5   c-0.2,1,0,1.9,0,2.9c-77.9,2-147.9,25.3-198.5,61.8c-13.1-12.6-=
30.8-20.3-50.4-20.3c-40.3,0-72.9,32.7-72.9,72.9   c0,29.6,17.7,55.1,43.1,66=
.5c-1.1,7.2-1.7,14.6-1.7,22.1c0,112.2,130.6,203.1,291.7,203.1s291.7-90.9,29=
1.7-203.1   c0-7.4-0.6-14.7-1.7-21.9C815.4,555.3,833.3,529.8,833.3,500" id=
=3D"Fill-3"/></g></svg>=0A
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://rderik.com/images/Twitter_Social_Icon_Circle_White.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 20.0.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<svg version=3D"1.1" id=3D"White" xmlns=3D"http://www.w3.org/2000/svg" xmln=
s:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 viewBox=3D"0 0 400 400" style=3D"enable-background:new 0 0 400 400;" xml:=
space=3D"preserve">
<style type=3D"text/css">
  .st0{fill:#FFFFFF;}
</style>
<path class=3D"st0" d=3D"M400,200c0,110.5-89.5,200-200,200S0,310.5,0,200S89=
.5,0,200,0S400,89.5,400,200z M163.4,305.5
	c88.7,0,137.2-73.5,137.2-137.2c0-2.1,0-4.2-0.1-6.2c9.4-6.8,17.6-15.3,24.1-=
25c-8.6,3.8-17.9,6.4-27.7,7.6
	c10-6,17.6-15.4,21.2-26.7c-9.3,5.5-19.6,9.5-30.6,11.7c-8.8-9.4-21.3-15.2-3=
5.2-15.2c-26.6,0-48.2,21.6-48.2,48.2
	c0,3.8,0.4,7.5,1.3,11c-40.1-2-75.6-21.2-99.4-50.4c-4.1,7.1-6.5,15.4-6.5,24=
.2c0,16.7,8.5,31.5,21.5,40.1c-7.9-0.2-15.3-2.4-21.8-6
	c0,0.2,0,0.4,0,0.6c0,23.4,16.6,42.8,38.7,47.3c-4,1.1-8.3,1.7-12.7,1.7c-3.1=
,0-6.1-0.3-9.1-0.9c6.1,19.2,23.9,33.1,45,33.5
	c-16.5,12.9-37.3,20.6-59.9,20.6c-3.9,0-7.7-0.2-11.5-0.7C110.8,297.5,136.2,=
305.5,163.4,305.5"/>
</svg>=0A
------MultipartBoundary--SlqyfV3boZdlIuDJUGVlni84VuMGhsZVtdB95tcQd3------

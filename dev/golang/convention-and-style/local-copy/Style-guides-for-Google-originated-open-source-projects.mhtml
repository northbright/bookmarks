From: <Saved by Blink>
Snapshot-Content-Location: https://google.github.io/styleguide/go/decisions.html
Subject: styleguide | Style guides for Google-originated open-source projects
Date: Sat, 14 Sep 2024 03:20:52 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--hbdVt383L1VJojCVjPRRWrONwBDThzstCKfaMoQQiN----"


------MultipartBoundary--hbdVt383L1VJojCVjPRRWrONwBDThzstCKfaMoQQiN----
Content-Type: text/html
Content-ID: <frame-504B0DB598499FA1B19DCD9BA102EE4F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://google.github.io/styleguide/go/decisions.html

<!DOCTYPE html><html lang=3D"en-US"><head><meta http-equiv=3D"Content-Type"=
 content=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"te=
xt/css" href=3D"cid:css-f57e049f-e648-4cdf-8074-94a84e0e3bce@mhtml.blink" /=
>
   =20
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>styleguide | Style guides for Google-originated open-source projects=
</title>
<meta name=3D"generator" content=3D"Jekyll v3.10.0">
<meta property=3D"og:title" content=3D"styleguide">
<meta property=3D"og:locale" content=3D"en_US">
<meta name=3D"description" content=3D"Style guides for Google-originated op=
en-source projects">
<meta property=3D"og:description" content=3D"Style guides for Google-origin=
ated open-source projects">
<link rel=3D"canonical" href=3D"https://google.github.io/styleguide/go/deci=
sions.html">
<meta property=3D"og:url" content=3D"https://google.github.io/styleguide/go=
/decisions.html">
<meta property=3D"og:site_name" content=3D"styleguide">
<meta property=3D"og:type" content=3D"website">
<meta name=3D"twitter:card" content=3D"summary">
<meta property=3D"twitter:title" content=3D"styleguide">

<!-- End Jekyll SEO tag -->

    <link rel=3D"stylesheet" href=3D"https://google.github.io/styleguide/as=
sets/css/style.css?v=3D8c4da230fc15e01e0ba3545c8a6ff55bc3da4649">
    <!-- start custom head snippets, customize with your own _includes/head=
-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel=3D"shortcut icon" type=3D"image/x-icon" href=3D"/styleguide/f=
avicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class=3D"container-lg px-3 my-5 markdown-body">
     =20
      <h1><a href=3D"https://google.github.io/styleguide/">styleguide</a></=
h1>
     =20

      <!--* toc_depth: 3 *-->

<h1 id=3D"go-style-decisions">Go Style Decisions</h1>

<p>https://google.github.io/styleguide/go/decisions</p>

<p><a href=3D"https://google.github.io/styleguide/go/index">Overview</a> | =
<a href=3D"https://google.github.io/styleguide/go/guide">Guide</a> | <a hre=
f=3D"https://google.github.io/styleguide/go/decisions">Decisions</a> |
<a href=3D"https://google.github.io/styleguide/go/best-practices">Best prac=
tices</a></p>

<!--

-->

<p><strong>Note:</strong> This is part of a series of documents that outlin=
e <a href=3D"https://google.github.io/styleguide/go/index">Go Style</a>
at Google. This document is <strong><a href=3D"https://google.github.io/sty=
leguide/go/index#normative">normative</a> but not
<a href=3D"https://google.github.io/styleguide/go/index#canonical">canonica=
l</a></strong>, and is subordinate to the
<a href=3D"https://google.github.io/styleguide/go/guide">core style guide</=
a>. See <a href=3D"https://google.github.io/styleguide/go/index#about">the =
overview</a> for more information.</p>

<p><a id=3D"about"></a></p>

<h2 id=3D"about">About<a class=3D"anchorjs-link " href=3D"https://google.gi=
thub.io/styleguide/go/decisions.html#about" aria-label=3D"Anchor" data-anch=
orjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left=
: 0.375em;"></a></h2>

<p>This document contains style decisions intended to unify and provide sta=
ndard
guidance, explanations, and examples for the advice given by the Go readabi=
lity
mentors.</p>

<p>This document is <strong>not exhaustive</strong> and will grow over time=
. In cases where
<a href=3D"https://google.github.io/styleguide/go/guide">the core style gui=
de</a> contradicts the advice given here, <strong>the style
guide takes precedence</strong>, and this document should be updated accord=
ingly.</p>

<p>See <a href=3D"https://google.github.io/styleguide/go#about">the Overvie=
w</a> for the full
set of Go Style documents.</p>

<p>The following sections have moved from style decisions to another part o=
f the
guide:</p>

<ul>
  <li>
    <p><strong>MixedCaps</strong>: see <a href=3D"https://google.github.io/=
styleguide/go/guide#mixed-caps">guide#mixed-caps</a>
<a id=3D"mixed-caps"></a></p>
  </li>
  <li>
    <p><strong>Formatting</strong>: see <a href=3D"https://google.github.io=
/styleguide/go/guide#formatting">guide#formatting</a>
<a id=3D"formatting"></a></p>
  </li>
  <li>
    <p><strong>Line Length</strong>: see <a href=3D"https://google.github.i=
o/styleguide/go/guide#line-length">guide#line-length</a>
<a id=3D"line-length"></a></p>
  </li>
</ul>

<p><a id=3D"naming"></a></p>

<h2 id=3D"naming">Naming<a class=3D"anchorjs-link " href=3D"https://google.=
github.io/styleguide/go/decisions.html#naming" aria-label=3D"Anchor" data-a=
nchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-l=
eft: 0.375em;"></a></h2>

<p>See the naming section within <a href=3D"https://google.github.io/styleg=
uide/go/guide#naming">the core style guide</a> for
overarching guidance on naming. The following sections provide further
clarification on specific areas within naming.</p>

<p><a id=3D"underscores"></a></p>

<h3 id=3D"underscores">Underscores<a class=3D"anchorjs-link " href=3D"https=
://google.github.io/styleguide/go/decisions.html#underscores" aria-label=3D=
"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-i=
cons; padding-left: 0.375em;"></a></h3>

<p>Names in Go should in general not contain underscores. There are three
exceptions to this principle:</p>

<ol>
  <li>Package names that are only imported by generated code may contain
underscores. See <a href=3D"https://google.github.io/styleguide/go/decision=
s.html#package-names">package names</a> for more detail around how
to choose multi-word package names.</li>
  <li>Test, Benchmark and Example function names within <code class=3D"lang=
uage-plaintext highlighter-rouge">*_test.go</code> files may
include underscores.</li>
  <li>Low-level libraries that interoperate with the operating system or cg=
o may
reuse identifiers, as is done in <a href=3D"https://pkg.go.dev/syscall#pkg-=
constants"><code class=3D"language-plaintext highlighter-rouge">syscall</co=
de></a>. This is expected to be very
rare in most codebases.</li>
</ol>

<p><a id=3D"package-names"></a></p>

<h3 id=3D"package-names">Package names<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#package-names" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-PackageNames"></a></p>

<p>Go package names should be short and contain only lowercase letters. A p=
ackage
name composed of multiple words should be left unbroken in all lowercase. F=
or
example, the package <a href=3D"https://pkg.go.dev/text/tabwriter"><code cl=
ass=3D"language-plaintext highlighter-rouge">tabwriter</code></a> is not na=
med <code class=3D"language-plaintext highlighter-rouge">tabWriter</code>, =
<code class=3D"language-plaintext highlighter-rouge">TabWriter</code>, or
<code class=3D"language-plaintext highlighter-rouge">tab_writer</code>.</p>

<p>Avoid selecting package names that are likely to be <a href=3D"https://g=
oogle.github.io/styleguide/go/best-practices#shadowing">shadowed</a> by com=
monly used
local variable names. For example, <code class=3D"language-plaintext highli=
ghter-rouge">usercount</code> is a better package name than
<code class=3D"language-plaintext highlighter-rouge">count</code>, since <c=
ode class=3D"language-plaintext highlighter-rouge">count</code> is a common=
ly used variable name.</p>

<p>Go package names should not have underscores. If you need to import a pa=
ckage
that does have one in its name (usually from generated or third party code)=
, it
must be renamed at import time to a name that is suitable for use in Go cod=
e.</p>

<p>An exception to this is that package names that are only imported by gen=
erated
code may contain underscores. Specific examples include:</p>

<ul>
  <li>
    <p>Using the <code class=3D"language-plaintext highlighter-rouge">_test=
</code> suffix for an external test package, for example an
integration test</p>
  </li>
  <li>
    <p>Using the <code class=3D"language-plaintext highlighter-rouge">_test=
</code> suffix for
<a href=3D"https://go.dev/blog/examples">package-level documentation exampl=
es</a></p>
  </li>
</ul>

<p>Avoid uninformative package names like <code class=3D"language-plaintext=
 highlighter-rouge">util</code>, <code class=3D"language-plaintext highligh=
ter-rouge">utility</code>, <code class=3D"language-plaintext highlighter-ro=
uge">common</code>, <code class=3D"language-plaintext highlighter-rouge">he=
lper</code>,
and so on. See more about
<a href=3D"https://google.github.io/styleguide/go/best-practices#util-packa=
ges">so-called =E2=80=9Cutility packages=E2=80=9D</a>.</p>

<p>When an imported package is renamed (e.g. <code class=3D"language-plaint=
ext highlighter-rouge">import foopb
"path/to/foo_go_proto"</code>), the local name for the package must comply =
with the
rules above, as the local name dictates how the symbols in the package are
referenced in the file. If a given import is renamed in multiple files,
particularly in the same or nearby packages, the same local name should be =
used
wherever possible for consistency.</p>

<!--#include file=3D"/go/g3doc/style/includes/special-name-exception.md"-->

<p>See also: <a href=3D"https://go.dev/blog/package-names">Go blog post abo=
ut package names</a>.</p>

<p><a id=3D"receiver-names"></a></p>

<h3 id=3D"receiver-names">Receiver names<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#receiver-names" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ReceiverNames"></a></p>

<p><a href=3D"https://golang.org/ref/spec#Method_declarations">Receiver</a>=
 variable names must be:</p>

<ul>
  <li>Short (usually one or two letters in length)</li>
  <li>Abbreviations for the type itself</li>
  <li>Applied consistently to every receiver for that type</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Long Name</th>
      <th>Better Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">func (tray T=
ray)</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">func (t Tray=
)</code></td>
    </tr>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">func (info *=
ResearchInfo)</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">func (ri *Re=
searchInfo)</code></td>
    </tr>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">func (this *=
ReportWriter)</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">func (w *Rep=
ortWriter)</code></td>
    </tr>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">func (self *=
Scanner)</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">func (s *Sca=
nner)</code></td>
    </tr>
  </tbody>
</table>

<p><a id=3D"constant-names"></a></p>

<h3 id=3D"constant-names">Constant names<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#constant-names" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Constant names must use <a href=3D"https://google.github.io/styleguide/g=
o/guide#mixed-caps">MixedCaps</a> like all other names in Go. (<a href=3D"h=
ttps://tour.golang.org/basics/3">Exported</a>
constants start with uppercase, while unexported constants start with
lowercase.) This applies even when it breaks conventions in other languages=
.
Constant names should not be a derivative of their values and should instea=
d
explain what the value denotes.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">const</span> <span class=3D"n">MaxPacketSize</span> <span=
 class=3D"o">=3D</span> <span class=3D"m">512</span>

<span class=3D"k">const</span> <span class=3D"p">(</span>
    <span class=3D"n">ExecuteBit</span> <span class=3D"o">=3D</span> <span =
class=3D"m">1</span> <span class=3D"o">&lt;&lt;</span> <span class=3D"no">i=
ota</span>
    <span class=3D"n">WriteBit</span>
    <span class=3D"n">ReadBit</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>Do not use non-MixedCaps constant names or constants with a <code class=
=3D"language-plaintext highlighter-rouge">K</code> prefix.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">const</span> <span class=3D"n">MAX_PACKET_SIZE</span> <sp=
an class=3D"o">=3D</span> <span class=3D"m">512</span>
<span class=3D"k">const</span> <span class=3D"n">kMaxBufferSize</span> <spa=
n class=3D"o">=3D</span> <span class=3D"m">1024</span>
<span class=3D"k">const</span> <span class=3D"n">KMaxUsersPergroup</span> <=
span class=3D"o">=3D</span> <span class=3D"m">500</span>
</code></pre></div></div>

<p>Name constants based on their role, not their values. If a constant does=
 not
have a role apart from its value, then it is unnecessary to define it as a
constant.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">const</span> <span class=3D"n">Twelve</span> <span class=
=3D"o">=3D</span> <span class=3D"m">12</span>

<span class=3D"k">const</span> <span class=3D"p">(</span>
    <span class=3D"n">UserNameColumn</span> <span class=3D"o">=3D</span> <s=
pan class=3D"s">"username"</span>
    <span class=3D"n">GroupColumn</span>    <span class=3D"o">=3D</span> <s=
pan class=3D"s">"group"</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<!--#include file=3D"/go/g3doc/style/includes/special-name-exception.md"-->

<p><a id=3D"initialisms"></a></p>

<h3 id=3D"initialisms">Initialisms<a class=3D"anchorjs-link " href=3D"https=
://google.github.io/styleguide/go/decisions.html#initialisms" aria-label=3D=
"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-i=
cons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Initialisms"></a></p>

<p>Words in names that are initialisms or acronyms (e.g., <code class=3D"la=
nguage-plaintext highlighter-rouge">URL</code> and <code class=3D"language-=
plaintext highlighter-rouge">NATO</code>) should
have the same case. <code class=3D"language-plaintext highlighter-rouge">UR=
L</code> should appear as <code class=3D"language-plaintext highlighter-rou=
ge">URL</code> or <code class=3D"language-plaintext highlighter-rouge">url<=
/code> (as in <code class=3D"language-plaintext highlighter-rouge">urlPony<=
/code>, or
<code class=3D"language-plaintext highlighter-rouge">URLPony</code>), never=
 as <code class=3D"language-plaintext highlighter-rouge">Url</code>. As a g=
eneral rule, identifiers (e.g., <code class=3D"language-plaintext highlight=
er-rouge">ID</code> and <code class=3D"language-plaintext highlighter-rouge=
">DB</code>)
should also be capitalized similar to their usage in English prose.</p>

<ul>
  <li>In names with multiple initialisms (e.g. <code class=3D"language-plai=
ntext highlighter-rouge">XMLAPI</code> because it contains <code class=3D"l=
anguage-plaintext highlighter-rouge">XML</code>
and <code class=3D"language-plaintext highlighter-rouge">API</code>), each =
letter within a given initialism should have the same case,
but each initialism in the name does not need to have the same case.</li>
  <li>In names with an initialism containing a lowercase letter (e.g. <code=
 class=3D"language-plaintext highlighter-rouge">DDoS</code>,
<code class=3D"language-plaintext highlighter-rouge">iOS</code>, <code clas=
s=3D"language-plaintext highlighter-rouge">gRPC</code>), the initialism sho=
uld appear as it would in standard prose,
unless you need to change the first letter for the sake of <a href=3D"https=
://golang.org/ref/spec#Exported_identifiers">exportedness</a>.
In these cases, the entire initialism should be the same case (e.g. <code c=
lass=3D"language-plaintext highlighter-rouge">ddos</code>,
<code class=3D"language-plaintext highlighter-rouge">IOS</code>, <code clas=
s=3D"language-plaintext highlighter-rouge">GRPC</code>).</li>
</ul>

<!-- Keep this table narrow. If it must grow wider, replace with a list. --=
>

<table>
  <thead>
    <tr>
      <th>English Usage</th>
      <th>Scope</th>
      <th>Correct</th>
      <th>Incorrect</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XML API</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">XMLAPI</code=
></td>
      <td><code class=3D"language-plaintext highlighter-rouge">XmlApi</code=
>, <code class=3D"language-plaintext highlighter-rouge">XMLApi</code>, <cod=
e class=3D"language-plaintext highlighter-rouge">XmlAPI</code>, <code class=
=3D"language-plaintext highlighter-rouge">XMLapi</code></td>
    </tr>
    <tr>
      <td>XML API</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">xmlAPI</code=
></td>
      <td><code class=3D"language-plaintext highlighter-rouge">xmlapi</code=
>, <code class=3D"language-plaintext highlighter-rouge">xmlApi</code></td>
    </tr>
    <tr>
      <td>iOS</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">IOS</code></=
td>
      <td><code class=3D"language-plaintext highlighter-rouge">Ios</code>, =
<code class=3D"language-plaintext highlighter-rouge">IoS</code></td>
    </tr>
    <tr>
      <td>iOS</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">iOS</code></=
td>
      <td><code class=3D"language-plaintext highlighter-rouge">ios</code></=
td>
    </tr>
    <tr>
      <td>gRPC</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">GRPC</code><=
/td>
      <td><code class=3D"language-plaintext highlighter-rouge">Grpc</code><=
/td>
    </tr>
    <tr>
      <td>gRPC</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">gRPC</code><=
/td>
      <td><code class=3D"language-plaintext highlighter-rouge">grpc</code><=
/td>
    </tr>
    <tr>
      <td>DDoS</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">DDoS</code><=
/td>
      <td><code class=3D"language-plaintext highlighter-rouge">DDOS</code>,=
 <code class=3D"language-plaintext highlighter-rouge">Ddos</code></td>
    </tr>
    <tr>
      <td>DDoS</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">ddos</code><=
/td>
      <td><code class=3D"language-plaintext highlighter-rouge">dDoS</code>,=
 <code class=3D"language-plaintext highlighter-rouge">dDOS</code></td>
    </tr>
    <tr>
      <td>ID</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">ID</code></t=
d>
      <td><code class=3D"language-plaintext highlighter-rouge">Id</code></t=
d>
    </tr>
    <tr>
      <td>ID</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">id</code></t=
d>
      <td><code class=3D"language-plaintext highlighter-rouge">iD</code></t=
d>
    </tr>
    <tr>
      <td>DB</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">DB</code></t=
d>
      <td><code class=3D"language-plaintext highlighter-rouge">Db</code></t=
d>
    </tr>
    <tr>
      <td>DB</td>
      <td>Unexported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">db</code></t=
d>
      <td><code class=3D"language-plaintext highlighter-rouge">dB</code></t=
d>
    </tr>
    <tr>
      <td>Txn</td>
      <td>Exported</td>
      <td><code class=3D"language-plaintext highlighter-rouge">Txn</code></=
td>
      <td><code class=3D"language-plaintext highlighter-rouge">TXN</code></=
td>
    </tr>
  </tbody>
</table>

<!--#include file=3D"/go/g3doc/style/includes/special-name-exception.md"-->

<p><a id=3D"getters"></a></p>

<h3 id=3D"getters">Getters<a class=3D"anchorjs-link " href=3D"https://googl=
e.github.io/styleguide/go/decisions.html#getters" aria-label=3D"Anchor" dat=
a-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; paddin=
g-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Getters"></a></p>

<p>Function and method names should not use a <code class=3D"language-plain=
text highlighter-rouge">Get</code> or <code class=3D"language-plaintext hig=
hlighter-rouge">get</code> prefix, unless the
underlying concept uses the word =E2=80=9Cget=E2=80=9D (e.g. an HTTP GET). =
Prefer starting the
name with the noun directly, for example use <code class=3D"language-plaint=
ext highlighter-rouge">Counts</code> over <code class=3D"language-plaintext=
 highlighter-rouge">GetCounts</code>.</p>

<p>If the function involves performing a complex computation or executing a=
 remote
call, a different word like <code class=3D"language-plaintext highlighter-r=
ouge">Compute</code> or <code class=3D"language-plaintext highlighter-rouge=
">Fetch</code> can be used in place of <code class=3D"language-plaintext hi=
ghlighter-rouge">Get</code>,
to make it clear to a reader that the function call may take time and could
block or fail.</p>

<!--#include file=3D"/go/g3doc/style/includes/special-name-exception.md"-->

<p><a id=3D"variable-names"></a></p>

<h3 id=3D"variable-names">Variable names<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#variable-names" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-VariableNames"></a></p>

<p>The general rule of thumb is that the length of a name should be proport=
ional to
the size of its scope and inversely proportional to the number of times tha=
t it
is used within that scope. A variable created at file scope may require mul=
tiple
words, whereas a variable scoped to a single inner block may be a single wo=
rd or
even just a character or two, to keep the code clear and avoid extraneous
information.</p>

<p>Here is a rough baseline. These numeric guidelines are not strict rules.=
 Apply
judgement based on context, <a href=3D"https://google.github.io/styleguide/=
go/guide#clarity">clarity</a>, and <a href=3D"https://google.github.io/styl=
eguide/go/guide#concision">concision</a>.</p>

<ul>
  <li>A small scope is one in which one or two small operations are perform=
ed, say
1-7 lines.</li>
  <li>A medium scope is a few small or one large operation, say 8-15 lines.=
</li>
  <li>A large scope is one or a few large operations, say 15-25 lines.</li>
  <li>A very large scope is anything that spans more than a page (say, more=
 than
25 lines).</li>
</ul>

<p>A name that might be perfectly clear (e.g., <code class=3D"language-plai=
ntext highlighter-rouge">c</code> for a counter) within a small
scope could be insufficient in a larger scope and would require clarificati=
on to
remind the reader of its purpose further along in the code. A scope in whic=
h
there are many variables, or variables that represent similar values or
concepts, may necessitate longer variable names than the scope suggests.</p=
>

<p>The specificity of the concept can also help to keep a variable=E2=80=99=
s name concise.
For example, assuming there is only a single database in use, a short varia=
ble
name like <code class=3D"language-plaintext highlighter-rouge">db</code> th=
at might normally be reserved for very small scopes may remain
perfectly clear even if the scope is very large. In this case, a single wor=
d
<code class=3D"language-plaintext highlighter-rouge">database</code> is lik=
ely acceptable based on the size of the scope, but is not
required as <code class=3D"language-plaintext highlighter-rouge">db</code> =
is a very common shortening for the word with few alternate
interpretations.</p>

<p>The name of a local variable should reflect what it contains and how it =
is being
used in the current context, rather than where the value originated. For
example, it is often the case that the best local variable name is not the =
same
as the struct or protocol buffer field name.</p>

<p>In general:</p>

<ul>
  <li>Single-word names like <code class=3D"language-plaintext highlighter-=
rouge">count</code> or <code class=3D"language-plaintext highlighter-rouge"=
>options</code> are a good starting point.</li>
  <li>Additional words can be added to disambiguate similar names, for exam=
ple
<code class=3D"language-plaintext highlighter-rouge">userCount</code> and <=
code class=3D"language-plaintext highlighter-rouge">projectCount</code>.</l=
i>
  <li>Do not simply drop letters to save typing. For example <code class=3D=
"language-plaintext highlighter-rouge">Sandbox</code> is
preferred over <code class=3D"language-plaintext highlighter-rouge">Sbx</co=
de>, particularly for exported names.</li>
  <li>Omit <a href=3D"https://google.github.io/styleguide/go/decisions.html=
#repetitive-with-type">types and type-like words</a> from most variable nam=
es.
    <ul>
      <li>For a number, <code class=3D"language-plaintext highlighter-rouge=
">userCount</code> is a better name than <code class=3D"language-plaintext =
highlighter-rouge">numUsers</code> or
<code class=3D"language-plaintext highlighter-rouge">usersInt</code>.</li>
      <li>For a slice, <code class=3D"language-plaintext highlighter-rouge"=
>users</code> is a better name than <code class=3D"language-plaintext highl=
ighter-rouge">userSlice</code>.</li>
      <li>It is acceptable to include a type-like qualifier if there are tw=
o
versions of a value in scope, for example you might have an input stored
in <code class=3D"language-plaintext highlighter-rouge">ageString</code> an=
d use <code class=3D"language-plaintext highlighter-rouge">age</code> for t=
he parsed value.</li>
    </ul>
  </li>
  <li>Omit words that are clear from the <a href=3D"https://google.github.i=
o/styleguide/go/decisions.html#repetitive-in-context">surrounding context</=
a>. For example, in
the implementation of a <code class=3D"language-plaintext highlighter-rouge=
">UserCount</code> method, a local variable called
<code class=3D"language-plaintext highlighter-rouge">userCount</code> is pr=
obably redundant; <code class=3D"language-plaintext highlighter-rouge">coun=
t</code>, <code class=3D"language-plaintext highlighter-rouge">users</code>=
, or even <code class=3D"language-plaintext highlighter-rouge">c</code> are=
 just as
readable.</li>
</ul>

<p><a id=3D"v"></a></p>

<h4 id=3D"single-letter-variable-names">Single-letter variable names<a clas=
s=3D"anchorjs-link " href=3D"https://google.github.io/styleguide/go/decisio=
ns.html#single-letter-variable-names" aria-label=3D"Anchor" data-anchorjs-i=
con=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.37=
5em;"></a></h4>

<p>Single-letter variable names can be a useful tool to minimize
<a href=3D"https://google.github.io/styleguide/go/decisions.html#repetition=
">repetition</a>, but can also make code needlessly opaque. Limit their
use to instances where the full word is obvious and where it would be repet=
itive
for it to appear in place of the single-letter variable.</p>

<p>In general:</p>

<ul>
  <li>For a <a href=3D"https://google.github.io/styleguide/go/decisions.htm=
l#receiver-names">method receiver variable</a>, a one-letter or two-letter =
name is
preferred.</li>
  <li>Using familiar variable names for common types is often helpful:
    <ul>
      <li><code class=3D"language-plaintext highlighter-rouge">r</code> for=
 an <code class=3D"language-plaintext highlighter-rouge">io.Reader</code> o=
r <code class=3D"language-plaintext highlighter-rouge">*http.Request</code>=
</li>
      <li><code class=3D"language-plaintext highlighter-rouge">w</code> for=
 an <code class=3D"language-plaintext highlighter-rouge">io.Writer</code> o=
r <code class=3D"language-plaintext highlighter-rouge">http.ResponseWriter<=
/code></li>
    </ul>
  </li>
  <li>Single-letter identifiers are acceptable as integer loop variables,
particularly for indices (e.g., <code class=3D"language-plaintext highlight=
er-rouge">i</code>) and coordinates (e.g., <code class=3D"language-plaintex=
t highlighter-rouge">x</code> and <code class=3D"language-plaintext highlig=
hter-rouge">y</code>).</li>
  <li>Abbreviations can be acceptable loop identifiers when the scope is sh=
ort,
for example <code class=3D"language-plaintext highlighter-rouge">for _, n :=
=3D range nodes { ... }</code>.</li>
</ul>

<p><a id=3D"repetition"></a></p>

<h3 id=3D"repetition">Repetition<a class=3D"anchorjs-link " href=3D"https:/=
/google.github.io/styleguide/go/decisions.html#repetition" aria-label=3D"An=
chor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icon=
s; padding-left: 0.375em;"></a></h3>

<!--
Note to future editors:

Do not use the term "stutter" to refer to cases when a name is repetitive.
-->

<p>A piece of Go source code should avoid unnecessary repetition. One commo=
n source
of this is repetitive names, which often include unnecessary words or repea=
t
their context or type. Code itself can also be unnecessarily repetitive if =
the
same or a similar code segment appears multiple times in close proximity.</=
p>

<p>Repetitive naming can come in many forms, including:</p>

<p><a id=3D"repetitive-with-package"></a></p>

<h4 id=3D"package-vs-exported-symbol-name">Package vs. exported symbol name=
<a class=3D"anchorjs-link " href=3D"https://google.github.io/styleguide/go/=
decisions.html#package-vs-exported-symbol-name" aria-label=3D"Anchor" data-=
anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-=
left: 0.375em;"></a></h4>

<p>When naming exported symbols, the name of the package is always visible =
outside
your package, so redundant information between the two should be reduced or
eliminated. If a package exports only one type and it is named after the pa=
ckage
itself, the canonical name for the constructor is <code class=3D"language-p=
laintext highlighter-rouge">New</code> if one is required.</p>

<blockquote>
  <p><strong>Examples:</strong> Repetitive Name -&gt; Better Name</p>

  <ul>
    <li><code class=3D"language-plaintext highlighter-rouge">widget.NewWidg=
et</code> -&gt; <code class=3D"language-plaintext highlighter-rouge">widget=
.New</code></li>
    <li><code class=3D"language-plaintext highlighter-rouge">widget.NewWidg=
etWithName</code> -&gt; <code class=3D"language-plaintext highlighter-rouge=
">widget.NewWithName</code></li>
    <li><code class=3D"language-plaintext highlighter-rouge">db.LoadFromDat=
abase</code> -&gt; <code class=3D"language-plaintext highlighter-rouge">db.=
Load</code></li>
    <li><code class=3D"language-plaintext highlighter-rouge">goatteleportut=
il.CountGoatsTeleported</code> -&gt; <code class=3D"language-plaintext high=
lighter-rouge">gtutil.CountGoatsTeleported</code>
or <code class=3D"language-plaintext highlighter-rouge">goatteleport.Count<=
/code></li>
    <li><code class=3D"language-plaintext highlighter-rouge">myteampb.MyTea=
mMethodRequest</code> -&gt; <code class=3D"language-plaintext highlighter-r=
ouge">mtpb.MyTeamMethodRequest</code> or
<code class=3D"language-plaintext highlighter-rouge">myteampb.MethodRequest=
</code></li>
  </ul>
</blockquote>

<p><a id=3D"repetitive-with-type"></a></p>

<h4 id=3D"variable-name-vs-type">Variable name vs. type<a class=3D"anchorjs=
-link " href=3D"https://google.github.io/styleguide/go/decisions.html#varia=
ble-name-vs-type" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" st=
yle=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>The compiler always knows the type of a variable, and in most cases it i=
s also
clear to the reader what type a variable is by how it is used. It is only
necessary to clarify the type of a variable if its value appears twice in t=
he
same scope.</p>

<table>
  <thead>
    <tr>
      <th>Repetitive Name</th>
      <th>Better Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">var numUsers=
 int</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">var users in=
t</code></td>
    </tr>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">var nameStri=
ng string</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">var name str=
ing</code></td>
    </tr>
    <tr>
      <td><code class=3D"language-plaintext highlighter-rouge">var primaryP=
roject *Project</code></td>
      <td><code class=3D"language-plaintext highlighter-rouge">var primary =
*Project</code></td>
    </tr>
  </tbody>
</table>

<p>If the value appears in multiple forms, this can be clarified either wit=
h an
extra word like <code class=3D"language-plaintext highlighter-rouge">raw</c=
ode> and <code class=3D"language-plaintext highlighter-rouge">parsed</code>=
 or with the underlying representation:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">limitStr</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">r</span><span class=3D"o">.</span><span class=3D"n">FormValue</span>=
<span class=3D"p">(</span><span class=3D"s">"limit"</span><span class=3D"p"=
>)</span>
<span class=3D"n">limit</span><span class=3D"p">,</span> <span class=3D"n">=
err</span> <span class=3D"o">:=3D</span> <span class=3D"n">strconv</span><s=
pan class=3D"o">.</span><span class=3D"n">Atoi</span><span class=3D"p">(</s=
pan><span class=3D"n">limitStr</span><span class=3D"p">)</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">limitRaw</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">r</span><span class=3D"o">.</span><span class=3D"n">FormValue</span>=
<span class=3D"p">(</span><span class=3D"s">"limit"</span><span class=3D"p"=
>)</span>
<span class=3D"n">limit</span><span class=3D"p">,</span> <span class=3D"n">=
err</span> <span class=3D"o">:=3D</span> <span class=3D"n">strconv</span><s=
pan class=3D"o">.</span><span class=3D"n">Atoi</span><span class=3D"p">(</s=
pan><span class=3D"n">limitRaw</span><span class=3D"p">)</span>
</code></pre></div></div>

<p><a id=3D"repetitive-in-context"></a></p>

<h4 id=3D"external-context-vs-local-names">External context vs. local names=
<a class=3D"anchorjs-link " href=3D"https://google.github.io/styleguide/go/=
decisions.html#external-context-vs-local-names" aria-label=3D"Anchor" data-=
anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-=
left: 0.375em;"></a></h4>

<p>Names that include information from their surrounding context often crea=
te extra
noise without benefit. The package name, method name, type name, function n=
ame,
import path, and even filename can all provide context that automatically
qualifies all names within.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// In package "ads/targeting/revenue/reporting"</span>
<span class=3D"k">type</span> <span class=3D"n">AdsTargetingRevenueReport</=
span> <span class=3D"k">struct</span><span class=3D"p">{}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">p=
</span> <span class=3D"o">*</span><span class=3D"n">Project</span><span cla=
ss=3D"p">)</span> <span class=3D"n">ProjectName</span><span class=3D"p">()<=
/span> <span class=3D"kt">string</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// In package "ads/targeting/revenue/reporting"</span>
<span class=3D"k">type</span> <span class=3D"n">Report</span> <span class=
=3D"k">struct</span><span class=3D"p">{}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">p=
</span> <span class=3D"o">*</span><span class=3D"n">Project</span><span cla=
ss=3D"p">)</span> <span class=3D"n">Name</span><span class=3D"p">()</span> =
<span class=3D"kt">string</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// In package "sqldb"</span>
<span class=3D"k">type</span> <span class=3D"n">DBConnection</span> <span c=
lass=3D"k">struct</span><span class=3D"p">{}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// In package "sqldb"</span>
<span class=3D"k">type</span> <span class=3D"n">Connection</span> <span cla=
ss=3D"k">struct</span><span class=3D"p">{}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// In package "ads/targeting"</span>
<span class=3D"k">func</span> <span class=3D"n">Process</span><span class=
=3D"p">(</span><span class=3D"n">in</span> <span class=3D"o">*</span><span =
class=3D"n">pb</span><span class=3D"o">.</span><span class=3D"n">FooProto</=
span><span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"n"=
>Report</span> <span class=3D"p">{</span>
    <span class=3D"n">adsTargetingID</span> <span class=3D"o">:=3D</span> <=
span class=3D"n">in</span><span class=3D"o">.</span><span class=3D"n">GetAd=
sTargetingID</span><span class=3D"p">()</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// In package "ads/targeting"</span>
<span class=3D"k">func</span> <span class=3D"n">Process</span><span class=
=3D"p">(</span><span class=3D"n">in</span> <span class=3D"o">*</span><span =
class=3D"n">pb</span><span class=3D"o">.</span><span class=3D"n">FooProto</=
span><span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"n"=
>Report</span> <span class=3D"p">{</span>
    <span class=3D"n">id</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">in</span><span class=3D"o">.</span><span class=3D"n">GetAdsTargeting=
ID</span><span class=3D"p">()</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Repetition should generally be evaluated in the context of the user of t=
he
symbol, rather than in isolation. For example, the following code has lots =
of
names that may be fine in some circumstances, but redundant in context:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">d=
b</span> <span class=3D"o">*</span><span class=3D"n">DB</span><span class=
=3D"p">)</span> <span class=3D"n">UserCount</span><span class=3D"p">()</spa=
n> <span class=3D"p">(</span><span class=3D"n">userCount</span> <span class=
=3D"kt">int</span><span class=3D"p">,</span> <span class=3D"n">err</span> <=
span class=3D"kt">error</span><span class=3D"p">)</span> <span class=3D"p">=
{</span>
    <span class=3D"k">var</span> <span class=3D"n">userCountInt64</span> <s=
pan class=3D"kt">int64</span>
    <span class=3D"k">if</span> <span class=3D"n">dbLoadError</span> <span =
class=3D"o">:=3D</span> <span class=3D"n">db</span><span class=3D"o">.</spa=
n><span class=3D"n">LoadFromDatabase</span><span class=3D"p">(</span><span =
class=3D"s">"count(distinct users)"</span><span class=3D"p">,</span> <span =
class=3D"o">&amp;</span><span class=3D"n">userCountInt64</span><span class=
=3D"p">);</span> <span class=3D"n">dbLoadError</span> <span class=3D"o">!=
=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"m">0</span><span cla=
ss=3D"p">,</span> <span class=3D"n">fmt</span><span class=3D"o">.</span><sp=
an class=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"fa=
iled to load user count: %s"</span><span class=3D"p">,</span> <span class=
=3D"n">dbLoadError</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"n">userCount</span> <span class=3D"o">=3D</span> <span c=
lass=3D"kt">int</span><span class=3D"p">(</span><span class=3D"n">userCount=
Int64</span><span class=3D"p">)</span>
    <span class=3D"k">return</span> <span class=3D"n">userCount</span><span=
 class=3D"p">,</span> <span class=3D"no">nil</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Instead, information about names that are clear from context or usage ca=
n often
be omitted:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">d=
b</span> <span class=3D"o">*</span><span class=3D"n">DB</span><span class=
=3D"p">)</span> <span class=3D"n">UserCount</span><span class=3D"p">()</spa=
n> <span class=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p"=
>,</span> <span class=3D"kt">error</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span>
    <span class=3D"k">var</span> <span class=3D"n">count</span> <span class=
=3D"kt">int64</span>
    <span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D=
"o">:=3D</span> <span class=3D"n">db</span><span class=3D"o">.</span><span =
class=3D"n">Load</span><span class=3D"p">(</span><span class=3D"s">"count(d=
istinct users)"</span><span class=3D"p">,</span> <span class=3D"o">&amp;</s=
pan><span class=3D"n">count</span><span class=3D"p">);</span> <span class=
=3D"n">err</span> <span class=3D"o">!=3D</span> <span class=3D"no">nil</spa=
n> <span class=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"m">0</span><span cla=
ss=3D"p">,</span> <span class=3D"n">fmt</span><span class=3D"o">.</span><sp=
an class=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"fa=
iled to load user count: %s"</span><span class=3D"p">,</span> <span class=
=3D"n">err</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"kt">int</span><span clas=
s=3D"p">(</span><span class=3D"n">count</span><span class=3D"p">),</span> <=
span class=3D"no">nil</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"commentary"></a></p>

<h2 id=3D"commentary">Commentary<a class=3D"anchorjs-link " href=3D"https:/=
/google.github.io/styleguide/go/decisions.html#commentary" aria-label=3D"An=
chor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icon=
s; padding-left: 0.375em;"></a></h2>

<p>The conventions around commentary (which include what to comment, what s=
tyle to
use, how to provide runnable examples, etc.) are intended to support the
experience of reading the documentation of a public API. See
<a href=3D"http://golang.org/doc/effective_go.html#commentary">Effective Go=
</a> for more
information.</p>

<p>The best practices document=E2=80=99s section on <a href=3D"https://goog=
le.github.io/styleguide/go/best-practices#documentation-conventions">docume=
ntation conventions</a> discusses
this further.</p>

<p><strong>Best Practice:</strong> Use <a href=3D"https://google.github.io/=
styleguide/go/best-practices#documentation-preview">doc preview</a> during =
development and code review to see
whether the documentation and runnable examples are useful and are presente=
d the
way you expect them to be.</p>

<p><strong>Tip:</strong> Godoc uses very little special formatting; lists a=
nd code snippets
should usually be indented to avoid linewrapping. Apart from indentation,
decoration should generally be avoided.</p>

<p><a id=3D"comment-line-length"></a></p>

<h3 id=3D"comment-line-length">Comment line length<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#comment-li=
ne-length" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Ensure that commentary is readable from source even on narrow screens.</=
p>

<p>When a comment gets too long, it is recommended to wrap it into multiple
single-line comments. When possible, aim for comments that will read well o=
n an
80-column wide terminal, however this is not a hard cut-off; there is no fi=
xed
line length limit for comments in Go. The standard library, for example, of=
ten
chooses to break a comment based on punctuation, which sometimes leaves the
individual lines closer to the 60-70 character mark.</p>

<p>There is plenty of existing code in which comments exceed 80 characters =
in
length. This guidance should not be used as a justification to change such =
code
as part of a readability review (see <a href=3D"https://google.github.io/st=
yleguide/go/guide#consistency">consistency</a>), though
teams are encouraged to opportunistically update comments to follow this
guideline as a part of other refactors. The primary goal of this guideline =
is to
ensure that all Go readability mentors make the same recommendation when an=
d if
recommendations are made.</p>

<p>See this <a href=3D"https://blog.golang.org/godoc-documenting-go-code">p=
ost from The Go Blog on documentation</a> for more on commentary.</p>

<div class=3D"language-text highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code># Good:
// This is a comment paragraph.
// The length of individual lines doesn't matter in Godoc;
// but the choice of wrapping makes it easy to read on narrow screens.
//
// Don't worry too much about the long URL:
// https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Cho=
rdata/Mammalia/Rodentia/Geomyoidea/Geomyidae/
//
// Similarly, if you have other information that is made awkward
// by too many line breaks, use your judgment and include a long line
// if it helps rather than hinders.
</code></pre></div></div>

<p>Avoid comments that will wrap repeatedly on small screens, which is a po=
or
reader experience.</p>

<div class=3D"language-text highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code># Bad:
// This is a comment paragraph. The length of individual lines doesn't matt=
er in
Godoc;
// but the choice of wrapping causes jagged lines on narrow screens or in c=
ode
review,
// which can be annoying, especially when in a comment block that will wrap
repeatedly.
//
// Don't worry too much about the long URL:
// https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Cho=
rdata/Mammalia/Rodentia/Geomyoidea/Geomyidae/
</code></pre></div></div>

<p><a id=3D"doc-comments"></a></p>

<h3 id=3D"doc-comments">Doc comments<a class=3D"anchorjs-link " href=3D"htt=
ps://google.github.io/styleguide/go/decisions.html#doc-comments" aria-label=
=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorj=
s-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-DocComments"></a></p>

<p>All top-level exported names must have doc comments, as should unexporte=
d type
or function declarations with unobvious behavior or meaning. These comments
should be <a href=3D"https://google.github.io/styleguide/go/decisions.html#=
comment-sentences">full sentences</a> that begin with the name of the objec=
t being
described. An article (=E2=80=9Ca=E2=80=9D, =E2=80=9Can=E2=80=9D, =E2=80=9C=
the=E2=80=9D) can precede the name to make it read
more naturally.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// A Request represents a request to run a command.</span=
>
<span class=3D"k">type</span> <span class=3D"n">Request</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span> <span class=3D"o">...</span=
>

<span class=3D"c">// Encode writes the JSON encoding of req to w.</span>
<span class=3D"k">func</span> <span class=3D"n">Encode</span><span class=3D=
"p">(</span><span class=3D"n">w</span> <span class=3D"n">io</span><span cla=
ss=3D"o">.</span><span class=3D"n">Writer</span><span class=3D"p">,</span> =
<span class=3D"n">req</span> <span class=3D"o">*</span><span class=3D"n">Re=
quest</span><span class=3D"p">)</span> <span class=3D"p">{</span> <span cla=
ss=3D"o">...</span>
</code></pre></div></div>

<p>Doc comments appear in <a href=3D"https://pkg.go.dev/">Godoc</a> and are=
 surfaced by IDEs,
and therefore should be written for anyone using the package.</p>

<p>A documentation comment applies to the following symbol, or the group of=
 fields
if it appears in a struct.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// Options configure the group management service.</span>
<span class=3D"k">type</span> <span class=3D"n">Options</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"c">// General setup:</span>
    <span class=3D"n">Name</span>  <span class=3D"kt">string</span>
    <span class=3D"n">Group</span> <span class=3D"o">*</span><span class=3D=
"n">FooGroup</span>

    <span class=3D"c">// Dependencies:</span>
    <span class=3D"n">DB</span> <span class=3D"o">*</span><span class=3D"n"=
>sql</span><span class=3D"o">.</span><span class=3D"n">DB</span>

    <span class=3D"c">// Customization:</span>
    <span class=3D"n">LargeGroupThreshold</span> <span class=3D"kt">int</sp=
an> <span class=3D"c">// optional; default: 10</span>
    <span class=3D"n">MinimumMembers</span>      <span class=3D"kt">int</sp=
an> <span class=3D"c">// optional; default: 2</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Best Practice:</strong> If you have doc comments for unexported =
code, follow the same
custom as if it were exported (namely, starting the comment with the unexpo=
rted
name). This makes it easy to export it later by simply replacing the unexpo=
rted
name with the newly-exported one across both comments and code.</p>

<p><a id=3D"comment-sentences"></a></p>

<h3 id=3D"comment-sentences">Comment sentences<a class=3D"anchorjs-link " h=
ref=3D"https://google.github.io/styleguide/go/decisions.html#comment-senten=
ces" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: =
1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-CommentSentences"></a></p>

<p>Comments that are complete sentences should be capitalized and punctuate=
d like
standard English sentences. (As an exception, it is okay to begin a sentenc=
e
with an uncapitalized identifier name if it is otherwise clear. Such cases =
are
probably best done only at the beginning of a paragraph.)</p>

<p>Comments that are sentence fragments have no such requirements for punct=
uation
or capitalization.</p>

<p><a href=3D"https://google.github.io/styleguide/go/decisions.html#doc-com=
ments">Documentation comments</a> should always be complete sentences, and =
as such should
always be capitalized and punctuated. Simple end-of-line comments (especial=
ly
for struct fields) can be simple phrases that assume the field name is the
subject.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// A Server handles serving quotes from the collected wor=
ks of Shakespeare.</span>
<span class=3D"k">type</span> <span class=3D"n">Server</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"c">// BaseDir points to the base directory under which S=
hakespeare's works are stored.</span>
    <span class=3D"c">//</span>
    <span class=3D"c">// The directory structure is expected to be the foll=
owing:</span>
    <span class=3D"c">//   {BaseDir}/manifest.json</span>
    <span class=3D"c">//   {BaseDir}/{name}/{name}-part{number}.txt</span>
    <span class=3D"n">BaseDir</span> <span class=3D"kt">string</span>

    <span class=3D"n">WelcomeMessage</span>  <span class=3D"kt">string</spa=
n> <span class=3D"c">// displayed when user logs in</span>
    <span class=3D"n">ProtocolVersion</span> <span class=3D"kt">string</spa=
n> <span class=3D"c">// checked against incoming requests</span>
    <span class=3D"n">PageLength</span>      <span class=3D"kt">int</span> =
   <span class=3D"c">// lines per page when printing (optional; default: 20=
)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"examples"></a></p>

<h3 id=3D"examples">Examples<a class=3D"anchorjs-link " href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#examples" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Examples"></a></p>

<p>Packages should clearly document their intended usage. Try to provide a
<a href=3D"http://blog.golang.org/examples">runnable example</a>; examples =
show up in Godoc. Runnable examples belong in the
test file, not the production source file. See this example (<a href=3D"htt=
ps://pkg.go.dev/time#example-Duration">Godoc</a>, <a href=3D"https://cs.ope=
nsource.google/go/go/+/HEAD:src/time/example_test.go">source</a>).</p>

<p>If it isn=E2=80=99t feasible to provide a runnable example, example code=
 can be provided
within code comments. As with other code and command-line snippets in comme=
nts,
it should follow standard formatting conventions.</p>

<p><a id=3D"named-result-parameters"></a></p>

<h3 id=3D"named-result-parameters">Named result parameters<a class=3D"ancho=
rjs-link " href=3D"https://google.github.io/styleguide/go/decisions.html#na=
med-result-parameters" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=
=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h=
3>

<p><a id=3D"TOC-NamedResultParameters"></a></p>

<p>When naming parameters, consider how function signatures appear in Godoc=
. The
name of the function itself and the type of the result parameters are often
sufficiently clear.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">n=
</span> <span class=3D"o">*</span><span class=3D"n">Node</span><span class=
=3D"p">)</span> <span class=3D"n">Parent1</span><span class=3D"p">()</span>=
 <span class=3D"o">*</span><span class=3D"n">Node</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">n=
</span> <span class=3D"o">*</span><span class=3D"n">Node</span><span class=
=3D"p">)</span> <span class=3D"n">Parent2</span><span class=3D"p">()</span>=
 <span class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n">Node=
</span><span class=3D"p">,</span> <span class=3D"kt">error</span><span clas=
s=3D"p">)</span>
</code></pre></div></div>

<p>If a function returns two or more parameters of the same type, adding na=
mes can
be useful.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">n=
</span> <span class=3D"o">*</span><span class=3D"n">Node</span><span class=
=3D"p">)</span> <span class=3D"n">Children</span><span class=3D"p">()</span=
> <span class=3D"p">(</span><span class=3D"n">left</span><span class=3D"p">=
,</span> <span class=3D"n">right</span> <span class=3D"o">*</span><span cla=
ss=3D"n">Node</span><span class=3D"p">,</span> <span class=3D"n">err</span>=
 <span class=3D"kt">error</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>If the caller must take action on particular result parameters, naming t=
hem can
help suggest what the action is:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// WithTimeout returns a context that will be canceled no=
 later than d duration</span>
<span class=3D"c">// from now.</span>
<span class=3D"c">//</span>
<span class=3D"c">// The caller must arrange for the returned cancel functi=
on to be called when</span>
<span class=3D"c">// the context is no longer needed to prevent a resource =
leak.</span>
<span class=3D"k">func</span> <span class=3D"n">WithTimeout</span><span cla=
ss=3D"p">(</span><span class=3D"n">parent</span> <span class=3D"n">Context<=
/span><span class=3D"p">,</span> <span class=3D"n">d</span> <span class=3D"=
n">time</span><span class=3D"o">.</span><span class=3D"n">Duration</span><s=
pan class=3D"p">)</span> <span class=3D"p">(</span><span class=3D"n">ctx</s=
pan> <span class=3D"n">Context</span><span class=3D"p">,</span> <span class=
=3D"n">cancel</span> <span class=3D"k">func</span><span class=3D"p">())</sp=
an>
</code></pre></div></div>

<p>In the code above, cancellation is a particular action a caller must tak=
e.
However, were the result parameters written as <code class=3D"language-plai=
ntext highlighter-rouge">(Context, func())</code> alone, it
would be unclear what is meant by =E2=80=9Ccancel function=E2=80=9D.</p>

<p>Don=E2=80=99t use named result parameters when the names produce
<a href=3D"https://google.github.io/styleguide/go/decisions.html#repetitive=
-with-type">unnecessary repetition</a>.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">n=
</span> <span class=3D"o">*</span><span class=3D"n">Node</span><span class=
=3D"p">)</span> <span class=3D"n">Parent1</span><span class=3D"p">()</span>=
 <span class=3D"p">(</span><span class=3D"n">node</span> <span class=3D"o">=
*</span><span class=3D"n">Node</span><span class=3D"p">)</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">n=
</span> <span class=3D"o">*</span><span class=3D"n">Node</span><span class=
=3D"p">)</span> <span class=3D"n">Parent2</span><span class=3D"p">()</span>=
 <span class=3D"p">(</span><span class=3D"n">node</span> <span class=3D"o">=
*</span><span class=3D"n">Node</span><span class=3D"p">,</span> <span class=
=3D"n">err</span> <span class=3D"kt">error</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>Don=E2=80=99t name result parameters in order to avoid declaring a varia=
ble inside the
function. This practice results in unnecessary API verbosity at the cost of
minor implementation brevity.</p>

<p><a href=3D"https://tour.golang.org/basics/7">Naked returns</a> are accep=
table only in a small function. Once it=E2=80=99s a
medium-sized function, be explicit with your returned values. Similarly, do=
 not
name result parameters just because it enables you to use naked returns.
<a href=3D"https://google.github.io/styleguide/go/guide#clarity">Clarity</a=
> is always more important than saving a few lines in
your function.</p>

<p>It is always acceptable to name a result parameter if its value must be =
changed
in a deferred closure.</p>

<blockquote>
  <p><strong>Tip:</strong> Types can often be clearer than names in functio=
n signatures.
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
38: Functions as Named Types</a> demonstrates this.</p>

  <p>In, <a href=3D"https://pkg.go.dev/context#WithTimeout"><code class=3D"=
language-plaintext highlighter-rouge">WithTimeout</code></a> above, the rea=
l code uses a <a href=3D"https://pkg.go.dev/context#CancelFunc"><code class=
=3D"language-plaintext highlighter-rouge">CancelFunc</code></a> instead of =
a
raw <code class=3D"language-plaintext highlighter-rouge">func()</code> in t=
he result parameter list and requires little effort to
document.</p>
</blockquote>

<p><a id=3D"package-comments"></a></p>

<h3 id=3D"package-comments">Package comments<a class=3D"anchorjs-link " hre=
f=3D"https://google.github.io/styleguide/go/decisions.html#package-comments=
" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em=
 / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-PackageComments"></a></p>

<p>Package comments must appear immediately above the package clause with n=
o blank
line between the comment and the package name. Example:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// Package math provides basic constants and mathematical=
 functions.</span>
<span class=3D"c">//</span>
<span class=3D"c">// This package does not guarantee bit-identical results =
across architectures.</span>
<span class=3D"k">package</span> <span class=3D"n">math</span>
</code></pre></div></div>

<p>There must be a single package comment per package. If a package is comp=
osed of
multiple files, exactly one of the files should have a package comment.</p>

<p>Comments for <code class=3D"language-plaintext highlighter-rouge">main</=
code> packages have a slightly different form, where the name of
the <code class=3D"language-plaintext highlighter-rouge">go_binary</code> r=
ule in the BUILD file takes the place of the package name.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// The seed_generator command is a utility that generates=
 a Finch seed file</span>
<span class=3D"c">// from a set of JSON study configs.</span>
<span class=3D"k">package</span> <span class=3D"n">main</span>
</code></pre></div></div>

<p>Other styles of comment are fine as long as the name of the binary is ex=
actly as
written in the BUILD file. When the binary name is the first word, capitali=
zing
it is required even though it does not strictly match the spelling of the
command-line invocation.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// Binary seed_generator ...</span>
<span class=3D"c">// Command seed_generator ...</span>
<span class=3D"c">// Program seed_generator ...</span>
<span class=3D"c">// The seed_generator command ...</span>
<span class=3D"c">// The seed_generator program ...</span>
<span class=3D"c">// Seed_generator ...</span>
</code></pre></div></div>

<p>Tips:</p>

<ul>
  <li>
    <p>Example command-line invocations and API usage can be useful documen=
tation.
For Godoc formatting, indent the comment lines containing code.</p>
  </li>
  <li>
    <p>If there is no obvious primary file or if the package comment is
extraordinarily long, it is acceptable to put the doc comment in a file
named <code class=3D"language-plaintext highlighter-rouge">doc.go</code> wi=
th only the comment and the package clause.</p>
  </li>
  <li>
    <p>Multiline comments can be used instead of multiple single-line comme=
nts.
This is primarily useful if the documentation contains sections which may b=
e
useful to copy and paste from the source file, as with sample command-lines
(for binaries) and template examples.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">/*
The seed_generator command is a utility that generates a Finch seed file
from a set of JSON study configs.

    seed_generator *.json | base64 &gt; finch-seed.base64
*/</span>
<span class=3D"k">package</span> <span class=3D"n">template</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Comments intended for maintainers and that apply to the whole file a=
re
typically placed after import declarations. These are not surfaced in Godoc
and are not subject to the rules above on package comments.</p>
  </li>
</ul>

<p><a id=3D"imports"></a></p>

<h2 id=3D"imports">Imports<a class=3D"anchorjs-link " href=3D"https://googl=
e.github.io/styleguide/go/decisions.html#imports" aria-label=3D"Anchor" dat=
a-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; paddin=
g-left: 0.375em;"></a></h2>

<p><a id=3D"TOC-Imports"></a></p>

<p><a id=3D"import-renaming"></a></p>

<h3 id=3D"import-renaming">Import renaming<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#import-renaming" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Imports should only be renamed to avoid a name collision with other impo=
rts. (A
corollary of this is that <a href=3D"https://google.github.io/styleguide/go=
/decisions.html#package-names">good package names</a> should not
require renaming.) In the event of a name collision, prefer to rename the m=
ost
local or project-specific import. Local names (aliases) for packages must f=
ollow
<a href=3D"https://google.github.io/styleguide/go/decisions.html#package-na=
mes">the guidance around package naming</a>, including the prohibition
on the use of underscores and capital letters.</p>

<p>Generated protocol buffer packages must be renamed to remove underscores=
 from
their names, and their aliases must have a <code class=3D"language-plaintex=
t highlighter-rouge">pb</code> suffix. See
<a href=3D"https://google.github.io/styleguide/go/best-practices#import-pro=
tos">proto and stub best practices</a> for more information.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"n">fspb</span> <span class=3D"s">"path/to/package/foo_se=
rvice_go_proto"</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>Imports that have package names with no useful identifying information (=
e.g.
<code class=3D"language-plaintext highlighter-rouge">package v1</code>) sho=
uld be renamed to include the previous path component. The
rename must be consistent with other local files importing the same package=
 and
may include the version number.</p>

<p><strong>Note:</strong> It is preferred to rename the package to conform =
with
<a href=3D"https://google.github.io/styleguide/go/decisions.html#package-na=
mes">good package names</a>, but that is often not feasible for
packages in vendored directories.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"n">core</span> <span class=3D"s">"github.com/kubernetes/=
api/core/v1"</span>
    <span class=3D"n">meta</span> <span class=3D"s">"github.com/kubernetes/=
apimachinery/pkg/apis/meta/v1beta1"</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>If you need to import a package whose name collides with a common local =
variable
name that you want to use (e.g. <code class=3D"language-plaintext highlight=
er-rouge">url</code>, <code class=3D"language-plaintext highlighter-rouge">=
ssh</code>) and you wish to rename the
package, the preferred way to do so is with the <code class=3D"language-pla=
intext highlighter-rouge">pkg</code> suffix (e.g. <code class=3D"language-p=
laintext highlighter-rouge">urlpkg</code>).
Note that it is possible to shadow a package with a local variable; this re=
name
is only necessary if the package still needs to be used when such a variabl=
e is
in scope.</p>

<p><a id=3D"import-grouping"></a></p>

<h3 id=3D"import-grouping">Import grouping<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#import-grouping" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Imports should be organized in two groups:</p>

<ul>
  <li>
    <p>Standard library packages</p>
  </li>
  <li>
    <p>Other (project and vendored) packages</p>
  </li>
</ul>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">main</span>

<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"s">"fmt"</span>
    <span class=3D"s">"hash/adler32"</span>
    <span class=3D"s">"os"</span>

    <span class=3D"s">"github.com/dsnet/compress/flate"</span>
    <span class=3D"s">"golang.org/x/text/encoding"</span>
    <span class=3D"s">"google.golang.org/protobuf/proto"</span>
    <span class=3D"n">foopb</span> <span class=3D"s">"myproj/foo/proto/prot=
o"</span>
    <span class=3D"n">_</span> <span class=3D"s">"myproj/rpc/protocols/dial=
"</span>
    <span class=3D"n">_</span> <span class=3D"s">"myproj/security/auth/auth=
hooks"</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>It is acceptable to split the project packages into multiple groups if y=
ou want
a separate group, as long as the groups have some meaning. Common reasons t=
o do
this:</p>

<ul>
  <li>renamed imports</li>
  <li>packages imported for their side-effects</li>
</ul>

<p>Example:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">main</span>

<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"s">"fmt"</span>
    <span class=3D"s">"hash/adler32"</span>
    <span class=3D"s">"os"</span>


    <span class=3D"s">"github.com/dsnet/compress/flate"</span>
    <span class=3D"s">"golang.org/x/text/encoding"</span>
    <span class=3D"s">"google.golang.org/protobuf/proto"</span>

    <span class=3D"n">foopb</span> <span class=3D"s">"myproj/foo/proto/prot=
o"</span>

    <span class=3D"n">_</span> <span class=3D"s">"myproj/rpc/protocols/dial=
"</span>
    <span class=3D"n">_</span> <span class=3D"s">"myproj/security/auth/auth=
hooks"</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p><strong>Note:</strong> Maintaining optional groups - splitting beyond wh=
at is necessary for
the mandatory separation between standard library and Google imports - is n=
ot
supported by the <a href=3D"https://google.github.io/styleguide/go/golang.o=
rg/x/tools/cmd/goimports">goimports</a> tool. Additional import subgroups r=
equire attention
on the part of both authors and reviewers to maintain in a conforming state=
.</p>

<p>Google programs that are also AppEngine apps should have a separate grou=
p for
AppEngine imports.</p>

<p>Gofmt takes care of sorting each group by import path. However, it does =
not
automatically separate imports into groups. The popular <a href=3D"https://=
google.github.io/styleguide/go/golang.org/x/tools/cmd/goimports">goimports<=
/a> tool
combines Gofmt and import management, separating imports into groups based =
on
the decision above. It is permissible to let <a href=3D"https://google.gith=
ub.io/styleguide/go/golang.org/x/tools/cmd/goimports">goimports</a> manage =
import
arrangement entirely, but as a file is revised its import list must remain
internally consistent.</p>

<p><a id=3D"import-blank"></a></p>

<h3 id=3D"import-blank-import-_">Import =E2=80=9Cblank=E2=80=9D (<code clas=
s=3D"language-plaintext highlighter-rouge">import _</code>)<a class=3D"anch=
orjs-link " href=3D"https://google.github.io/styleguide/go/decisions.html#i=
mport-blank-import-_" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B=
" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ImportBlank"></a></p>

<p>Packages that are imported only for their side effects (using the syntax=
 <code class=3D"language-plaintext highlighter-rouge">import
_ "package"</code>) may only be imported in a main package, or in tests tha=
t require
them.</p>

<p>Some examples of such packages include:</p>

<ul>
  <li>
    <p><a href=3D"https://pkg.go.dev/time/tzdata">time/tzdata</a></p>
  </li>
  <li>
    <p><a href=3D"https://pkg.go.dev/image/jpeg">image/jpeg</a> in image pr=
ocessing code</p>
  </li>
</ul>

<p>Avoid blank imports in library packages, even if the library indirectly =
depends
on them. Constraining side-effect imports to the main package helps control
dependencies, and makes it possible to write tests that rely on a different
import without conflict or wasted build costs.</p>

<p>The following are the only exceptions to this rule:</p>

<ul>
  <li>
    <p>You may use a blank import to bypass the check for disallowed import=
s in the
<a href=3D"https://github.com/bazelbuild/rules_go/blob/master/go/nogo.rst">=
nogo static checker</a>.</p>
  </li>
  <li>
    <p>You may use a blank import of the <a href=3D"https://pkg.go.dev/embe=
d">embed</a> package
in a source file which uses the <code class=3D"language-plaintext highlight=
er-rouge">//go:embed</code> compiler directive.</p>
  </li>
</ul>

<p><strong>Tip:</strong> If you create a library package that indirectly de=
pends on a
side-effect import in production, document the intended usage.</p>

<p><a id=3D"import-dot"></a></p>

<h3 id=3D"import-dot-import-">Import =E2=80=9Cdot=E2=80=9D (<code class=3D"=
language-plaintext highlighter-rouge">import .</code>)<a class=3D"anchorjs-=
link " href=3D"https://google.github.io/styleguide/go/decisions.html#import=
-dot-import-" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ImportDot"></a></p>

<p>The <code class=3D"language-plaintext highlighter-rouge">import .</code>=
 form is a language feature that allows bringing identifiers
exported from another package to the current package without qualification.=
 See
the <a href=3D"https://go.dev/ref/spec#Import_declarations">language spec</=
a> for more.</p>

<p>Do <strong>not</strong> use this feature in the Google codebase; it make=
s it harder to tell
where the functionality is coming from.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">package</span> <span class=3D"n">foo_test</span>

<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"s">"bar/testutil"</span> <span class=3D"c">// also impor=
ts "foo"</span>
    <span class=3D"o">.</span> <span class=3D"s">"foo"</span>
<span class=3D"p">)</span>

<span class=3D"k">var</span> <span class=3D"n">myThing</span> <span class=
=3D"o">=3D</span> <span class=3D"n">Bar</span><span class=3D"p">()</span> <=
span class=3D"c">// Bar defined in package foo; no qualification needed.</s=
pan>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">foo_test</span>

<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"s">"bar/testutil"</span> <span class=3D"c">// also impor=
ts "foo"</span>
    <span class=3D"s">"foo"</span>
<span class=3D"p">)</span>

<span class=3D"k">var</span> <span class=3D"n">myThing</span> <span class=
=3D"o">=3D</span> <span class=3D"n">foo</span><span class=3D"o">.</span><sp=
an class=3D"n">Bar</span><span class=3D"p">()</span>
</code></pre></div></div>

<p><a id=3D"errors"></a></p>

<h2 id=3D"errors">Errors<a class=3D"anchorjs-link " href=3D"https://google.=
github.io/styleguide/go/decisions.html#errors" aria-label=3D"Anchor" data-a=
nchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-l=
eft: 0.375em;"></a></h2>

<p><a id=3D"returning-errors"></a></p>

<h3 id=3D"returning-errors">Returning errors<a class=3D"anchorjs-link " hre=
f=3D"https://google.github.io/styleguide/go/decisions.html#returning-errors=
" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em=
 / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ReturningErrors"></a></p>

<p>Use <code class=3D"language-plaintext highlighter-rouge">error</code> to=
 signal that a function can fail. By convention, <code class=3D"language-pl=
aintext highlighter-rouge">error</code> is the
last result parameter.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">Good</span><span class=3D"p=
">()</span> <span class=3D"kt">error</span> <span class=3D"p">{</span> <spa=
n class=3D"c">/* ... */</span> <span class=3D"p">}</span>
</code></pre></div></div>

<p>Returning a <code class=3D"language-plaintext highlighter-rouge">nil</co=
de> error is the idiomatic way to signal a successful operation
that could otherwise fail. If a function returns an error, callers must tre=
at
all non-error return values as unspecified unless explicitly documented
otherwise. Commonly, the non-error return values are their zero values, but=
 this
cannot be assumed.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">GoodLookup</span><span clas=
s=3D"p">()</span> <span class=3D"p">(</span><span class=3D"o">*</span><span=
 class=3D"n">Result</span><span class=3D"p">,</span> <span class=3D"kt">err=
or</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"c">// ...</span>
    <span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D=
"o">!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"k">return</span> <span class=3D"no">nil</span><span =
class=3D"p">,</span> <span class=3D"n">err</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"n">res</span><span class=
=3D"p">,</span> <span class=3D"no">nil</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Exported functions that return errors should return them using the <code=
 class=3D"language-plaintext highlighter-rouge">error</code> type.
Concrete error types are susceptible to subtle bugs: a concrete <code class=
=3D"language-plaintext highlighter-rouge">nil</code> pointer
can get wrapped into an interface and thus become a non-nil value (see the
<a href=3D"https://golang.org/doc/faq#nil_error">Go FAQ entry on the topic<=
/a>).</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"n">Bad</span><span class=3D"p"=
>()</span> <span class=3D"o">*</span><span class=3D"n">os</span><span class=
=3D"o">.</span><span class=3D"n">PathError</span> <span class=3D"p">{</span=
> <span class=3D"c">/*...*/</span> <span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Tip</strong>: A function that takes a <code class=3D"language-pl=
aintext highlighter-rouge">context.Context</code> argument should usually
return an <code class=3D"language-plaintext highlighter-rouge">error</code>=
 so that the caller can determine if the context was cancelled
while the function was running.</p>

<p><a id=3D"error-strings"></a></p>

<h3 id=3D"error-strings">Error strings<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#error-strings" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ErrorStrings"></a></p>

<p>Error strings should not be capitalized (unless beginning with an export=
ed name,
a proper noun or an acronym) and should not end with punctuation. This is
because error strings usually appear within other context before being prin=
ted
to the user.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">fmt</span><span class=3D"o">.</span><span class=3D"n">Errorf</span><span =
class=3D"p">(</span><span class=3D"s">"Something bad happened."</span><span=
 class=3D"p">)</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">fmt</span><span class=3D"o">.</span><span class=3D"n">Errorf</span><span =
class=3D"p">(</span><span class=3D"s">"something bad happened"</span><span =
class=3D"p">)</span>
</code></pre></div></div>

<p>On the other hand, the style for the full displayed message (logging, te=
st
failure, API response, or other UI) depends, but should typically be
capitalized.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">log</span><span class=3D"o">.</span><span class=3D"n">Inf=
of</span><span class=3D"p">(</span><span class=3D"s">"Operation aborted: %v=
"</span><span class=3D"p">,</span> <span class=3D"n">err</span><span class=
=3D"p">)</span>
<span class=3D"n">log</span><span class=3D"o">.</span><span class=3D"n">Err=
orf</span><span class=3D"p">(</span><span class=3D"s">"Operation aborted: %=
v"</span><span class=3D"p">,</span> <span class=3D"n">err</span><span class=
=3D"p">)</span>
<span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Error=
f</span><span class=3D"p">(</span><span class=3D"s">"Op(%q) failed unexpect=
edly; err=3D%v"</span><span class=3D"p">,</span> <span class=3D"n">args</sp=
an><span class=3D"p">,</span> <span class=3D"n">err</span><span class=3D"p"=
>)</span>
</code></pre></div></div>

<p><a id=3D"handle-errors"></a></p>

<h3 id=3D"handle-errors">Handle errors<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#handle-errors" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-HandleErrors"></a></p>

<p>Code that encounters an error should make a deliberate choice about how =
to
handle it. It is not usually appropriate to discard errors using <code clas=
s=3D"language-plaintext highlighter-rouge">_</code> variables.
If a function returns an error, do one of the following:</p>

<ul>
  <li>Handle and address the error immediately.</li>
  <li>Return the error to the caller.</li>
  <li>In exceptional situations, call <a href=3D"https://pkg.go.dev/github.=
com/golang/glog#Fatal"><code class=3D"language-plaintext highlighter-rouge"=
>log.Fatal</code></a> or (if absolutely necessary)
<code class=3D"language-plaintext highlighter-rouge">panic</code>.</li>
</ul>

<p><strong>Note:</strong> <code class=3D"language-plaintext highlighter-rou=
ge">log.Fatalf</code> is not the standard library log. See [#logging].</p>

<p>In the rare circumstance where it is appropriate to ignore or discard an=
 error
(for example a call to <a href=3D"https://pkg.go.dev/bytes#Buffer.Write"><c=
ode class=3D"language-plaintext highlighter-rouge">(*bytes.Buffer).Write</c=
ode></a> that is documented to never
fail), an accompanying comment should explain why this is safe.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">var</span> <span class=3D"n">b</span> <span class=3D"o">*=
</span><span class=3D"n">bytes</span><span class=3D"o">.</span><span class=
=3D"n">Buffer</span>

<span class=3D"n">n</span><span class=3D"p">,</span> <span class=3D"n">_</s=
pan> <span class=3D"o">:=3D</span> <span class=3D"n">b</span><span class=3D=
"o">.</span><span class=3D"n">Write</span><span class=3D"p">(</span><span c=
lass=3D"n">p</span><span class=3D"p">)</span> <span class=3D"c">// never re=
turns a non-nil error</span>
</code></pre></div></div>

<p>For more discussion and examples of error handling, see
<a href=3D"http://golang.org/doc/effective_go.html#errors">Effective Go</a>=
 and
<a href=3D"https://google.github.io/styleguide/go/best-practices.html#error=
-handling">best practices</a>.</p>

<p><a id=3D"in-band-errors"></a></p>

<h3 id=3D"in-band-errors">In-band errors<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#in-band-errors" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-In-Band-Errors"></a></p>

<p>In C and similar languages, it is common for functions to return values =
like -1,
null, or the empty string to signal errors or missing results. This is know=
n as
in-band error handling.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// Lookup returns the value for key or -1 if there is no =
mapping for key.</span>
<span class=3D"k">func</span> <span class=3D"n">Lookup</span><span class=3D=
"p">(</span><span class=3D"n">key</span> <span class=3D"kt">string</span><s=
pan class=3D"p">)</span> <span class=3D"kt">int</span>
</code></pre></div></div>

<p>Failing to check for an in-band error value can lead to bugs and can att=
ribute
errors to the wrong function.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// The following line returns an error that Parse failed =
for the input value,</span>
<span class=3D"c">// whereas the failure was that there is no mapping for m=
issingKey.</span>
<span class=3D"k">return</span> <span class=3D"n">Parse</span><span class=
=3D"p">(</span><span class=3D"n">Lookup</span><span class=3D"p">(</span><sp=
an class=3D"n">missingKey</span><span class=3D"p">))</span>
</code></pre></div></div>

<p>Go=E2=80=99s support for multiple return values provides a better soluti=
on (see the
<a href=3D"http://golang.org/doc/effective_go.html#multiple-returns">Effect=
ive Go section on multiple returns</a>). Instead of requiring clients to
check for an in-band error value, a function should return an additional va=
lue
to indicate whether its other return values are valid. This return value ma=
y be
an error or a boolean when no explanation is needed, and should be the fina=
l
return value.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// Lookup returns the value for key or ok=3Dfalse if ther=
e is no mapping for key.</span>
<span class=3D"k">func</span> <span class=3D"n">Lookup</span><span class=3D=
"p">(</span><span class=3D"n">key</span> <span class=3D"kt">string</span><s=
pan class=3D"p">)</span> <span class=3D"p">(</span><span class=3D"n">value<=
/span> <span class=3D"kt">string</span><span class=3D"p">,</span> <span cla=
ss=3D"n">ok</span> <span class=3D"kt">bool</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>This API prevents the caller from incorrectly writing <code class=3D"lan=
guage-plaintext highlighter-rouge">Parse(Lookup(key))</code> which
causes a compile-time error, since <code class=3D"language-plaintext highli=
ghter-rouge">Lookup(key)</code> has 2 outputs.</p>

<p>Returning errors in this way encourages more robust and explicit error h=
andling:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">value</span><span class=3D"p">,</span> <span class=3D"n">=
ok</span> <span class=3D"o">:=3D</span> <span class=3D"n">Lookup</span><spa=
n class=3D"p">(</span><span class=3D"n">key</span><span class=3D"p">)</span=
>
<span class=3D"k">if</span> <span class=3D"o">!</span><span class=3D"n">ok<=
/span> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"s">"no value for %q"</span><span class=3D"p">,</span> <span cla=
ss=3D"n">key</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
<span class=3D"k">return</span> <span class=3D"n">Parse</span><span class=
=3D"p">(</span><span class=3D"n">value</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>Some standard library functions, like those in package <code class=3D"la=
nguage-plaintext highlighter-rouge">strings</code>, return in-band
error values. This greatly simplifies string-manipulation code at the cost =
of
requiring more diligence from the programmer. In general, Go code in the Go=
ogle
codebase should return additional values for errors.</p>

<p><a id=3D"indent-error-flow"></a></p>

<h3 id=3D"indent-error-flow">Indent error flow<a class=3D"anchorjs-link " h=
ref=3D"https://google.github.io/styleguide/go/decisions.html#indent-error-f=
low" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: =
1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-IndentErrorFlow"></a></p>

<p>Handle errors before proceeding with the rest of your code. This improve=
s the
readability of the code by enabling the reader to find the normal path quic=
kly.
This same logic applies to any block which tests a condition then ends in a
terminal condition (e.g., <code class=3D"language-plaintext highlighter-rou=
ge">return</code>, <code class=3D"language-plaintext highlighter-rouge">pan=
ic</code>, <code class=3D"language-plaintext highlighter-rouge">log.Fatal</=
code>).</p>

<p>Code that runs if the terminal condition is not met should appear after =
the <code class=3D"language-plaintext highlighter-rouge">if</code>
block, and should not be indented in an <code class=3D"language-plaintext h=
ighlighter-rouge">else</code> clause.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o">=
!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"c">// error handling</span>
    <span class=3D"k">return</span> <span class=3D"c">// or continue, etc.<=
/span>
<span class=3D"p">}</span>
<span class=3D"c">// normal code</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o">=
!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"c">// error handling</span>
<span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">=
{</span>
    <span class=3D"c">// normal code that looks abnormal due to indentation=
</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Tip:</strong> If you are using a variable for more than a few =
lines of code, it is
generally not worth using the <code class=3D"language-plaintext highlighter=
-rouge">if</code>-with-initializer style. In these cases, it
is usually better to move the declaration out and use a standard <code clas=
s=3D"language-plaintext highlighter-rouge">if</code>
statement:</p>

  <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">x</span><span class=3D"p">,</span> <span class=3D"n">err<=
/span> <span class=3D"o">:=3D</span> <span class=3D"n">f</span><span class=
=3D"p">()</span>
<span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o">=
!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
  <span class=3D"c">// error handling</span>
  <span class=3D"k">return</span>
<span class=3D"p">}</span>
<span class=3D"c">// lots of code that uses x</span>
<span class=3D"c">// across multiple lines</span>
</code></pre></div>  </div>

  <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">if</span> <span class=3D"n">x</span><span class=3D"p">,</=
span> <span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"n">f</span><span class=3D"p">();</span> <span class=3D"n">err</span> <=
span class=3D"o">!=3D</span> <span class=3D"no">nil</span> <span class=3D"p=
">{</span>
  <span class=3D"c">// error handling</span>
  <span class=3D"k">return</span>
<span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">=
{</span>
  <span class=3D"c">// lots of code that uses x</span>
  <span class=3D"c">// across multiple lines</span>
<span class=3D"p">}</span>
</code></pre></div>  </div>
</blockquote>

<p>See <a href=3D"https://google.github.io/styleguide/go/index.html#gotip">=
Go Tip #1: Line of Sight</a> and
<a href=3D"https://testing.googleblog.com/2017/06/code-health-reduce-nestin=
g-reduce.html">TotT: Reduce Code Complexity by Reducing Nesting</a>
for more details.</p>

<p><a id=3D"language"></a></p>

<h2 id=3D"language">Language<a class=3D"anchorjs-link " href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#language" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h2>

<p><a id=3D"literal-formatting"></a></p>

<h3 id=3D"literal-formatting">Literal formatting<a class=3D"anchorjs-link "=
 href=3D"https://google.github.io/styleguide/go/decisions.html#literal-form=
atting" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"fon=
t: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Go has an exceptionally powerful <a href=3D"https://golang.org/ref/spec#=
Composite_literals">composite literal syntax</a>, with which it is
possible to express deeply-nested, complicated values in a single expressio=
n.
Where possible, this literal syntax should be used instead of building valu=
es
field-by-field. The <code class=3D"language-plaintext highlighter-rouge">go=
fmt</code> formatting for literals is generally quite good, but
there are some additional rules for keeping these literals readable and
maintainable.</p>

<p><a id=3D"literal-field-names"></a></p>

<h4 id=3D"field-names">Field names<a class=3D"anchorjs-link " href=3D"https=
://google.github.io/styleguide/go/decisions.html#field-names" aria-label=3D=
"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-i=
cons; padding-left: 0.375em;"></a></h4>

<p>Struct literals must specify <strong>field names</strong> for types defi=
ned outside the
current package.</p>

<ul>
  <li>
    <p>Include field names for types from other packages.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// https://pkg.go.dev/encoding/csv#Reader</span>
<span class=3D"n">r</span> <span class=3D"o">:=3D</span> <span class=3D"n">=
csv</span><span class=3D"o">.</span><span class=3D"n">Reader</span><span cl=
ass=3D"p">{</span>
  <span class=3D"n">Comma</span><span class=3D"o">:</span> <span class=3D"s=
c">','</span><span class=3D"p">,</span>
  <span class=3D"n">Comment</span><span class=3D"o">:</span> <span class=3D=
"sc">'#'</span><span class=3D"p">,</span>
  <span class=3D"n">FieldsPerRecord</span><span class=3D"o">:</span> <span =
class=3D"m">4</span><span class=3D"p">,</span>
<span class=3D"p">}</span>
</code></pre></div>    </div>

    <p>The position of fields in a struct and the full set of fields (both =
of which
are necessary to get right when field names are omitted) are not usually
considered to be part of a struct=E2=80=99s public API; specifying the fiel=
d name is
needed to avoid unnecessary coupling.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">r</span> <span class=3D"o">:=3D</span> <span class=3D"n">=
csv</span><span class=3D"o">.</span><span class=3D"n">Reader</span><span cl=
ass=3D"p">{</span><span class=3D"sc">','</span><span class=3D"p">,</span> <=
span class=3D"sc">'#'</span><span class=3D"p">,</span> <span class=3D"m">4<=
/span><span class=3D"p">,</span> <span class=3D"no">false</span><span class=
=3D"p">,</span> <span class=3D"no">false</span><span class=3D"p">,</span> <=
span class=3D"no">false</span><span class=3D"p">,</span> <span class=3D"no"=
>false</span><span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>For package-local types, field names are optional.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">okay</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">Type</span><span class=3D"p">{</span><span class=3D"m">42</span><span cl=
ass=3D"p">}</span>
<span class=3D"n">also</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">internalType</span><span class=3D"p">{</span><span class=3D"m">4</span><=
span class=3D"p">,</span> <span class=3D"m">2</span><span class=3D"p">}</sp=
an>
</code></pre></div>    </div>

    <p>Field names should still be used if it makes the code clearer, and i=
t is
very common to do so. For example, a struct with a large number of fields
should almost always be initialized with field names.</p>

    <!-- TODO: Maybe a better example here that doesn't have many fields. -=
->

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">okay</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">StructWithLotsOfFields</span><span class=3D"p">{</span>
  <span class=3D"n">field1</span><span class=3D"o">:</span> <span class=3D"=
m">1</span><span class=3D"p">,</span>
  <span class=3D"n">field2</span><span class=3D"o">:</span> <span class=3D"=
s">"two"</span><span class=3D"p">,</span>
  <span class=3D"n">field3</span><span class=3D"o">:</span> <span class=3D"=
m">3.14</span><span class=3D"p">,</span>
  <span class=3D"n">field4</span><span class=3D"o">:</span> <span class=3D"=
no">true</span><span class=3D"p">,</span>
<span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><a id=3D"literal-matching-braces"></a></p>

<h4 id=3D"matching-braces">Matching braces<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#matching-braces" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>The closing half of a brace pair should always appear on a line with the=
 same
amount of indentation as the opening brace. One-line literals necessarily h=
ave
this property. When the literal spans multiple lines, maintaining this prop=
erty
keeps the brace matching for literals the same as brace matching for common=
 Go
syntactic constructs like functions and <code class=3D"language-plaintext h=
ighlighter-rouge">if</code> statements.</p>

<p>The most common mistake in this area is putting the closing brace on the=
 same
line as a value in a multi-line struct literal. In these cases, the line sh=
ould
end with a comma and the closing brace should appear on the next line.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{{</span><span class=3D"n">Key</span><span class=3D"o">:</span> <=
span class=3D"s">"value"</span><span class=3D"p">}}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{</span>
    <span class=3D"p">{</span><span class=3D"n">Key</span><span class=3D"o"=
>:</span> <span class=3D"s">"multi"</span><span class=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"n">Key</span><span class=3D"o"=
>:</span> <span class=3D"s">"line"</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">bad</span> <span class=3D"o">:=3D</span> <span class=3D"p=
">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cla=
ss=3D"p">{</span>
    <span class=3D"p">{</span><span class=3D"n">Key</span><span class=3D"o"=
>:</span> <span class=3D"s">"multi"</span><span class=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"n">Key</span><span class=3D"o"=
>:</span> <span class=3D"s">"line"</span><span class=3D"p">}}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">bad</span> <span class=3D"o">:=3D</span> <span class=3D"p=
">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cla=
ss=3D"p">{</span>
    <span class=3D"p">{</span>
        <span class=3D"n">Key</span><span class=3D"o">:</span> <span class=
=3D"s">"value"</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"literal-cuddled-braces"></a></p>

<h4 id=3D"cuddled-braces">Cuddled braces<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#cuddled-braces" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Dropping whitespace between braces (aka =E2=80=9Ccuddling=E2=80=9D them)=
 for slice and array
literals is only permitted when both of the following are true.</p>

<ul>
  <li>The <a href=3D"https://google.github.io/styleguide/go/decisions.html#=
literal-matching-braces">indentation matches</a></li>
  <li>The inner values are also literals or proto builders (i.e. not a vari=
able or
other expression)</li>
</ul>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{</span>
    <span class=3D"p">{</span> <span class=3D"c">// Not cuddled</span>
        <span class=3D"n">Field</span><span class=3D"o">:</span> <span clas=
s=3D"s">"value"</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
    <span class=3D"p">{</span>
        <span class=3D"n">Field</span><span class=3D"o">:</span> <span clas=
s=3D"s">"value"</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{{</span> <span class=3D"c">// Cuddled correctly</span>
    <span class=3D"n">Field</span><span class=3D"o">:</span> <span class=3D=
"s">"value"</span><span class=3D"p">,</span>
<span class=3D"p">},</span> <span class=3D"p">{</span>
    <span class=3D"n">Field</span><span class=3D"o">:</span> <span class=3D=
"s">"value"</span><span class=3D"p">,</span>
<span class=3D"p">}}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{</span>
    <span class=3D"n">first</span><span class=3D"p">,</span> <span class=3D=
"c">// Can't be cuddled</span>
    <span class=3D"p">{</span><span class=3D"n">Field</span><span class=3D"=
o">:</span> <span class=3D"s">"second"</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">okay</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">pb</span><span clas=
s=3D"o">.</span><span class=3D"n">Type</span><span class=3D"p">{</span><spa=
n class=3D"n">pb</span><span class=3D"o">.</span><span class=3D"n">Type_bui=
lder</span><span class=3D"p">{</span>
    <span class=3D"n">Field</span><span class=3D"o">:</span> <span class=3D=
"s">"first"</span><span class=3D"p">,</span> <span class=3D"c">// Proto Bui=
lders may be cuddled to save vertical space</span>
<span class=3D"p">}</span><span class=3D"o">.</span><span class=3D"n">Build=
</span><span class=3D"p">(),</span> <span class=3D"n">pb</span><span class=
=3D"o">.</span><span class=3D"n">Type_builder</span><span class=3D"p">{</sp=
an>
    <span class=3D"n">Field</span><span class=3D"o">:</span> <span class=3D=
"s">"second"</span><span class=3D"p">,</span>
<span class=3D"p">}</span><span class=3D"o">.</span><span class=3D"n">Build=
</span><span class=3D"p">()}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">bad</span> <span class=3D"o">:=3D</span> <span class=3D"p=
">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cla=
ss=3D"p">{</span>
    <span class=3D"n">first</span><span class=3D"p">,</span>
    <span class=3D"p">{</span>
        <span class=3D"n">Field</span><span class=3D"o">:</span> <span clas=
s=3D"s">"second"</span><span class=3D"p">,</span>
    <span class=3D"p">}}</span>
</code></pre></div></div>

<p><a id=3D"literal-repeated-type-names"></a></p>

<h4 id=3D"repeated-type-names">Repeated type names<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#repeated-t=
ype-names" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Repeated type names may be omitted from slice and map literals. This can=
 be
helpful in reducing clutter. A reasonable occasion for repeating the type n=
ames
explicitly is when dealing with a complex type that is not common in your
project, when the repetitive type names are on lines that are far apart and=
 can
remind the reader of the context.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><span cl=
ass=3D"p">{</span>
    <span class=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:=
</span> <span class=3D"m">42</span><span class=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:=
</span> <span class=3D"m">43</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">repetitive</span> <span class=3D"o">:=3D</span> <span cla=
ss=3D"p">[]</span><span class=3D"o">*</span><span class=3D"n">Type</span><s=
pan class=3D"p">{</span>
    <span class=3D"o">&amp;</span><span class=3D"n">Type</span><span class=
=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:</span> <span c=
lass=3D"m">42</span><span class=3D"p">},</span>
    <span class=3D"o">&amp;</span><span class=3D"n">Type</span><span class=
=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:</span> <span c=
lass=3D"m">43</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
k">map</span><span class=3D"p">[</span><span class=3D"n">Type1</span><span =
class=3D"p">]</span><span class=3D"o">*</span><span class=3D"n">Type2</span=
><span class=3D"p">{</span>
    <span class=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:=
</span> <span class=3D"m">1</span><span class=3D"p">}</span><span class=3D"=
o">:</span> <span class=3D"p">{</span><span class=3D"n">B</span><span class=
=3D"o">:</span> <span class=3D"m">2</span><span class=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"n">A</span><span class=3D"o">:=
</span> <span class=3D"m">3</span><span class=3D"p">}</span><span class=3D"=
o">:</span> <span class=3D"p">{</span><span class=3D"n">B</span><span class=
=3D"o">:</span> <span class=3D"m">4</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">repetitive</span> <span class=3D"o">:=3D</span> <span cla=
ss=3D"k">map</span><span class=3D"p">[</span><span class=3D"n">Type1</span>=
<span class=3D"p">]</span><span class=3D"o">*</span><span class=3D"n">Type2=
</span><span class=3D"p">{</span>
    <span class=3D"n">Type1</span><span class=3D"p">{</span><span class=3D"=
n">A</span><span class=3D"o">:</span> <span class=3D"m">1</span><span class=
=3D"p">}</span><span class=3D"o">:</span> <span class=3D"o">&amp;</span><sp=
an class=3D"n">Type2</span><span class=3D"p">{</span><span class=3D"n">B</s=
pan><span class=3D"o">:</span> <span class=3D"m">2</span><span class=3D"p">=
},</span>
    <span class=3D"n">Type1</span><span class=3D"p">{</span><span class=3D"=
n">A</span><span class=3D"o">:</span> <span class=3D"m">3</span><span class=
=3D"p">}</span><span class=3D"o">:</span> <span class=3D"o">&amp;</span><sp=
an class=3D"n">Type2</span><span class=3D"p">{</span><span class=3D"n">B</s=
pan><span class=3D"o">:</span> <span class=3D"m">4</span><span class=3D"p">=
},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Tip:</strong> If you want to remove repetitive type names in str=
uct literals, you can
run <code class=3D"language-plaintext highlighter-rouge">gofmt -s</code>.</=
p>

<p><a id=3D"literal-zero-value-fields"></a></p>

<h4 id=3D"zero-value-fields">Zero-value fields<a class=3D"anchorjs-link " h=
ref=3D"https://google.github.io/styleguide/go/decisions.html#zero-value-fie=
lds" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: =
1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p><a href=3D"https://golang.org/ref/spec#The_zero_value">Zero-value</a> fi=
elds may be omitted from struct literals when clarity is not lost
as a result.</p>

<p>Well-designed APIs often employ zero-value construction for enhanced
readability. For example, omitting the three zero-value fields from the
following struct draws attention to the only option that is being specified=
.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">import</span> <span class=3D"p">(</span>
  <span class=3D"s">"github.com/golang/leveldb"</span>
  <span class=3D"s">"github.com/golang/leveldb/db"</span>
<span class=3D"p">)</span>

<span class=3D"n">ldb</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">leveldb</span><span class=3D"o">.</span><span class=3D"n">Open</span><spa=
n class=3D"p">(</span><span class=3D"s">"/my/table"</span><span class=3D"p"=
>,</span> <span class=3D"o">&amp;</span><span class=3D"n">db</span><span cl=
ass=3D"o">.</span><span class=3D"n">Options</span><span class=3D"p">{</span=
>
    <span class=3D"n">BlockSize</span><span class=3D"o">:</span> <span clas=
s=3D"m">1</span><span class=3D"o">&lt;&lt;</span><span class=3D"m">16</span=
><span class=3D"p">,</span>
    <span class=3D"n">ErrorIfDBExists</span><span class=3D"o">:</span> <spa=
n class=3D"no">true</span><span class=3D"p">,</span>

    <span class=3D"c">// These fields all have their zero values.</span>
    <span class=3D"n">BlockRestartInterval</span><span class=3D"o">:</span>=
 <span class=3D"m">0</span><span class=3D"p">,</span>
    <span class=3D"n">Comparer</span><span class=3D"o">:</span> <span class=
=3D"no">nil</span><span class=3D"p">,</span>
    <span class=3D"n">Compression</span><span class=3D"o">:</span> <span cl=
ass=3D"no">nil</span><span class=3D"p">,</span>
    <span class=3D"n">FileSystem</span><span class=3D"o">:</span> <span cla=
ss=3D"no">nil</span><span class=3D"p">,</span>
    <span class=3D"n">FilterPolicy</span><span class=3D"o">:</span> <span c=
lass=3D"no">nil</span><span class=3D"p">,</span>
    <span class=3D"n">MaxOpenFiles</span><span class=3D"o">:</span> <span c=
lass=3D"m">0</span><span class=3D"p">,</span>
    <span class=3D"n">WriteBufferSize</span><span class=3D"o">:</span> <spa=
n class=3D"m">0</span><span class=3D"p">,</span>
    <span class=3D"n">VerifyChecksums</span><span class=3D"o">:</span> <spa=
n class=3D"no">false</span><span class=3D"p">,</span>
<span class=3D"p">})</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">import</span> <span class=3D"p">(</span>
  <span class=3D"s">"github.com/golang/leveldb"</span>
  <span class=3D"s">"github.com/golang/leveldb/db"</span>
<span class=3D"p">)</span>

<span class=3D"n">ldb</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">leveldb</span><span class=3D"o">.</span><span class=3D"n">Open</span><spa=
n class=3D"p">(</span><span class=3D"s">"/my/table"</span><span class=3D"p"=
>,</span> <span class=3D"o">&amp;</span><span class=3D"n">db</span><span cl=
ass=3D"o">.</span><span class=3D"n">Options</span><span class=3D"p">{</span=
>
    <span class=3D"n">BlockSize</span><span class=3D"o">:</span> <span clas=
s=3D"m">1</span><span class=3D"o">&lt;&lt;</span><span class=3D"m">16</span=
><span class=3D"p">,</span>
    <span class=3D"n">ErrorIfDBExists</span><span class=3D"o">:</span> <spa=
n class=3D"no">true</span><span class=3D"p">,</span>
<span class=3D"p">})</span>
</code></pre></div></div>

<p>Structs within table-driven tests often benefit from <a href=3D"https://=
google.github.io/styleguide/go/decisions.html#literal-field-names">explicit=
 field names</a>,
especially when the test struct is not trivial. This allows the author to o=
mit
the zero-valued fields entirely when the fields in question are not related=
 to
the test case. For example, successful test cases should omit any error-rel=
ated
or failure-related fields. In cases where the zero value is necessary to
understand the test case, such as testing for zero or <code class=3D"langua=
ge-plaintext highlighter-rouge">nil</code> inputs, the field
names should be specified.</p>

<p><strong>Concise</strong></p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"n">tests</span> <span class=3D"o">=
:=3D</span> <span class=3D"p">[]</span><span class=3D"k">struct</span> <spa=
n class=3D"p">{</span>
    <span class=3D"n">input</span>      <span class=3D"kt">string</span>
    <span class=3D"n">wantPieces</span> <span class=3D"p">[]</span><span cl=
ass=3D"kt">string</span>
    <span class=3D"n">wantErr</span>    <span class=3D"kt">error</span>
<span class=3D"p">}{</span>
    <span class=3D"p">{</span>
        <span class=3D"n">input</span><span class=3D"o">:</span>      <span=
 class=3D"s">"1.2.3.4"</span><span class=3D"p">,</span>
        <span class=3D"n">wantPieces</span><span class=3D"o">:</span> <span=
 class=3D"p">[]</span><span class=3D"kt">string</span><span class=3D"p">{</=
span><span class=3D"s">"1"</span><span class=3D"p">,</span> <span class=3D"=
s">"2"</span><span class=3D"p">,</span> <span class=3D"s">"3"</span><span c=
lass=3D"p">,</span> <span class=3D"s">"4"</span><span class=3D"p">},</span>
    <span class=3D"p">},</span>
    <span class=3D"p">{</span>
        <span class=3D"n">input</span><span class=3D"o">:</span>   <span cl=
ass=3D"s">"hostname"</span><span class=3D"p">,</span>
        <span class=3D"n">wantErr</span><span class=3D"o">:</span> <span cl=
ass=3D"n">ErrBadHostname</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Explicit</strong></p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"n">tests</span> <span class=3D"o">=
:=3D</span> <span class=3D"p">[]</span><span class=3D"k">struct</span> <spa=
n class=3D"p">{</span>
    <span class=3D"n">input</span>    <span class=3D"kt">string</span>
    <span class=3D"n">wantIPv4</span> <span class=3D"kt">bool</span>
    <span class=3D"n">wantIPv6</span> <span class=3D"kt">bool</span>
    <span class=3D"n">wantErr</span>  <span class=3D"kt">bool</span>
<span class=3D"p">}{</span>
    <span class=3D"p">{</span>
        <span class=3D"n">input</span><span class=3D"o">:</span>    <span c=
lass=3D"s">"1.2.3.4"</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv4</span><span class=3D"o">:</span> <span c=
lass=3D"no">true</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv6</span><span class=3D"o">:</span> <span c=
lass=3D"no">false</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
    <span class=3D"p">{</span>
        <span class=3D"n">input</span><span class=3D"o">:</span>    <span c=
lass=3D"s">"1:2::3:4"</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv4</span><span class=3D"o">:</span> <span c=
lass=3D"no">false</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv6</span><span class=3D"o">:</span> <span c=
lass=3D"no">true</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
    <span class=3D"p">{</span>
        <span class=3D"n">input</span><span class=3D"o">:</span>    <span c=
lass=3D"s">"hostname"</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv4</span><span class=3D"o">:</span> <span c=
lass=3D"no">false</span><span class=3D"p">,</span>
        <span class=3D"n">wantIPv6</span><span class=3D"o">:</span> <span c=
lass=3D"no">false</span><span class=3D"p">,</span>
        <span class=3D"n">wantErr</span><span class=3D"o">:</span>  <span c=
lass=3D"no">true</span><span class=3D"p">,</span>
    <span class=3D"p">},</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"nil-slices"></a></p>

<h3 id=3D"nil-slices">Nil slices<a class=3D"anchorjs-link " href=3D"https:/=
/google.github.io/styleguide/go/decisions.html#nil-slices" aria-label=3D"An=
chor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icon=
s; padding-left: 0.375em;"></a></h3>

<p>For most purposes, there is no functional difference between <code class=
=3D"language-plaintext highlighter-rouge">nil</code> and the empty
slice. Built-in functions like <code class=3D"language-plaintext highlighte=
r-rouge">len</code> and <code class=3D"language-plaintext highlighter-rouge=
">cap</code> behave as expected on <code class=3D"language-plaintext highli=
ghter-rouge">nil</code>
slices.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">import</span> <span class=3D"s">"fmt"</span>

<span class=3D"k">var</span> <span class=3D"n">s</span> <span class=3D"p">[=
]</span><span class=3D"kt">int</span>         <span class=3D"c">// nil</spa=
n>

<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntln</span><span class=3D"p">(</span><span class=3D"n">s</span><span class=
=3D"p">)</span>      <span class=3D"c">// []</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntln</span><span class=3D"p">(</span><span class=3D"nb">len</span><span cla=
ss=3D"p">(</span><span class=3D"n">s</span><span class=3D"p">))</span> <spa=
n class=3D"c">// 0</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntln</span><span class=3D"p">(</span><span class=3D"nb">cap</span><span cla=
ss=3D"p">(</span><span class=3D"n">s</span><span class=3D"p">))</span> <spa=
n class=3D"c">// 0</span>
<span class=3D"k">for</span> <span class=3D"k">range</span> <span class=3D"=
n">s</span> <span class=3D"p">{</span><span class=3D"o">...</span><span cla=
ss=3D"p">}</span>   <span class=3D"c">// no-op</span>

<span class=3D"n">s</span> <span class=3D"o">=3D</span> <span class=3D"nb">=
append</span><span class=3D"p">(</span><span class=3D"n">s</span><span clas=
s=3D"p">,</span> <span class=3D"m">42</span><span class=3D"p">)</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntln</span><span class=3D"p">(</span><span class=3D"n">s</span><span class=
=3D"p">)</span>      <span class=3D"c">// [42]</span>
</code></pre></div></div>

<p>If you declare an empty slice as a local variable (especially if it can =
be the
source of a return value), prefer the nil initialization to reduce the risk=
 of
bugs by callers.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">var</span> <span class=3D"n">t</span> <span class=3D"p">[=
]</span><span class=3D"kt">string</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">t</span> <span class=3D"o">:=3D</span> <span class=3D"p">=
[]</span><span class=3D"kt">string</span><span class=3D"p">{}</span>
</code></pre></div></div>

<p>Do not create APIs that force their clients to make distinctions between=
 nil and
the empty slice.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// Ping pings its targets.</span>
<span class=3D"c">// Returns hosts that successfully responded.</span>
<span class=3D"k">func</span> <span class=3D"n">Ping</span><span class=3D"p=
">(</span><span class=3D"n">hosts</span> <span class=3D"p">[]</span><span c=
lass=3D"kt">string</span><span class=3D"p">)</span> <span class=3D"p">([]</=
span><span class=3D"kt">string</span><span class=3D"p">,</span> <span class=
=3D"kt">error</span><span class=3D"p">)</span> <span class=3D"p">{</span> <=
span class=3D"o">...</span> <span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// Ping pings its targets and returns a list of hosts</sp=
an>
<span class=3D"c">// that successfully responded. Can be empty if the input=
 was empty.</span>
<span class=3D"c">// nil signifies that a system error occurred.</span>
<span class=3D"k">func</span> <span class=3D"n">Ping</span><span class=3D"p=
">(</span><span class=3D"n">hosts</span> <span class=3D"p">[]</span><span c=
lass=3D"kt">string</span><span class=3D"p">)</span> <span class=3D"p">[]</s=
pan><span class=3D"kt">string</span> <span class=3D"p">{</span> <span class=
=3D"o">...</span> <span class=3D"p">}</span>
</code></pre></div></div>

<p>When designing interfaces, avoid making a distinction between a <code cl=
ass=3D"language-plaintext highlighter-rouge">nil</code> slice and
a non-<code class=3D"language-plaintext highlighter-rouge">nil</code>, zero=
-length slice, as this can lead to subtle programming errors.
This is typically accomplished by using <code class=3D"language-plaintext h=
ighlighter-rouge">len</code> to check for emptiness, rather
than <code class=3D"language-plaintext highlighter-rouge">=3D=3D nil</code>=
.</p>

<p>This implementation accepts both <code class=3D"language-plaintext highl=
ighter-rouge">nil</code> and zero-length slices as =E2=80=9Cempty=E2=80=9D:=
</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// describeInts describes s with the given prefix, unless=
 s is empty.</span>
<span class=3D"k">func</span> <span class=3D"n">describeInts</span><span cl=
ass=3D"p">(</span><span class=3D"n">prefix</span> <span class=3D"kt">string=
</span><span class=3D"p">,</span> <span class=3D"n">s</span> <span class=3D=
"p">[]</span><span class=3D"kt">int</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"nb">len</span><span class=3D=
"p">(</span><span class=3D"n">s</span><span class=3D"p">)</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"m">0</span> <span class=3D"p">{</span>
        <span class=3D"k">return</span>
    <span class=3D"p">}</span>
    <span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n"=
>Println</span><span class=3D"p">(</span><span class=3D"n">prefix</span><sp=
an class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"p">)</span=
>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Instead of relying on the distinction as a part of the API:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"n">maybeInts</span><span class=
=3D"p">()</span> <span class=3D"p">[]</span><span class=3D"kt">int</span> <=
span class=3D"p">{</span> <span class=3D"c">/* ... */</span> <span class=3D=
"p">}</span>

<span class=3D"c">// describeInts describes s with the given prefix; pass n=
il to skip completely.</span>
<span class=3D"k">func</span> <span class=3D"n">describeInts</span><span cl=
ass=3D"p">(</span><span class=3D"n">prefix</span> <span class=3D"kt">string=
</span><span class=3D"p">,</span> <span class=3D"n">s</span> <span class=3D=
"p">[]</span><span class=3D"kt">int</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
  <span class=3D"c">// The behavior of this function unintentionally change=
s depending on what</span>
  <span class=3D"c">// maybeInts() returns in 'empty' cases (nil or []int{}=
).</span>
  <span class=3D"k">if</span> <span class=3D"n">s</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"k">return</span>
  <span class=3D"p">}</span>
  <span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">P=
rintln</span><span class=3D"p">(</span><span class=3D"n">prefix</span><span=
 class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"p">)</span>
<span class=3D"p">}</span>

<span class=3D"n">describeInts</span><span class=3D"p">(</span><span class=
=3D"s">"Here are some ints:"</span><span class=3D"p">,</span> <span class=
=3D"n">maybeInts</span><span class=3D"p">())</span>
</code></pre></div></div>

<p>See <a href=3D"https://google.github.io/styleguide/go/decisions.html#in-=
band-errors">in-band errors</a> for further discussion.</p>

<p><a id=3D"indentation-confusion"></a></p>

<h3 id=3D"indentation-confusion">Indentation confusion<a class=3D"anchorjs-=
link " href=3D"https://google.github.io/styleguide/go/decisions.html#indent=
ation-confusion" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" sty=
le=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Avoid introducing a line break if it would align the rest of the line wi=
th an
indented code block. If this is unavoidable, leave a space to separate the =
code
in the block from the wrapped line.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">if</span> <span class=3D"n">longCondition1</span> <span c=
lass=3D"o">&amp;&amp;</span> <span class=3D"n">longCondition2</span> <span =
class=3D"o">&amp;&amp;</span>
    <span class=3D"c">// Conditions 3 and 4 have the same indentation as th=
e code within the if.</span>
    <span class=3D"n">longCondition3</span> <span class=3D"o">&amp;&amp;</s=
pan> <span class=3D"n">longCondition4</span> <span class=3D"p">{</span>
    <span class=3D"n">log</span><span class=3D"o">.</span><span class=3D"n"=
>Info</span><span class=3D"p">(</span><span class=3D"s">"all conditions met=
"</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>See the following sections for specific guidelines and examples:</p>

<ul>
  <li><a href=3D"https://google.github.io/styleguide/go/decisions.html#func=
-formatting">Function formatting</a></li>
  <li><a href=3D"https://google.github.io/styleguide/go/decisions.html#cond=
itional-formatting">Conditionals and loops</a></li>
  <li><a href=3D"https://google.github.io/styleguide/go/decisions.html#lite=
ral-formatting">Literal formatting</a></li>
</ul>

<p><a id=3D"func-formatting"></a></p>

<h3 id=3D"function-formatting">Function formatting<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#function-f=
ormatting" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>The signature of a function or method declaration should remain on a sin=
gle line
to avoid <a href=3D"https://google.github.io/styleguide/go/decisions.html#i=
ndentation-confusion">indentation confusion</a>.</p>

<p>Function argument lists can make some of the longest lines in a Go sourc=
e file.
However, they precede a change in indentation, and therefore it is difficul=
t to
break the line in a way that does not make subsequent lines look like part =
of
the function body in a confusing way:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">r=
</span> <span class=3D"o">*</span><span class=3D"n">SomeType</span><span cl=
ass=3D"p">)</span> <span class=3D"n">SomeLongFunctionName</span><span class=
=3D"p">(</span><span class=3D"n">foo1</span><span class=3D"p">,</span> <spa=
n class=3D"n">foo2</span><span class=3D"p">,</span> <span class=3D"n">foo3<=
/span> <span class=3D"kt">string</span><span class=3D"p">,</span>
    <span class=3D"n">foo4</span><span class=3D"p">,</span> <span class=3D"=
n">foo5</span><span class=3D"p">,</span> <span class=3D"n">foo6</span> <spa=
n class=3D"kt">int</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an>
    <span class=3D"n">foo7</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">bar</span><span class=3D"p">(</span><span class=3D"n">foo1</span><sp=
an class=3D"p">)</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>See <a href=3D"https://google.github.io/styleguide/go/best-practices#fun=
cargs">best practices</a> for a few options for shortening
the call sites of functions that would otherwise have many arguments.</p>

<p>Lines can often be shortened by factoring out local variables.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">local</span> <span class=3D"o">:=3D</span> <span class=3D=
"n">helper</span><span class=3D"p">(</span><span class=3D"n">some</span><sp=
an class=3D"p">,</span> <span class=3D"n">parameters</span><span class=3D"p=
">,</span> <span class=3D"n">here</span><span class=3D"p">)</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">foo</span><span class=3D"o">.</span><span class=3D"n">Call</span><span c=
lass=3D"p">(</span><span class=3D"n">list</span><span class=3D"p">,</span> =
<span class=3D"n">of</span><span class=3D"p">,</span> <span class=3D"n">par=
ameters</span><span class=3D"p">,</span> <span class=3D"n">local</span><spa=
n class=3D"p">)</span>
</code></pre></div></div>

<p>Similarly, function and method calls should not be separated based solel=
y on
line length.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">foo</span><span class=3D"o">.</span><span class=3D"n">Call</span><span c=
lass=3D"p">(</span><span class=3D"n">long</span><span class=3D"p">,</span> =
<span class=3D"n">list</span><span class=3D"p">,</span> <span class=3D"n">o=
f</span><span class=3D"p">,</span> <span class=3D"n">parameters</span><span=
 class=3D"p">,</span> <span class=3D"n">all</span><span class=3D"p">,</span=
> <span class=3D"n">on</span><span class=3D"p">,</span> <span class=3D"n">o=
ne</span><span class=3D"p">,</span> <span class=3D"n">line</span><span clas=
s=3D"p">)</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">bad</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">foo</span><span class=3D"o">.</span><span class=3D"n">Call</span><span cl=
ass=3D"p">(</span><span class=3D"n">long</span><span class=3D"p">,</span> <=
span class=3D"n">list</span><span class=3D"p">,</span> <span class=3D"n">of=
</span><span class=3D"p">,</span> <span class=3D"n">parameters</span><span =
class=3D"p">,</span>
    <span class=3D"n">with</span><span class=3D"p">,</span> <span class=3D"=
n">arbitrary</span><span class=3D"p">,</span> <span class=3D"n">line</span>=
<span class=3D"p">,</span> <span class=3D"n">breaks</span><span class=3D"p"=
>)</span>
</code></pre></div></div>

<p>Avoid adding inline comments to specific function arguments where possib=
le.
Instead, use an <a href=3D"https://google.github.io/styleguide/go/best-prac=
tices#option-structure">option struct</a> or add more
detail to the function documentation.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">good</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">server</span><span class=3D"o">.</span><span class=3D"n">New</span><span=
 class=3D"p">(</span><span class=3D"n">ctx</span><span class=3D"p">,</span>=
 <span class=3D"n">server</span><span class=3D"o">.</span><span class=3D"n"=
>Options</span><span class=3D"p">{</span><span class=3D"n">Port</span><span=
 class=3D"o">:</span> <span class=3D"m">42</span><span class=3D"p">})</span=
>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">bad</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">server</span><span class=3D"o">.</span><span class=3D"n">New</span><span =
class=3D"p">(</span>
    <span class=3D"n">ctx</span><span class=3D"p">,</span>
    <span class=3D"m">42</span><span class=3D"p">,</span> <span class=3D"c"=
>// Port</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>If the API cannot be changed or if the local call is unusual (whether or=
 not the
call is too long), it is always permissible to add line breaks if it aids i=
n
understanding the call.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">canvas</span><span class=3D"o">.</span><span class=3D"n">=
RenderCube</span><span class=3D"p">(</span><span class=3D"n">cube</span><sp=
an class=3D"p">,</span>
    <span class=3D"n">x0</span><span class=3D"p">,</span> <span class=3D"n"=
>y0</span><span class=3D"p">,</span> <span class=3D"n">z0</span><span class=
=3D"p">,</span>
    <span class=3D"n">x0</span><span class=3D"p">,</span> <span class=3D"n"=
>y0</span><span class=3D"p">,</span> <span class=3D"n">z1</span><span class=
=3D"p">,</span>
    <span class=3D"n">x0</span><span class=3D"p">,</span> <span class=3D"n"=
>y1</span><span class=3D"p">,</span> <span class=3D"n">z0</span><span class=
=3D"p">,</span>
    <span class=3D"n">x0</span><span class=3D"p">,</span> <span class=3D"n"=
>y1</span><span class=3D"p">,</span> <span class=3D"n">z1</span><span class=
=3D"p">,</span>
    <span class=3D"n">x1</span><span class=3D"p">,</span> <span class=3D"n"=
>y0</span><span class=3D"p">,</span> <span class=3D"n">z0</span><span class=
=3D"p">,</span>
    <span class=3D"n">x1</span><span class=3D"p">,</span> <span class=3D"n"=
>y0</span><span class=3D"p">,</span> <span class=3D"n">z1</span><span class=
=3D"p">,</span>
    <span class=3D"n">x1</span><span class=3D"p">,</span> <span class=3D"n"=
>y1</span><span class=3D"p">,</span> <span class=3D"n">z0</span><span class=
=3D"p">,</span>
    <span class=3D"n">x1</span><span class=3D"p">,</span> <span class=3D"n"=
>y1</span><span class=3D"p">,</span> <span class=3D"n">z1</span><span class=
=3D"p">,</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>Note that the lines in the above example are not wrapped at a specific c=
olumn
boundary but are grouped based on coordinate triples.</p>

<p>Long string literals within functions should not be broken for the sake =
of line
length. For functions that include such strings, a line break can be added =
after
the string format, and the arguments can be provided on the next or subsequ=
ent
lines. The decision about where the line breaks should go is best made base=
d on
semantic groupings of inputs, rather than based purely on line length.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">log</span><span class=3D"o">.</span><span class=3D"n">War=
ningf</span><span class=3D"p">(</span><span class=3D"s">"Database key (%q, =
%d, %q) incompatible in transaction started by (%q, %d, %q)"</span><span cl=
ass=3D"p">,</span>
    <span class=3D"n">currentCustomer</span><span class=3D"p">,</span> <spa=
n class=3D"n">currentOffset</span><span class=3D"p">,</span> <span class=3D=
"n">currentKey</span><span class=3D"p">,</span>
    <span class=3D"n">txCustomer</span><span class=3D"p">,</span> <span cla=
ss=3D"n">txOffset</span><span class=3D"p">,</span> <span class=3D"n">txKey<=
/span><span class=3D"p">)</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">log</span><span class=3D"o">.</span><span class=3D"n">War=
ningf</span><span class=3D"p">(</span><span class=3D"s">"Database key (%q, =
%d, %q) incompatible in"</span><span class=3D"o">+</span>
    <span class=3D"s">" transaction started by (%q, %d, %q)"</span><span cl=
ass=3D"p">,</span>
    <span class=3D"n">currentCustomer</span><span class=3D"p">,</span> <spa=
n class=3D"n">currentOffset</span><span class=3D"p">,</span> <span class=3D=
"n">currentKey</span><span class=3D"p">,</span> <span class=3D"n">txCustome=
r</span><span class=3D"p">,</span>
    <span class=3D"n">txOffset</span><span class=3D"p">,</span> <span class=
=3D"n">txKey</span><span class=3D"p">)</span>
</code></pre></div></div>

<p><a id=3D"conditional-formatting"></a></p>

<h3 id=3D"conditionals-and-loops">Conditionals and loops<a class=3D"anchorj=
s-link " href=3D"https://google.github.io/styleguide/go/decisions.html#cond=
itionals-and-loops" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" =
style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>An <code class=3D"language-plaintext highlighter-rouge">if</code> statem=
ent should not be line broken; multi-line <code class=3D"language-plaintext=
 highlighter-rouge">if</code> clauses can lead to
<a href=3D"https://google.github.io/styleguide/go/decisions.html#indentatio=
n-confusion">indentation confusion</a>.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// The second if statement is aligned with the code withi=
n the if block, causing</span>
<span class=3D"c">// indentation confusion.</span>
<span class=3D"k">if</span> <span class=3D"n">db</span><span class=3D"o">.<=
/span><span class=3D"n">CurrentStatusIs</span><span class=3D"p">(</span><sp=
an class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">InTrans=
action</span><span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
ValuesEqual</span><span class=3D"p">(</span><span class=3D"n">db</span><spa=
n class=3D"o">.</span><span class=3D"n">TransactionKey</span><span class=3D=
"p">(),</span> <span class=3D"n">row</span><span class=3D"o">.</span><span =
class=3D"n">Key</span><span class=3D"p">())</span> <span class=3D"p">{</spa=
n>
    <span class=3D"k">return</span> <span class=3D"n">db</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">Transac=
tionError</span><span class=3D"p">,</span> <span class=3D"s">"query failed:=
 row (%v): key does not match transaction key"</span><span class=3D"p">,</s=
pan> <span class=3D"n">row</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>If the short-circuit behavior is not required, the boolean operands can =
be
extracted directly:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">inTransaction</span> <span class=3D"o">:=3D</span> <span =
class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">CurrentSta=
tusIs</span><span class=3D"p">(</span><span class=3D"n">db</span><span clas=
s=3D"o">.</span><span class=3D"n">InTransaction</span><span class=3D"p">)</=
span>
<span class=3D"n">keysMatch</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">ValuesEqual</s=
pan><span class=3D"p">(</span><span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">TransactionKey</span><span class=3D"p">(),</span>=
 <span class=3D"n">row</span><span class=3D"o">.</span><span class=3D"n">Ke=
y</span><span class=3D"p">())</span>
<span class=3D"k">if</span> <span class=3D"n">inTransaction</span> <span cl=
ass=3D"o">&amp;&amp;</span> <span class=3D"n">keysMatch</span> <span class=
=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"n">db</span><span class=
=3D"o">.</span><span class=3D"n">Error</span><span class=3D"p">(</span><spa=
n class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">Transact=
ionError</span><span class=3D"p">,</span> <span class=3D"s">"query failed: =
row (%v): key does not match transaction key"</span><span class=3D"p">,</sp=
an> <span class=3D"n">row</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>There may also be other locals that can be extracted, especially if the
conditional is already repetitive:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">uid</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">user</span><span class=3D"o">.</span><span class=3D"n">GetUniqueUserID</s=
pan><span class=3D"p">()</span>
<span class=3D"k">if</span> <span class=3D"n">db</span><span class=3D"o">.<=
/span><span class=3D"n">UserIsAdmin</span><span class=3D"p">(</span><span c=
lass=3D"n">uid</span><span class=3D"p">)</span> <span class=3D"o">||</span>=
 <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">Use=
rHasPermission</span><span class=3D"p">(</span><span class=3D"n">uid</span>=
<span class=3D"p">,</span> <span class=3D"n">perms</span><span class=3D"o">=
.</span><span class=3D"n">ViewServerConfig</span><span class=3D"p">)</span>=
 <span class=3D"o">||</span> <span class=3D"n">db</span><span class=3D"o">.=
</span><span class=3D"n">UserHasPermission</span><span class=3D"p">(</span>=
<span class=3D"n">uid</span><span class=3D"p">,</span> <span class=3D"n">pe=
rms</span><span class=3D"o">.</span><span class=3D"n">CreateGroup</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">if</span> <span class=3D"n">db</span><span class=3D"o">.<=
/span><span class=3D"n">UserIsAdmin</span><span class=3D"p">(</span><span c=
lass=3D"n">user</span><span class=3D"o">.</span><span class=3D"n">GetUnique=
UserID</span><span class=3D"p">())</span> <span class=3D"o">||</span> <span=
 class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">UserHasPe=
rmission</span><span class=3D"p">(</span><span class=3D"n">user</span><span=
 class=3D"o">.</span><span class=3D"n">GetUniqueUserID</span><span class=3D=
"p">(),</span> <span class=3D"n">perms</span><span class=3D"o">.</span><spa=
n class=3D"n">ViewServerConfig</span><span class=3D"p">)</span> <span class=
=3D"o">||</span> <span class=3D"n">db</span><span class=3D"o">.</span><span=
 class=3D"n">UserHasPermission</span><span class=3D"p">(</span><span class=
=3D"n">user</span><span class=3D"o">.</span><span class=3D"n">GetUniqueUser=
ID</span><span class=3D"p">(),</span> <span class=3D"n">perms</span><span c=
lass=3D"o">.</span><span class=3D"n">CreateGroup</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><code class=3D"language-plaintext highlighter-rouge">if</code> statement=
s that contain closures or multi-line struct literals should
ensure that the <a href=3D"https://google.github.io/styleguide/go/decisions=
.html#literal-matching-braces">braces match</a> to avoid
<a href=3D"https://google.github.io/styleguide/go/decisions.html#indentatio=
n-confusion">indentation confusion</a>.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o">=
:=3D</span> <span class=3D"n">db</span><span class=3D"o">.</span><span clas=
s=3D"n">RunInTransaction</span><span class=3D"p">(</span><span class=3D"k">=
func</span><span class=3D"p">(</span><span class=3D"n">tx</span> <span clas=
s=3D"o">*</span><span class=3D"n">db</span><span class=3D"o">.</span><span =
class=3D"n">TX</span><span class=3D"p">)</span> <span class=3D"kt">error</s=
pan> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"n">tx</span><span class=
=3D"o">.</span><span class=3D"n">Execute</span><span class=3D"p">(</span><s=
pan class=3D"n">userUpdate</span><span class=3D"p">,</span> <span class=3D"=
n">x</span><span class=3D"p">,</span> <span class=3D"n">y</span><span class=
=3D"p">,</span> <span class=3D"n">z</span><span class=3D"p">)</span>
<span class=3D"p">});</span> <span class=3D"n">err</span> <span class=3D"o"=
>!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"s">"user update failed: %s"</span><span class=3D"p">,</span> <s=
pan class=3D"n">err</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">if</span> <span class=3D"n">_</span><span class=3D"p">,</=
span> <span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"n">client</span><span class=3D"o">.</span><span class=3D"n">Update</sp=
an><span class=3D"p">(</span><span class=3D"n">ctx</span><span class=3D"p">=
,</span> <span class=3D"o">&amp;</span><span class=3D"n">upb</span><span cl=
ass=3D"o">.</span><span class=3D"n">UserUpdateRequest</span><span class=3D"=
p">{</span>
    <span class=3D"n">ID</span><span class=3D"o">:</span>   <span class=3D"=
n">userID</span><span class=3D"p">,</span>
    <span class=3D"n">User</span><span class=3D"o">:</span> <span class=3D"=
n">user</span><span class=3D"p">,</span>
<span class=3D"p">});</span> <span class=3D"n">err</span> <span class=3D"o"=
>!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"s">"user update failed: %s"</span><span class=3D"p">,</span> <s=
pan class=3D"n">err</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Similarly, don=E2=80=99t try inserting artificial linebreaks into <code =
class=3D"language-plaintext highlighter-rouge">for</code> statements. You
can always let the line simply be long if there is no elegant way to refact=
or
it:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">for</span> <span class=3D"n">i</span><span class=3D"p">,<=
/span> <span class=3D"n">max</span> <span class=3D"o">:=3D</span> <span cla=
ss=3D"m">0</span><span class=3D"p">,</span> <span class=3D"n">collection</s=
pan><span class=3D"o">.</span><span class=3D"n">Size</span><span class=3D"p=
">();</span> <span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span=
 class=3D"n">max</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"=
o">!</span><span class=3D"n">collection</span><span class=3D"o">.</span><sp=
an class=3D"n">HasPendingWriters</span><span class=3D"p">();</span> <span c=
lass=3D"n">i</span><span class=3D"o">++</span> <span class=3D"p">{</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Often, though, there is:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">for</span> <span class=3D"n">i</span><span class=3D"p">,<=
/span> <span class=3D"n">max</span> <span class=3D"o">:=3D</span> <span cla=
ss=3D"m">0</span><span class=3D"p">,</span> <span class=3D"n">collection</s=
pan><span class=3D"o">.</span><span class=3D"n">Size</span><span class=3D"p=
">();</span> <span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span=
 class=3D"n">max</span><span class=3D"p">;</span> <span class=3D"n">i</span=
><span class=3D"o">++</span> <span class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"n">collection</span><span cl=
ass=3D"o">.</span><span class=3D"n">HasPendingWriters</span><span class=3D"=
p">()</span> <span class=3D"p">{</span>
        <span class=3D"k">break</span>
    <span class=3D"p">}</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><code class=3D"language-plaintext highlighter-rouge">switch</code> and <=
code class=3D"language-plaintext highlighter-rouge">case</code> statements =
should also remain on a single line.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">switch</span> <span class=3D"n">good</span> <span class=
=3D"o">:=3D</span> <span class=3D"n">db</span><span class=3D"o">.</span><sp=
an class=3D"n">TransactionStatus</span><span class=3D"p">();</span> <span c=
lass=3D"n">good</span> <span class=3D"p">{</span>
<span class=3D"k">case</span> <span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">TransactionStarting</span><span class=3D"p">,</sp=
an> <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionActive</span><span class=3D"p">,</span> <span class=3D"n">db</sp=
an><span class=3D"o">.</span><span class=3D"n">TransactionWaiting</span><sp=
an class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"k">case</span> <span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">TransactionCommitted</span><span class=3D"p">,</s=
pan> <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n"=
>NoTransaction</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"k">default</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">switch</span> <span class=3D"n">bad</span> <span class=3D=
"o">:=3D</span> <span class=3D"n">db</span><span class=3D"o">.</span><span =
class=3D"n">TransactionStatus</span><span class=3D"p">();</span> <span clas=
s=3D"n">bad</span> <span class=3D"p">{</span>
<span class=3D"k">case</span> <span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">TransactionStarting</span><span class=3D"p">,</sp=
an>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionActive</span><span class=3D"p">,</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionWaiting</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"k">case</span> <span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">TransactionCommitted</span><span class=3D"p">,</s=
pan>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
NoTransaction</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"k">default</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>If the line is excessively long, indent all cases and separate them with=
 a blank
line to avoid <a href=3D"https://google.github.io/styleguide/go/decisions.h=
tml#indentation-confusion">indentation confusion</a>:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">switch</span> <span class=3D"n">db</span><span class=3D"o=
">.</span><span class=3D"n">TransactionStatus</span><span class=3D"p">()</s=
pan> <span class=3D"p">{</span>
<span class=3D"k">case</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionStarting</span><span class=3D"p">,</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionActive</span><span class=3D"p">,</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionWaiting</span><span class=3D"p">,</span>
    <span class=3D"n">db</span><span class=3D"o">.</span><span class=3D"n">=
TransactionCommitted</span><span class=3D"o">:</span>

    <span class=3D"c">// ...</span>
<span class=3D"k">case</span> <span class=3D"n">db</span><span class=3D"o">=
.</span><span class=3D"n">NoTransaction</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"k">default</span><span class=3D"o">:</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>In conditionals comparing a variable to a constant, place the variable v=
alue on
the left hand side of the equality operator:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">if</span> <span class=3D"n">result</span> <span class=3D"=
o">=3D=3D</span> <span class=3D"s">"foo"</span> <span class=3D"p">{</span>
  <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Instead of the less clear phrasing where the constant comes first
(<a href=3D"https://en.wikipedia.org/wiki/Yoda_conditions">=E2=80=9CYoda st=
yle conditionals=E2=80=9D</a>):</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">if</span> <span class=3D"s">"foo"</span> <span class=3D"o=
">=3D=3D</span> <span class=3D"n">result</span> <span class=3D"p">{</span>
  <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"copying"></a></p>

<h3 id=3D"copying">Copying<a class=3D"anchorjs-link " href=3D"https://googl=
e.github.io/styleguide/go/decisions.html#copying" aria-label=3D"Anchor" dat=
a-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; paddin=
g-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Copying"></a></p>

<p>To avoid unexpected aliasing and similar bugs, be careful when copying a=
 struct
from another package. For example, synchronization objects such as <code cl=
ass=3D"language-plaintext highlighter-rouge">sync.Mutex</code>
must not be copied.</p>

<p>The <code class=3D"language-plaintext highlighter-rouge">bytes.Buffer</c=
ode> type contains a <code class=3D"language-plaintext highlighter-rouge">[=
]byte</code> slice and, as an optimization for
small strings, a small byte array to which the slice may refer. If you copy=
 a
<code class=3D"language-plaintext highlighter-rouge">Buffer</code>, the sli=
ce in the copy may alias the array in the original, causing
subsequent method calls to have surprising effects.</p>

<p>In general, do not copy a value of type <code class=3D"language-plaintex=
t highlighter-rouge">T</code> if its methods are associated with
the pointer type, <code class=3D"language-plaintext highlighter-rouge">*T</=
code>.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">b1</span> <span class=3D"o">:=3D</span> <span class=3D"n"=
>bytes</span><span class=3D"o">.</span><span class=3D"n">Buffer</span><span=
 class=3D"p">{}</span>
<span class=3D"n">b2</span> <span class=3D"o">:=3D</span> <span class=3D"n"=
>b1</span>
</code></pre></div></div>

<p>Invoking a method that takes a value receiver can hide the copy. When yo=
u author
an API, you should generally take and return pointer types if your structs
contain fields that should not be copied.</p>

<p>These are acceptable:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">Record</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
  <span class=3D"n">buf</span> <span class=3D"n">bytes</span><span class=3D=
"o">.</span><span class=3D"n">Buffer</span>
  <span class=3D"c">// other fields omitted</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">New</span><span class=3D"p"=
>()</span> <span class=3D"o">*</span><span class=3D"n">Record</span> <span =
class=3D"p">{</span><span class=3D"o">...</span><span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">r=
</span> <span class=3D"o">*</span><span class=3D"n">Record</span><span clas=
s=3D"p">)</span> <span class=3D"n">Process</span><span class=3D"p">(</span>=
<span class=3D"o">...</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span><span class=3D"o">...</span><span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">Consumer</span><span class=
=3D"p">(</span><span class=3D"n">r</span> <span class=3D"o">*</span><span c=
lass=3D"n">Record</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n><span class=3D"o">...</span><span class=3D"p">}</span>
</code></pre></div></div>

<p>But these are usually wrong:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">type</span> <span class=3D"n">Record</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
  <span class=3D"n">buf</span> <span class=3D"n">bytes</span><span class=3D=
"o">.</span><span class=3D"n">Buffer</span>
  <span class=3D"c">// other fields omitted</span>
<span class=3D"p">}</span>


<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">r=
</span> <span class=3D"n">Record</span><span class=3D"p">)</span> <span cla=
ss=3D"n">Process</span><span class=3D"p">(</span><span class=3D"o">...</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span><span class=3D"o">..=
.</span><span class=3D"p">}</span> <span class=3D"c">// Makes a copy of r.b=
uf</span>

<span class=3D"k">func</span> <span class=3D"n">Consumer</span><span class=
=3D"p">(</span><span class=3D"n">r</span> <span class=3D"n">Record</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span><span class=3D"o">...</s=
pan><span class=3D"p">}</span> <span class=3D"c">// Makes a copy of r.buf</=
span>
</code></pre></div></div>

<p>This guidance also applies to copying <code class=3D"language-plaintext =
highlighter-rouge">sync.Mutex</code>.</p>

<p><a id=3D"dont-panic"></a></p>

<h3 id=3D"dont-panic">Don=E2=80=99t panic<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#dont-panic" aria-=
label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 an=
chorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Don-t-Panic"></a></p>

<p>Do not use <code class=3D"language-plaintext highlighter-rouge">panic</c=
ode> for normal error handling. Instead, use <code class=3D"language-plaint=
ext highlighter-rouge">error</code> and multiple
return values. See the <a href=3D"http://golang.org/doc/effective_go.html#e=
rrors">Effective Go section on errors</a>.</p>

<p>Within <code class=3D"language-plaintext highlighter-rouge">package main=
</code> and initialization code, consider <a href=3D"https://pkg.go.dev/git=
hub.com/golang/glog#Exit"><code class=3D"language-plaintext highlighter-rou=
ge">log.Exit</code></a> for errors
that should terminate the program (e.g., invalid configuration), as in many=
 of
these cases a stack trace will not help the reader. Please note that
<a href=3D"https://pkg.go.dev/github.com/golang/glog#Exit"><code class=3D"l=
anguage-plaintext highlighter-rouge">log.Exit</code></a> calls <a href=3D"h=
ttps://pkg.go.dev/os#Exit"><code class=3D"language-plaintext highlighter-ro=
uge">os.Exit</code></a> and any deferred functions will not be run.</p>

<p>For errors that indicate =E2=80=9Cimpossible=E2=80=9D conditions, namely=
 bugs that should always
be caught during code review and/or testing, a function may reasonably retu=
rn an
error or call <a href=3D"https://pkg.go.dev/github.com/golang/glog#Fatal"><=
code class=3D"language-plaintext highlighter-rouge">log.Fatal</code></a>.</=
p>

<p>Also see <a href=3D"https://google.github.io/styleguide/go/best-practice=
s.html#when-to-panic">when panic is acceptable</a>.</p>

<p><strong>Note:</strong> <code class=3D"language-plaintext highlighter-rou=
ge">log.Fatalf</code> is not the standard library log. See [#logging].</p>

<p><a id=3D"must-functions"></a></p>

<h3 id=3D"must-functions">Must functions<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#must-functions" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Setup helper functions that stop the program on failure follow the namin=
g
convention <code class=3D"language-plaintext highlighter-rouge">MustXYZ</co=
de> (or <code class=3D"language-plaintext highlighter-rouge">mustXYZ</code>=
). In general, they should only be called
early on program startup, not on things like user input where normal Go err=
or
handling is preferred.</p>

<p>This often comes up for functions called to initialize package-level var=
iables
exclusively at
<a href=3D"https://golang.org/ref/spec#Package_initialization">package init=
ialization time</a>
(e.g. <a href=3D"https://golang.org/pkg/text/template/#Must">template.Must<=
/a> and
<a href=3D"https://golang.org/pkg/regexp/#MustCompile">regexp.MustCompile</=
a>).</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">MustParse</span><span class=
=3D"p">(</span><span class=3D"n">version</span> <span class=3D"kt">string</=
span><span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"n"=
>Version</span> <span class=3D"p">{</span>
    <span class=3D"n">v</span><span class=3D"p">,</span> <span class=3D"n">=
err</span> <span class=3D"o">:=3D</span> <span class=3D"n">Parse</span><spa=
n class=3D"p">(</span><span class=3D"n">version</span><span class=3D"p">)</=
span>
    <span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D=
"o">!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"nb">panic</span><span class=3D"p">(</span><span clas=
s=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Sprintf</span=
><span class=3D"p">(</span><span class=3D"s">"MustParse(%q) =3D _, %v"</spa=
n><span class=3D"p">,</span> <span class=3D"n">version</span><span class=3D=
"p">,</span> <span class=3D"n">err</span><span class=3D"p">))</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"n">v</span>
<span class=3D"p">}</span>

<span class=3D"c">// Package level "constant". If we wanted to use `Parse`,=
 we would have had to</span>
<span class=3D"c">// set the value in `init`.</span>
<span class=3D"k">var</span> <span class=3D"n">DefaultVersion</span> <span =
class=3D"o">=3D</span> <span class=3D"n">MustParse</span><span class=3D"p">=
(</span><span class=3D"s">"1.2.3"</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>The same convention may be used in test helpers that only stop the curre=
nt test
(using <code class=3D"language-plaintext highlighter-rouge">t.Fatal</code>)=
. Such helpers are often convenient in creating test values,
for example in struct fields of <a href=3D"https://google.github.io/stylegu=
ide/go/decisions.html#table-driven-tests">table driven tests</a>, as
functions that return errors cannot be directly assigned to a struct field.=
</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">mustMarshalAny</span><span =
class=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><s=
pan class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T=
</span><span class=3D"p">,</span> <span class=3D"n">m</span> <span class=3D=
"n">proto</span><span class=3D"o">.</span><span class=3D"n">Message</span><=
span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"n">anypb=
</span><span class=3D"o">.</span><span class=3D"n">Any</span> <span class=
=3D"p">{</span>
  <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Hel=
per</span><span class=3D"p">()</span>
  <span class=3D"n">any</span><span class=3D"p">,</span> <span class=3D"n">=
err</span> <span class=3D"o">:=3D</span> <span class=3D"n">anypb</span><spa=
n class=3D"o">.</span><span class=3D"n">New</span><span class=3D"p">(</span=
><span class=3D"n">m</span><span class=3D"p">)</span>
  <span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o=
">!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">F=
atalf</span><span class=3D"p">(</span><span class=3D"s">"mustMarshalAny(t, =
m) =3D %v; want %v"</span><span class=3D"p">,</span> <span class=3D"n">err<=
/span><span class=3D"p">,</span> <span class=3D"no">nil</span><span class=
=3D"p">)</span>
  <span class=3D"p">}</span>
  <span class=3D"k">return</span> <span class=3D"n">any</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">TestCreateObject</span><spa=
n class=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span>=
<span class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n"=
>T</span><span class=3D"p">)</span> <span class=3D"p">{</span>
  <span class=3D"n">tests</span> <span class=3D"o">:=3D</span> <span class=
=3D"p">[]</span><span class=3D"k">struct</span><span class=3D"p">{</span>
    <span class=3D"n">desc</span> <span class=3D"kt">string</span>
    <span class=3D"n">data</span> <span class=3D"o">*</span><span class=3D"=
n">anypb</span><span class=3D"o">.</span><span class=3D"n">Any</span>
  <span class=3D"p">}{</span>
    <span class=3D"p">{</span>
      <span class=3D"n">desc</span><span class=3D"o">:</span> <span class=
=3D"s">"my test case"</span><span class=3D"p">,</span>
      <span class=3D"c">// Creating values directly within table driven tes=
t cases.</span>
      <span class=3D"n">data</span><span class=3D"o">:</span> <span class=
=3D"n">mustMarshalAny</span><span class=3D"p">(</span><span class=3D"n">t</=
span><span class=3D"p">,</span> <span class=3D"n">mypb</span><span class=3D=
"o">.</span><span class=3D"n">Object</span><span class=3D"p">{}),</span>
    <span class=3D"p">},</span>
    <span class=3D"c">// ...</span>
  <span class=3D"p">}</span>
  <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>In both of these cases, the value of this pattern is that the helpers ca=
n be
called in a =E2=80=9Cvalue=E2=80=9D context. These helpers should not be ca=
lled in places where
it=E2=80=99s difficult to ensure an error would be caught or in a context w=
here an error
should be <a href=3D"https://google.github.io/styleguide/go/decisions.html#=
handle-errors">checked</a> (e.g., in many request handlers). For
constant inputs, this allows tests to easily ensure that the <code class=3D=
"language-plaintext highlighter-rouge">Must</code> arguments
are well-formed, and for non-constant inputs it permits tests to validate t=
hat
errors are <a href=3D"https://google.github.io/styleguide/go/best-practices=
#error-handling">properly handled or propagated</a>.</p>

<p>Where <code class=3D"language-plaintext highlighter-rouge">Must</code> f=
unctions are used in a test, they should generally be
<a href=3D"https://google.github.io/styleguide/go/decisions.html#mark-test-=
helpers">marked as a test helper</a> and call <code class=3D"language-plain=
text highlighter-rouge">t.Fatal</code> on error (see
<a href=3D"https://google.github.io/styleguide/go/best-practices#test-helpe=
r-error-handling">error handling in test helpers</a> for
more considerations of using that).</p>

<p>They should not be used when
<a href=3D"https://google.github.io/styleguide/go/best-practices#error-hand=
ling">ordinary error handling</a> is possible (including
with some refactoring):</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"n">Version</span><span class=
=3D"p">(</span><span class=3D"n">o</span> <span class=3D"o">*</span><span c=
lass=3D"n">servicepb</span><span class=3D"o">.</span><span class=3D"n">Obje=
ct</span><span class=3D"p">)</span> <span class=3D"p">(</span><span class=
=3D"o">*</span><span class=3D"n">version</span><span class=3D"o">.</span><s=
pan class=3D"n">Version</span><span class=3D"p">,</span> <span class=3D"kt"=
>error</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"c">// Return error instead of using Must functions.</spa=
n>
    <span class=3D"n">v</span> <span class=3D"o">:=3D</span> <span class=3D=
"n">version</span><span class=3D"o">.</span><span class=3D"n">MustParse</sp=
an><span class=3D"p">(</span><span class=3D"n">o</span><span class=3D"o">.<=
/span><span class=3D"n">GetVersionString</span><span class=3D"p">())</span>
    <span class=3D"k">return</span> <span class=3D"n">dealiasVersion</span>=
<span class=3D"p">(</span><span class=3D"n">v</span><span class=3D"p">)</sp=
an>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"goroutine-lifetimes"></a></p>

<h3 id=3D"goroutine-lifetimes">Goroutine lifetimes<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#goroutine-=
lifetimes" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-GoroutineLifetimes"></a></p>

<p>When you spawn goroutines, make it clear when or whether they exit.</p>

<p>Goroutines can leak by blocking on channel sends or receives. The garbag=
e
collector will not terminate a goroutine blocked on a channel even if no ot=
her
goroutine has a reference to the channel.</p>

<p>Even when goroutines do not leak, leaving them in-flight when they are n=
o longer
needed can cause other subtle and hard-to-diagnose problems. Sending on a
channel that has been closed causes a panic.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">ch</span> <span class=3D"o">:=3D</span> <span class=3D"nb=
">make</span><span class=3D"p">(</span><span class=3D"k">chan</span> <span =
class=3D"kt">int</span><span class=3D"p">)</span>
<span class=3D"n">ch</span> <span class=3D"o">&lt;-</span> <span class=3D"m=
">42</span>
<span class=3D"nb">close</span><span class=3D"p">(</span><span class=3D"n">=
ch</span><span class=3D"p">)</span>
<span class=3D"n">ch</span> <span class=3D"o">&lt;-</span> <span class=3D"m=
">13</span> <span class=3D"c">// panic</span>
</code></pre></div></div>

<p>Modifying still-in-use inputs =E2=80=9Cafter the result isn=E2=80=99t ne=
eded=E2=80=9D can lead to data
races. Leaving goroutines in-flight for arbitrarily long can lead to
unpredictable memory usage.</p>

<p>Concurrent code should be written such that the goroutine lifetimes are =
obvious.
Typically this will mean keeping synchronization-related code constrained w=
ithin
the scope of a function and factoring out the logic into
<a href=3D"https://google.github.io/styleguide/go/decisions.html#synchronou=
s-functions">synchronous functions</a>. If the concurrency is still not obv=
ious, it is
important to document when and why the goroutines exit.</p>

<p>Code that follows best practices around context usage often helps make t=
his
clear. It is conventionally managed with a <code class=3D"language-plaintex=
t highlighter-rouge">context.Context</code>:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">w=
</span> <span class=3D"o">*</span><span class=3D"n">Worker</span><span clas=
s=3D"p">)</span> <span class=3D"n">Run</span><span class=3D"p">(</span><spa=
n class=3D"n">ctx</span> <span class=3D"n">context</span><span class=3D"o">=
.</span><span class=3D"n">Context</span><span class=3D"p">)</span> <span cl=
ass=3D"kt">error</span> <span class=3D"p">{</span>
    <span class=3D"k">var</span> <span class=3D"n">wg</span> <span class=3D=
"n">sync</span><span class=3D"o">.</span><span class=3D"n">WaitGroup</span>
    <span class=3D"c">// ...</span>
    <span class=3D"k">for</span> <span class=3D"n">item</span> <span class=
=3D"o">:=3D</span> <span class=3D"k">range</span> <span class=3D"n">w</span=
><span class=3D"o">.</span><span class=3D"n">q</span> <span class=3D"p">{</=
span>
        <span class=3D"c">// process returns at latest when the context is =
cancelled.</span>
        <span class=3D"n">wg</span><span class=3D"o">.</span><span class=3D=
"n">Add</span><span class=3D"p">(</span><span class=3D"m">1</span><span cla=
ss=3D"p">)</span>
        <span class=3D"k">go</span> <span class=3D"k">func</span><span clas=
s=3D"p">()</span> <span class=3D"p">{</span>
            <span class=3D"k">defer</span> <span class=3D"n">wg</span><span=
 class=3D"o">.</span><span class=3D"n">Done</span><span class=3D"p">()</spa=
n>
            <span class=3D"n">process</span><span class=3D"p">(</span><span=
 class=3D"n">ctx</span><span class=3D"p">,</span> <span class=3D"n">item</s=
pan><span class=3D"p">)</span>
        <span class=3D"p">}()</span>
    <span class=3D"p">}</span>
    <span class=3D"c">// ...</span>
    <span class=3D"n">wg</span><span class=3D"o">.</span><span class=3D"n">=
Wait</span><span class=3D"p">()</span>  <span class=3D"c">// Prevent spawne=
d goroutines from outliving this function.</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>There are other variants of the above that use raw signal channels like =
<code class=3D"language-plaintext highlighter-rouge">chan
struct{}</code>, synchronized variables, <a href=3D"https://drive.google.co=
m/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcAN/view">condition variables</a>, a=
nd
more. The important part is that the goroutine=E2=80=99s end is evident for=
 subsequent
maintainers.</p>

<p>In contrast, the following code is careless about when its spawned gorou=
tines
finish:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">w=
</span> <span class=3D"o">*</span><span class=3D"n">Worker</span><span clas=
s=3D"p">)</span> <span class=3D"n">Run</span><span class=3D"p">()</span> <s=
pan class=3D"p">{</span>
    <span class=3D"c">// ...</span>
    <span class=3D"k">for</span> <span class=3D"n">item</span> <span class=
=3D"o">:=3D</span> <span class=3D"k">range</span> <span class=3D"n">w</span=
><span class=3D"o">.</span><span class=3D"n">q</span> <span class=3D"p">{</=
span>
        <span class=3D"c">// process returns when it finishes, if ever, pos=
sibly not cleanly</span>
        <span class=3D"c">// handling a state transition or termination of =
the Go program itself.</span>
        <span class=3D"k">go</span> <span class=3D"n">process</span><span c=
lass=3D"p">(</span><span class=3D"n">item</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"c">// ...</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>This code may look OK, but there are several underlying problems:</p>

<ul>
  <li>
    <p>The code probably has undefined behavior in production, and the prog=
ram may
not terminate cleanly, even if the operating system releases the resources.=
</p>
  </li>
  <li>
    <p>The code is difficult to test meaningfully due to the code=E2=80=99s=
 indeterminate
lifecycle.</p>
  </li>
  <li>
    <p>The code may leak resources as described above.</p>
  </li>
</ul>

<p>See also:</p>

<ul>
  <li><a href=3D"https://dave.cheney.net/2016/12/22/never-start-a-goroutine=
-without-knowing-how-it-will-stop">Never start a goroutine without knowing =
how it will stop</a></li>
  <li>Rethinking Classical Concurrency Patterns: <a href=3D"https://drive.g=
oogle.com/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcAN/view">slides</a>,
<a href=3D"https://www.youtube.com/watch?v=3D5zXAHh5tJqQ">video</a></li>
  <li><a href=3D"https://changelog.com/gotime/165">When Go programs end</a>=
</li>
  <li><a href=3D"https://google.github.io/styleguide/go/best-practices.html=
#documentation-conventions-contexts">Documentation Conventions: Contexts</a=
></li>
</ul>

<p><a id=3D"interfaces"></a></p>

<h3 id=3D"interfaces">Interfaces<a class=3D"anchorjs-link " href=3D"https:/=
/google.github.io/styleguide/go/decisions.html#interfaces" aria-label=3D"An=
chor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icon=
s; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Interfaces"></a></p>

<p>Go interfaces generally belong in the package that <em>consumes</em> val=
ues of the
interface type, not a package that <em>implements</em> the interface type. =
The
implementing package should return concrete (usually pointer or struct) typ=
es.
That way, new methods can be added to implementations without requiring
extensive refactoring. See <a href=3D"https://google.github.io/styleguide/g=
o/index.html#gotip">GoTip #49: Accept Interfaces, Return Concrete Types</a>
for more details.</p>

<p>Do not export a <a href=3D"https://abseil.io/resources/swe-book/html/ch1=
3.html#techniques_for_using_test_doubles">test double</a> implementation of=
 an interface from
an API that consumes it. Instead, design the API so that it can be tested u=
sing
the <a href=3D"https://abseil.io/resources/swe-book/html/ch12.html#test_via=
_public_apis">public API</a> of the <a href=3D"https://google.github.io/sty=
leguide/go/best-practices#use-real-transports">real implementation</a>. See
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
42: Authoring a Stub for Testing</a> for more details. Even when it is not
feasible to use the real implementation, it may not be necessary to introdu=
ce an
interface fully covering all methods in the real type; the consumer can cre=
ate
an interface containing only the methods it needs, as demonstrated in
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
78: Minimal Viable Interfaces</a>.</p>

<p>To test packages that use Stubby RPC clients, use a real client connecti=
on. If a
real server cannot be run in the test, Google=E2=80=99s internal practice i=
s to obtain a
real client connection to a local <a href=3D"https://abseil.io/resources/sw=
e-book/html/ch13.html#basic_concepts">test double</a> using the internal rp=
ctest
package (coming soon!).</p>

<p>Do not define interfaces before they are used (see
<a href=3D"https://testing.googleblog.com/2017/08/code-health-eliminate-yag=
ni-smells.html">TotT: Code Health: Eliminate YAGNI Smells</a> ). Without a =
realistic
example of usage, it is too difficult to see whether an interface is even
necessary, let alone what methods it should contain.</p>

<p>Do not use interface-typed parameters if the users of the package do not=
 need to
pass different types for them.</p>

<p>Do not export interfaces that the users of the package do not need.</p>

<p><strong>TODO:</strong> Write a more in-depth doc on interfaces and link =
to it here.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">consumer</span> <span cl=
ass=3D"c">// consumer.go</span>

<span class=3D"k">type</span> <span class=3D"n">Thinger</span> <span class=
=3D"k">interface</span> <span class=3D"p">{</span> <span class=3D"n">Thing<=
/span><span class=3D"p">()</span> <span class=3D"kt">bool</span> <span clas=
s=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">Foo</span><span class=3D"p"=
>(</span><span class=3D"n">t</span> <span class=3D"n">Thinger</span><span c=
lass=3D"p">)</span> <span class=3D"kt">string</span> <span class=3D"p">{</s=
pan> <span class=3D"o">...</span> <span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">consumer</span> <span cl=
ass=3D"c">// consumer_test.go</span>

<span class=3D"k">type</span> <span class=3D"n">fakeThinger</span> <span cl=
ass=3D"k">struct</span><span class=3D"p">{</span> <span class=3D"o">...</sp=
an> <span class=3D"p">}</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">t=
</span> <span class=3D"n">fakeThinger</span><span class=3D"p">)</span> <spa=
n class=3D"n">Thing</span><span class=3D"p">()</span> <span class=3D"kt">bo=
ol</span> <span class=3D"p">{</span> <span class=3D"o">...</span> <span cla=
ss=3D"p">}</span>
<span class=3D"o">...</span>
<span class=3D"k">if</span> <span class=3D"n">Foo</span><span class=3D"p">(=
</span><span class=3D"n">fakeThinger</span><span class=3D"p">{</span><span =
class=3D"o">...</span><span class=3D"p">})</span> <span class=3D"o">=3D=3D<=
/span> <span class=3D"s">"x"</span> <span class=3D"p">{</span> <span class=
=3D"o">...</span> <span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">package</span> <span class=3D"n">producer</span>

<span class=3D"k">type</span> <span class=3D"n">Thinger</span> <span class=
=3D"k">interface</span> <span class=3D"p">{</span> <span class=3D"n">Thing<=
/span><span class=3D"p">()</span> <span class=3D"kt">bool</span> <span clas=
s=3D"p">}</span>

<span class=3D"k">type</span> <span class=3D"n">defaultThinger</span> <span=
 class=3D"k">struct</span><span class=3D"p">{</span> <span class=3D"o">...<=
/span> <span class=3D"p">}</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">t=
</span> <span class=3D"n">defaultThinger</span><span class=3D"p">)</span> <=
span class=3D"n">Thing</span><span class=3D"p">()</span> <span class=3D"kt"=
>bool</span> <span class=3D"p">{</span> <span class=3D"o">...</span> <span =
class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">NewThinger</span><span clas=
s=3D"p">()</span> <span class=3D"n">Thinger</span> <span class=3D"p">{</spa=
n> <span class=3D"k">return</span> <span class=3D"n">defaultThinger</span><=
span class=3D"p">{</span> <span class=3D"o">...</span> <span class=3D"p">}<=
/span> <span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">producer</span>

<span class=3D"k">type</span> <span class=3D"n">Thinger</span> <span class=
=3D"k">struct</span><span class=3D"p">{</span> <span class=3D"o">...</span>=
 <span class=3D"p">}</span>
<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">t=
</span> <span class=3D"n">Thinger</span><span class=3D"p">)</span> <span cl=
ass=3D"n">Thing</span><span class=3D"p">()</span> <span class=3D"kt">bool</=
span> <span class=3D"p">{</span> <span class=3D"o">...</span> <span class=
=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">NewThinger</span><span clas=
s=3D"p">()</span> <span class=3D"n">Thinger</span> <span class=3D"p">{</spa=
n> <span class=3D"k">return</span> <span class=3D"n">Thinger</span><span cl=
ass=3D"p">{</span> <span class=3D"o">...</span> <span class=3D"p">}</span> =
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"generics"></a></p>

<h3 id=3D"generics">Generics<a class=3D"anchorjs-link " href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#generics" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h3>

<p>Generics (formally called =E2=80=9C<a href=3D"https://go.dev/design/4365=
1-type-parameters">Type Parameters</a>=E2=80=9D) are allowed where they ful=
fill
your business requirements. In many applications, a conventional approach u=
sing
existing language features (slices, maps, interfaces, and so on) works just=
 as
well without the added complexity, so be wary of premature use. See the
discussion on <a href=3D"https://google.github.io/styleguide/go/guide#least=
-mechanism">least mechanism</a>.</p>

<p>When introducing an exported API that uses generics, make sure it is sui=
tably
documented. It=E2=80=99s highly encouraged to include motivating runnable <=
a href=3D"https://google.github.io/styleguide/go/decisions.html#examples">e=
xamples</a>.</p>

<p>Do not use generics just because you are implementing an algorithm or da=
ta
structure that does not care about the type of its member elements. If ther=
e is
only one type being instantiated in practice, start by making your code wor=
k on
that type without using generics at all. Adding polymorphism later will be
straightforward compared to removing abstraction that is found to be
unnecessary.</p>

<p>Do not use generics to invent domain-specific languages (DSLs). In parti=
cular,
refrain from introducing error-handling frameworks that might put a signifi=
cant
burden on readers. Instead prefer established <a href=3D"https://google.git=
hub.io/styleguide/go/decisions.html#errors">error handling</a>
practices. For testing, be especially wary of introducing
<a href=3D"https://google.github.io/styleguide/go/decisions.html#assert">as=
sertion libraries</a> or frameworks that result in less useful
<a href=3D"https://google.github.io/styleguide/go/decisions.html#useful-tes=
t-failures">test failures</a>.</p>

<p>In general:</p>

<ul>
  <li><a href=3D"https://www.youtube.com/watch?v=3DPa_e9EeCdy8&amp;t=3D1250=
s">Write code, don=E2=80=99t design types</a>. From a GopherCon talk by Rob=
ert Griesemer
and Ian Lance Taylor.</li>
  <li>If you have several types that share a useful unifying interface, con=
sider
modeling the solution using that interface. Generics may not be needed.</li=
>
  <li>Otherwise, instead of relying on the <code class=3D"language-plaintex=
t highlighter-rouge">any</code> type and excessive
<a href=3D"https://tour.golang.org/methods/16">type switching</a>, consider=
 generics.</li>
</ul>

<p>See also:</p>

<ul>
  <li>
    <p><a href=3D"https://www.youtube.com/watch?v=3Dnr8EpUO9jhw">Using Gene=
rics in Go</a>, talk by Ian Lance Taylor</p>
  </li>
  <li>
    <p><a href=3D"https://go.dev/doc/tutorial/generics">Generics tutorial</=
a> on Go=E2=80=99s webpage</p>
  </li>
</ul>

<p><a id=3D"pass-values"></a></p>

<h3 id=3D"pass-values">Pass values<a class=3D"anchorjs-link " href=3D"https=
://google.github.io/styleguide/go/decisions.html#pass-values" aria-label=3D=
"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-i=
cons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-PassValues"></a></p>

<p>Do not pass pointers as function arguments just to save a few bytes. If =
a
function reads its argument <code class=3D"language-plaintext highlighter-r=
ouge">x</code> only as <code class=3D"language-plaintext highlighter-rouge"=
>*x</code> throughout, then the argument
shouldn=E2=80=99t be a pointer. Common instances of this include passing a =
pointer to a
string (<code class=3D"language-plaintext highlighter-rouge">*string</code>=
) or a pointer to an interface value (<code class=3D"language-plaintext hig=
hlighter-rouge">*io.Reader</code>). In both
cases, the value itself is a fixed size and can be passed directly.</p>

<p>This advice does not apply to large structs, or even small structs that =
may
increase in size. In particular, protocol buffer messages should generally =
be
handled by pointer rather than by value. The pointer type satisfies the
<code class=3D"language-plaintext highlighter-rouge">proto.Message</code> i=
nterface (accepted by <code class=3D"language-plaintext highlighter-rouge">=
proto.Marshal</code>, <code class=3D"language-plaintext highlighter-rouge">=
protocmp.Transform</code>,
etc.), and protocol buffer messages can be quite large and often grow large=
r
over time.</p>

<p><a id=3D"receiver-type"></a></p>

<h3 id=3D"receiver-type">Receiver type<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#receiver-type" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-ReceiverType"></a></p>

<p>A <a href=3D"https://golang.org/ref/spec#Method_declarations">method rec=
eiver</a> can be passed either as a value or a pointer, just as if it
were a regular function parameter. The choice between the two is based on w=
hich
<a href=3D"https://golang.org/ref/spec#Method_sets">method set(s)</a> the m=
ethod should be a part of.</p>

<p><strong>Correctness wins over speed or simplicity.</strong> There are ca=
ses where you must
use a pointer value. In other cases, pick pointers for large types or as
future-proofing if you don=E2=80=99t have a good sense of how the code will=
 grow, and
use values for simple <a href=3D"https://en.wikipedia.org/wiki/Passive_data=
_structure">plain old data</a>.</p>

<p>The list below spells out each case in further detail:</p>

<ul>
  <li>
    <p>If the receiver is a slice and the method doesn=E2=80=99t reslice or=
 reallocate the
slice, use a value rather than a pointer.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">Buffer</span> <span class=
=3D"p">[]</span><span class=3D"kt">byte</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">b=
</span> <span class=3D"n">Buffer</span><span class=3D"p">)</span> <span cla=
ss=3D"n">Len</span><span class=3D"p">()</span> <span class=3D"kt">int</span=
> <span class=3D"p">{</span> <span class=3D"k">return</span> <span class=3D=
"nb">len</span><span class=3D"p">(</span><span class=3D"n">b</span><span cl=
ass=3D"p">)</span> <span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If the method needs to mutate the receiver, the receiver must be a p=
ointer.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">Counter</span> <span class=
=3D"kt">int</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">c=
</span> <span class=3D"o">*</span><span class=3D"n">Counter</span><span cla=
ss=3D"p">)</span> <span class=3D"n">Inc</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> <span class=3D"o">*</span><span class=3D"n">c</sp=
an><span class=3D"o">++</span> <span class=3D"p">}</span>

<span class=3D"c">// See https://pkg.go.dev/container/heap.</span>
<span class=3D"k">type</span> <span class=3D"n">Queue</span> <span class=3D=
"p">[]</span><span class=3D"n">Item</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">q=
</span> <span class=3D"o">*</span><span class=3D"n">Queue</span><span class=
=3D"p">)</span> <span class=3D"n">Push</span><span class=3D"p">(</span><spa=
n class=3D"n">x</span> <span class=3D"n">Item</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span> <span class=3D"o">*</span><span class=3D"n">=
q</span> <span class=3D"o">=3D</span> <span class=3D"nb">append</span><span=
 class=3D"p">([]</span><span class=3D"n">Item</span><span class=3D"p">{</sp=
an><span class=3D"n">x</span><span class=3D"p">},</span> <span class=3D"o">=
*</span><span class=3D"n">q</span><span class=3D"o">...</span><span class=
=3D"p">)</span> <span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If the receiver is a struct containing fields that
<a href=3D"https://google.github.io/styleguide/go/decisions.html#copying">c=
annot safely be copied</a>, use a pointer receiver. Common examples
are <a href=3D"https://pkg.go.dev/sync#Mutex"><code class=3D"language-plain=
text highlighter-rouge">sync.Mutex</code></a> and other synchronization typ=
es.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">Counter</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"n">mu</span>    <span class=3D"n">sync</span><span class=
=3D"o">.</span><span class=3D"n">Mutex</span>
    <span class=3D"n">total</span> <span class=3D"kt">int</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">c=
</span> <span class=3D"o">*</span><span class=3D"n">Counter</span><span cla=
ss=3D"p">)</span> <span class=3D"n">Inc</span><span class=3D"p">()</span> <=
span class=3D"p">{</span>
    <span class=3D"n">c</span><span class=3D"o">.</span><span class=3D"n">m=
u</span><span class=3D"o">.</span><span class=3D"n">Lock</span><span class=
=3D"p">()</span>
    <span class=3D"k">defer</span> <span class=3D"n">c</span><span class=3D=
"o">.</span><span class=3D"n">mu</span><span class=3D"o">.</span><span clas=
s=3D"n">Unlock</span><span class=3D"p">()</span>
    <span class=3D"n">c</span><span class=3D"o">.</span><span class=3D"n">t=
otal</span><span class=3D"o">++</span>
<span class=3D"p">}</span>
</code></pre></div>    </div>

    <p><strong>Tip:</strong> Check the type=E2=80=99s <a href=3D"https://pk=
g.go.dev/time#example-Duration">Godoc</a> for information about whether it =
is safe
or unsafe to copy.</p>
  </li>
  <li>
    <p>If the receiver is a =E2=80=9Clarge=E2=80=9D struct or array, a poin=
ter receiver may be more
efficient. Passing a struct is equivalent to passing all of its fields or
elements as arguments to the method. If that seems too large to
<a href=3D"https://google.github.io/styleguide/go/decisions.html#pass-value=
s">pass by value</a>, a pointer is a good choice.</p>
  </li>
  <li>
    <p>For methods that will call or run concurrently with other functions =
that
modify the receiver, use a value if those modifications should not be
visible to your method; otherwise use a pointer.</p>
  </li>
  <li>
    <p>If the receiver is a struct or array, any of whose elements is a poi=
nter to
something that may be mutated, prefer a pointer receiver to make the
intention of mutability clear to the reader.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">Counter</span> <span class=
=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"n">m</span> <span class=3D"o">*</span><span class=3D"n">=
Metric</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">c=
</span> <span class=3D"o">*</span><span class=3D"n">Counter</span><span cla=
ss=3D"p">)</span> <span class=3D"n">Inc</span><span class=3D"p">()</span> <=
span class=3D"p">{</span>
    <span class=3D"n">c</span><span class=3D"o">.</span><span class=3D"n">m=
</span><span class=3D"o">.</span><span class=3D"n">Add</span><span class=3D=
"p">(</span><span class=3D"m">1</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If the receiver is a <a href=3D"https://pkg.go.dev/builtin">built-in=
 type</a>, such as an integer or a string, that
does not need to be modified, use a value.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">User</span> <span class=3D"=
kt">string</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">u=
</span> <span class=3D"n">User</span><span class=3D"p">)</span> <span class=
=3D"n">String</span><span class=3D"p">()</span> <span class=3D"p">{</span> =
<span class=3D"k">return</span> <span class=3D"kt">string</span><span class=
=3D"p">(</span><span class=3D"n">u</span><span class=3D"p">)</span> <span c=
lass=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If the receiver is a map, function, or channel, use a value rather t=
han a
pointer.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// See https://pkg.go.dev/net/http#Header.</span>
<span class=3D"k">type</span> <span class=3D"n">Header</span> <span class=
=3D"k">map</span><span class=3D"p">[</span><span class=3D"kt">string</span>=
<span class=3D"p">][]</span><span class=3D"kt">string</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">h=
</span> <span class=3D"n">Header</span><span class=3D"p">)</span> <span cla=
ss=3D"n">Add</span><span class=3D"p">(</span><span class=3D"n">key</span><s=
pan class=3D"p">,</span> <span class=3D"n">value</span> <span class=3D"kt">=
string</span><span class=3D"p">)</span> <span class=3D"p">{</span> <span cl=
ass=3D"c">/* omitted */</span> <span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If the receiver is a =E2=80=9Csmall=E2=80=9D array or struct that is=
 naturally a value type
with no mutable fields and no pointers, a value receiver is usually the
right choice.</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"c">// See https://pkg.go.dev/time#Time.</span>
<span class=3D"k">type</span> <span class=3D"n">Time</span> <span class=3D"=
k">struct</span> <span class=3D"p">{</span> <span class=3D"c">/* omitted */=
</span> <span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"p">(</span><span class=3D"n">t=
</span> <span class=3D"n">Time</span><span class=3D"p">)</span> <span class=
=3D"n">Add</span><span class=3D"p">(</span><span class=3D"n">d</span> <span=
 class=3D"n">Duration</span><span class=3D"p">)</span> <span class=3D"n">Ti=
me</span> <span class=3D"p">{</span> <span class=3D"c">/* omitted */</span>=
 <span class=3D"p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>When in doubt, use a pointer receiver.</p>
  </li>
</ul>

<p>As a general guideline, prefer to make the methods for a type either all=
 pointer
methods or all value methods.</p>

<p><strong>Note:</strong> There is a lot of misinformation about whether pa=
ssing a value or a
pointer to a function can affect performance. The compiler can choose to pa=
ss
pointers to values on the stack as well as copying values on the stack, but
these considerations should not outweigh the readability and correctness of=
 the
code in most circumstances. When the performance does matter, it is importa=
nt to
profile both approaches with a realistic benchmark before deciding that one
approach outperforms the other.</p>

<p><a id=3D"switch-break"></a></p>

<h3 id=3D"switch-and-break"><code class=3D"language-plaintext highlighter-r=
ouge">switch</code> and <code class=3D"language-plaintext highlighter-rouge=
">break</code><a class=3D"anchorjs-link " href=3D"https://google.github.io/=
styleguide/go/decisions.html#switch-and-break" aria-label=3D"Anchor" data-a=
nchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-l=
eft: 0.375em;"></a></h3>

<p><a id=3D"TOC-SwitchBreak"></a></p>

<p>Do not use <code class=3D"language-plaintext highlighter-rouge">break</c=
ode> statements without target labels at the ends of <code class=3D"languag=
e-plaintext highlighter-rouge">switch</code>
clauses; they are redundant. Unlike in C and Java, <code class=3D"language-=
plaintext highlighter-rouge">switch</code> clauses in Go
automatically break, and a <code class=3D"language-plaintext highlighter-ro=
uge">fallthrough</code> statement is needed to achieve the
C-style behavior. Use a comment rather than <code class=3D"language-plainte=
xt highlighter-rouge">break</code> if you want to clarify the
purpose of an empty clause.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">switch</span> <span class=3D"n">x</span> <span class=3D"p=
">{</span>
<span class=3D"k">case</span> <span class=3D"s">"A"</span><span class=3D"p"=
>,</span> <span class=3D"s">"B"</span><span class=3D"o">:</span>
    <span class=3D"n">buf</span><span class=3D"o">.</span><span class=3D"n"=
>WriteString</span><span class=3D"p">(</span><span class=3D"n">x</span><spa=
n class=3D"p">)</span>
<span class=3D"k">case</span> <span class=3D"s">"C"</span><span class=3D"o"=
>:</span>
    <span class=3D"c">// handled outside of the switch statement</span>
<span class=3D"k">default</span><span class=3D"o">:</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"s">"unknown value: %q"</span><span class=3D"p">,</span> <span c=
lass=3D"n">x</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">switch</span> <span class=3D"n">x</span> <span class=3D"p=
">{</span>
<span class=3D"k">case</span> <span class=3D"s">"A"</span><span class=3D"p"=
>,</span> <span class=3D"s">"B"</span><span class=3D"o">:</span>
    <span class=3D"n">buf</span><span class=3D"o">.</span><span class=3D"n"=
>WriteString</span><span class=3D"p">(</span><span class=3D"n">x</span><spa=
n class=3D"p">)</span>
    <span class=3D"k">break</span> <span class=3D"c">// this break is redun=
dant</span>
<span class=3D"k">case</span> <span class=3D"s">"C"</span><span class=3D"o"=
>:</span>
    <span class=3D"k">break</span> <span class=3D"c">// this break is redun=
dant</span>
<span class=3D"k">default</span><span class=3D"o">:</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Errorf</span><span class=3D"p">(</span><sp=
an class=3D"s">"unknown value: %q"</span><span class=3D"p">,</span> <span c=
lass=3D"n">x</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Note:</strong> If a <code class=3D"language-plaintext highligh=
ter-rouge">switch</code> clause is within a <code class=3D"language-plainte=
xt highlighter-rouge">for</code> loop, using <code class=3D"language-plaint=
ext highlighter-rouge">break</code> within
<code class=3D"language-plaintext highlighter-rouge">switch</code> does not=
 exit the enclosing <code class=3D"language-plaintext highlighter-rouge">fo=
r</code> loop.</p>

  <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code><span class=3D"k">for</span> <span class=3D"p">=
{</span>
  <span class=3D"k">switch</span> <span class=3D"n">x</span> <span class=3D=
"p">{</span>
  <span class=3D"k">case</span> <span class=3D"s">"A"</span><span class=3D"=
o">:</span>
     <span class=3D"k">break</span> <span class=3D"c">// exits the switch, =
not the loop</span>
  <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div>  </div>

  <p>To escape the enclosing loop, use a label on the <code class=3D"langua=
ge-plaintext highlighter-rouge">for</code> statement:</p>

  <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code><span class=3D"n">loop</span><span class=3D"o">=
:</span>
  <span class=3D"k">for</span> <span class=3D"p">{</span>
    <span class=3D"k">switch</span> <span class=3D"n">x</span> <span class=
=3D"p">{</span>
    <span class=3D"k">case</span> <span class=3D"s">"A"</span><span class=
=3D"o">:</span>
       <span class=3D"k">break</span> <span class=3D"n">loop</span> <span c=
lass=3D"c">// exits the loop</span>
    <span class=3D"p">}</span>
  <span class=3D"p">}</span>
</code></pre></div>  </div>
</blockquote>

<p><a id=3D"synchronous-functions"></a></p>

<h3 id=3D"synchronous-functions">Synchronous functions<a class=3D"anchorjs-=
link " href=3D"https://google.github.io/styleguide/go/decisions.html#synchr=
onous-functions" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" sty=
le=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-SynchronousFunctions"></a></p>

<p>Synchronous functions return their results directly and finish any callb=
acks or
channel operations before returning. Prefer synchronous functions over
asynchronous functions.</p>

<p>Synchronous functions keep goroutines localized within a call. This help=
s to
reason about their lifetimes, and avoid leaks and data races. Synchronous
functions are also easier to test, since the caller can pass an input and c=
heck
the output without the need for polling or synchronization.</p>

<p>If necessary, the caller can add concurrency by calling the function in =
a
separate goroutine. However, it is quite difficult (sometimes impossible) t=
o
remove unnecessary concurrency at the caller side.</p>

<p>See also:</p>

<ul>
  <li>=E2=80=9CRethinking Classical Concurrency Patterns=E2=80=9D, talk by =
Bryan Mills:
<a href=3D"https://drive.google.com/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcA=
N/view">slides</a>, <a href=3D"https://www.youtube.com/watch?v=3D5zXAHh5tJq=
Q">video</a></li>
</ul>

<p><a id=3D"type-aliases"></a></p>

<h3 id=3D"type-aliases">Type aliases<a class=3D"anchorjs-link " href=3D"htt=
ps://google.github.io/styleguide/go/decisions.html#type-aliases" aria-label=
=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorj=
s-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-TypeAliases"></a></p>

<p>Use a <em>type definition</em>, <code class=3D"language-plaintext highli=
ghter-rouge">type T1 T2</code>, to define a new type. Use a
<a href=3D"http://golang.org/ref/spec#Type_declarations"><em>type alias</em=
></a>, <code class=3D"language-plaintext highlighter-rouge">type T1 =3D T2<=
/code>, to refer to an existing type without defining a
new type. Type aliases are rare; their primary use is to aid migrating pack=
ages
to new source code locations. Don=E2=80=99t use type aliasing when it is no=
t needed.</p>

<p><a id=3D"use-percent-q"></a></p>

<h3 id=3D"use-q">Use %q<a class=3D"anchorjs-link " href=3D"https://google.g=
ithub.io/styleguide/go/decisions.html#use-q" aria-label=3D"Anchor" data-anc=
horjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-lef=
t: 0.375em;"></a></h3>

<p><a id=3D"TOC-UsePercentQ"></a></p>

<p>Go=E2=80=99s format functions (<code class=3D"language-plaintext highlig=
hter-rouge">fmt.Printf</code> etc.) have a <code class=3D"language-plaintex=
t highlighter-rouge">%q</code> verb which prints strings
inside double-quotation marks.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntf</span><span class=3D"p">(</span><span class=3D"s">"value %q looks like =
English text"</span><span class=3D"p">,</span> <span class=3D"n">someText</=
span><span class=3D"p">)</span>
</code></pre></div></div>

<p>Prefer using <code class=3D"language-plaintext highlighter-rouge">%q</co=
de> over doing the equivalent manually, using <code class=3D"language-plain=
text highlighter-rouge">%s</code>:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntf</span><span class=3D"p">(</span><span class=3D"s">"value </span><span c=
lass=3D"se">\"</span><span class=3D"s">%s</span><span class=3D"se">\"</span=
><span class=3D"s"> looks like English text"</span><span class=3D"p">,</spa=
n> <span class=3D"n">someText</span><span class=3D"p">)</span>
<span class=3D"c">// Avoid manually wrapping strings with single-quotes too=
:</span>
<span class=3D"n">fmt</span><span class=3D"o">.</span><span class=3D"n">Pri=
ntf</span><span class=3D"p">(</span><span class=3D"s">"value '%s' looks lik=
e English text"</span><span class=3D"p">,</span> <span class=3D"n">someText=
</span><span class=3D"p">)</span>
</code></pre></div></div>

<p>Using <code class=3D"language-plaintext highlighter-rouge">%q</code> is =
recommended in output intended for humans where the input value
could possibly be empty or contain control characters. It can be very hard =
to
notice a silent empty string, but <code class=3D"language-plaintext highlig=
hter-rouge">""</code> stands out clearly as such.</p>

<p><a id=3D"use-any"></a></p>

<h3 id=3D"use-any">Use any<a class=3D"anchorjs-link " href=3D"https://googl=
e.github.io/styleguide/go/decisions.html#use-any" aria-label=3D"Anchor" dat=
a-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; paddin=
g-left: 0.375em;"></a></h3>

<p>Go 1.18 introduces an <code class=3D"language-plaintext highlighter-roug=
e">any</code> type as an <a href=3D"https://go.googlesource.com/proposal/+/=
master/design/18130-type-alias.md">alias</a> to <code class=3D"language-pla=
intext highlighter-rouge">interface{}</code>. Because it is
an alias, <code class=3D"language-plaintext highlighter-rouge">any</code> i=
s equivalent to <code class=3D"language-plaintext highlighter-rouge">interf=
ace{}</code> in many situations and in others
it is easily interchangeable via an explicit conversion. Prefer to use <cod=
e class=3D"language-plaintext highlighter-rouge">any</code> in
new code.</p>

<h2 id=3D"common-libraries">Common libraries<a class=3D"anchorjs-link " hre=
f=3D"https://google.github.io/styleguide/go/decisions.html#common-libraries=
" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em=
 / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>

<p><a id=3D"flags"></a></p>

<h3 id=3D"flags">Flags<a class=3D"anchorjs-link " href=3D"https://google.gi=
thub.io/styleguide/go/decisions.html#flags" aria-label=3D"Anchor" data-anch=
orjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left=
: 0.375em;"></a></h3>

<p><a id=3D"TOC-Flags"></a></p>

<p>Go programs in the Google codebase use an internal variant of the
<a href=3D"https://golang.org/pkg/flag/">standard <code class=3D"language-p=
laintext highlighter-rouge">flag</code> package</a>. It has a similar inter=
face but interoperates well
with internal Google systems. Flag names in Go binaries should prefer to us=
e
underscores to separate words, though the variables that hold a flag=E2=80=
=99s value
should follow the standard Go name style (<a href=3D"https://google.github.=
io/styleguide/go/guide#mixed-caps">mixed caps</a>). Specifically, the flag
name should be in snake case, and the variable name should be the equivalen=
t
name in camel case.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">var</span> <span class=3D"p">(</span>
    <span class=3D"n">pollInterval</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">flag</span><span class=3D"o">.</span><span class=3D"n">Durati=
on</span><span class=3D"p">(</span><span class=3D"s">"poll_interval"</span>=
<span class=3D"p">,</span> <span class=3D"n">time</span><span class=3D"o">.=
</span><span class=3D"n">Minute</span><span class=3D"p">,</span> <span clas=
s=3D"s">"Interval to use for polling."</span><span class=3D"p">)</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">var</span> <span class=3D"p">(</span>
    <span class=3D"n">poll_interval</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">flag</span><span class=3D"o">.</span><span class=3D"n">Int</=
span><span class=3D"p">(</span><span class=3D"s">"pollIntervalSeconds"</spa=
n><span class=3D"p">,</span> <span class=3D"m">60</span><span class=3D"p">,=
</span> <span class=3D"s">"Interval to use for polling in seconds."</span><=
span class=3D"p">)</span>
<span class=3D"p">)</span>
</code></pre></div></div>

<p>Flags must only be defined in <code class=3D"language-plaintext highligh=
ter-rouge">package main</code> or equivalent.</p>

<p>General-purpose packages should be configured using Go APIs, not by punc=
hing
through to the command-line interface; don=E2=80=99t let importing a librar=
y export new
flags as a side effect. That is, prefer explicit function arguments or stru=
ct
field assignment or much less frequently and under the strictest of scrutin=
y
exported global variables. In the extremely rare case that it is necessary =
to
break this rule, the flag name must clearly indicate the package that it
configures.</p>

<p>If your flags are global variables, place them in their own <code class=
=3D"language-plaintext highlighter-rouge">var</code> group,
following the imports section.</p>

<p>There is additional discussion around best practices for creating <a hre=
f=3D"https://google.github.io/styleguide/go/best-practices#complex-clis">co=
mplex CLIs</a>
with subcommands.</p>

<p>See also:</p>

<ul>
  <li><a href=3D"https://abseil.io/tips/45">Tip of the Week #45: Avoid Flag=
s, Especially in Library Code</a></li>
  <li><a href=3D"https://google.github.io/styleguide/go/index.html#gotip">G=
o Tip #10: Configuration Structs and Flags</a></li>
  <li><a href=3D"https://google.github.io/styleguide/go/index.html#gotip">G=
o Tip #80: Dependency Injection Principles</a></li>
</ul>

<p><a id=3D"logging"></a></p>

<h3 id=3D"logging">Logging<a class=3D"anchorjs-link " href=3D"https://googl=
e.github.io/styleguide/go/decisions.html#logging" aria-label=3D"Anchor" dat=
a-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; paddin=
g-left: 0.375em;"></a></h3>

<p>Go programs in the Google codebase use a variant of the standard <a href=
=3D"https://pkg.go.dev/log"><code class=3D"language-plaintext highlighter-r=
ouge">log</code></a>
package. It has a similar but more powerful interface and interoperates wel=
l
with internal Google systems. An open source version of this library is
available as <a href=3D"https://pkg.go.dev/github.com/golang/glog">package =
<code class=3D"language-plaintext highlighter-rouge">glog</code></a>, and o=
pen source Google projects may use that, but
this guide refers to it as <code class=3D"language-plaintext highlighter-ro=
uge">log</code> throughout.</p>

<p><strong>Note:</strong> For abnormal program exits, this library uses <co=
de class=3D"language-plaintext highlighter-rouge">log.Fatal</code> to abort
with a stacktrace, and <code class=3D"language-plaintext highlighter-rouge"=
>log.Exit</code> to stop without one. There is no <code class=3D"language-p=
laintext highlighter-rouge">log.Panic</code>
function as in the standard library.</p>

<p><strong>Tip:</strong> <code class=3D"language-plaintext highlighter-roug=
e">log.Info(v)</code> is equivalent <code class=3D"language-plaintext highl=
ighter-rouge">log.Infof("%v", v)</code>, and the same goes for
other logging levels. Prefer the non-formatting version when you have no
formatting to do.</p>

<p>See also:</p>

<ul>
  <li>Best practices on <a href=3D"https://google.github.io/styleguide/go/b=
est-practices#error-logging">logging errors</a> and
<a href=3D"https://google.github.io/styleguide/go/best-practices#vlog">cust=
om verbosity levels</a></li>
  <li>When and how to use the log package to
<a href=3D"https://google.github.io/styleguide/go/best-practices#checks-and=
-panics">stop the program</a></li>
</ul>

<p><a id=3D"contexts"></a></p>

<h3 id=3D"contexts">Contexts<a class=3D"anchorjs-link " href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#contexts" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Contexts"></a></p>

<p>Values of the <a href=3D"https://pkg.go.dev/context"><code class=3D"lang=
uage-plaintext highlighter-rouge">context.Context</code></a> type carry sec=
urity credentials, tracing
information, deadlines, and cancellation signals across API and process
boundaries. Unlike C++ and Java, which in the Google codebase use thread-lo=
cal
storage, Go programs pass contexts explicitly along the entire function cal=
l
chain from incoming RPCs and HTTP requests to outgoing requests.</p>

<p>When passed to a function or method, <code class=3D"language-plaintext h=
ighlighter-rouge">context.Context</code> is always the first
parameter.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"k">func</span> <span class=3D"n">F=
</span><span class=3D"p">(</span><span class=3D"n">ctx</span> <span class=
=3D"n">context</span><span class=3D"o">.</span><span class=3D"n">Context</s=
pan> <span class=3D"c">/* other arguments */</span><span class=3D"p">)</spa=
n> <span class=3D"p">{}</span>
</code></pre></div></div>

<p>Exceptions are:</p>

<ul>
  <li>In an HTTP handler, where the context comes from
<a href=3D"https://pkg.go.dev/net/http#Request.Context"><code class=3D"lang=
uage-plaintext highlighter-rouge">req.Context()</code></a>.</li>
  <li>
    <p>In streaming RPC methods, where the context comes from the stream.</=
p>

    <p>Code using gRPC streaming accesses a context from a <code class=3D"l=
anguage-plaintext highlighter-rouge">Context()</code> method in
the generated server type, which implements <code class=3D"language-plainte=
xt highlighter-rouge">grpc.ServerStream</code>. See
<a href=3D"https://grpc.io/docs/languages/go/generated-code/">gRPC Generate=
d Code documentation</a>.</p>
  </li>
  <li>
    <p>In entrypoint functions (see below for examples of such functions), =
use
<a href=3D"https://pkg.go.dev/context/#Background"><code class=3D"language-=
plaintext highlighter-rouge">context.Background()</code></a>.</p>

    <ul>
      <li>In binary targets: <code class=3D"language-plaintext highlighter-=
rouge">main</code></li>
      <li>In general purpose code and libraries: <code class=3D"language-pl=
aintext highlighter-rouge">init</code></li>
      <li>In tests: <code class=3D"language-plaintext highlighter-rouge">Te=
stXXX</code>, <code class=3D"language-plaintext highlighter-rouge">Benchmar=
kXXX</code>, <code class=3D"language-plaintext highlighter-rouge">FuzzXXX</=
code></li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong>Note</strong>: It is very rare for code in the middle of a cal=
lchain to require
creating a base context of its own using <code class=3D"language-plaintext =
highlighter-rouge">context.Background()</code>. Always prefer
taking a context from your caller, unless it=E2=80=99s the wrong context.</=
p>

  <p>You may come across server libraries (the implementation of Stubby, gR=
PC, or
HTTP in Google=E2=80=99s server framework for Go) that construct a fresh co=
ntext
object per request. These contexts are immediately filled with information
from the incoming request, so that when passed to the request handler, the
context=E2=80=99s attached values have been propagated to it across the net=
work
boundary from the client caller. Moreover, these contexts=E2=80=99 lifetime=
s are
scoped to that of the request: when the request is finished, the context is
cancelled.</p>

  <p>Unless you are implementing a server framework, you shouldn=E2=80=99t =
create contexts
with <code class=3D"language-plaintext highlighter-rouge">context.Backgroun=
d()</code> in library code. Instead, prefer using context
detachment, which is mentioned below, if there is an existing context
available. If you think you do need <code class=3D"language-plaintext highl=
ighter-rouge">context.Background()</code> outside of
entrypoint functions, discuss it with the Google Go style mailing list befo=
re
committing to an implementation.</p>
</blockquote>

<p>The convention that <code class=3D"language-plaintext highlighter-rouge"=
>context.Context</code> comes first in functions also applies to
test helpers.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">readTestFile</span><span cl=
ass=3D"p">(</span><span class=3D"n">ctx</span> <span class=3D"n">context</s=
pan><span class=3D"o">.</span><span class=3D"n">Context</span><span class=
=3D"p">,</span> <span class=3D"n">t</span> <span class=3D"o">*</span><span =
class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</sp=
an><span class=3D"p">,</span> <span class=3D"n">path</span> <span class=3D"=
kt">string</span><span class=3D"p">)</span> <span class=3D"kt">string</span=
> <span class=3D"p">{}</span>
</code></pre></div></div>

<p>Do not add a context member to a struct type. Instead, add a context par=
ameter
to each method on the type that needs to pass it along. The one exception i=
s for
methods whose signature must match an interface in the standard library or =
in a
third party library outside Google=E2=80=99s control. Such cases are very r=
are, and
should be discussed with the Google Go style mailing list before implementa=
tion
and readability review.</p>

<p>Code in the Google codebase that must spawn background operations which =
can run
after the parent context has been cancelled can use an internal package for
detachment. Follow <a href=3D"https://github.com/golang/go/issues/40221">is=
sue #40221</a> for
discussions on an open source alternative.</p>

<p>Since contexts are immutable, it is fine to pass the same context to mul=
tiple
calls that share the same deadline, cancellation signal, credentials, paren=
t
trace, and so on.</p>

<p>See also:</p>

<ul>
  <li><a href=3D"https://go.dev/blog/context-and-structs">Contexts and stru=
cts</a></li>
</ul>

<p><a id=3D"custom-contexts"></a></p>

<h4 id=3D"custom-contexts">Custom contexts<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#custom-contexts" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Do not create custom context types or use interfaces other than
<code class=3D"language-plaintext highlighter-rouge">context.Context</code>=
 in function signatures. There are no exceptions to this rule.</p>

<p>Imagine if every team had a custom context. Every function call from pac=
kage <code class=3D"language-plaintext highlighter-rouge">p</code>
to package <code class=3D"language-plaintext highlighter-rouge">q</code> wo=
uld have to determine how to convert a <code class=3D"language-plaintext hi=
ghlighter-rouge">p.Context</code> to a
<code class=3D"language-plaintext highlighter-rouge">q.Context</code>, for =
all pairs of packages <code class=3D"language-plaintext highlighter-rouge">=
p</code> and <code class=3D"language-plaintext highlighter-rouge">q</code>.=
 This is impractical and
error-prone for humans, and it makes automated refactorings that add contex=
t
parameters nearly impossible.</p>

<p>If you have application data to pass around, put it in a parameter, in t=
he
receiver, in globals, or in a <code class=3D"language-plaintext highlighter=
-rouge">Context</code> value if it truly belongs there.
Creating your own context type is not acceptable since it undermines the ab=
ility
of the Go team to make Go programs work properly in production.</p>

<p><a id=3D"crypto-rand"></a></p>

<h3 id=3D"cryptorand">crypto/rand<a class=3D"anchorjs-link " href=3D"https:=
//google.github.io/styleguide/go/decisions.html#cryptorand" aria-label=3D"A=
nchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-ico=
ns; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-CryptoRand"></a></p>

<p>Do not use package <code class=3D"language-plaintext highlighter-rouge">=
math/rand</code> to generate keys, even throwaway ones. If
unseeded, the generator is completely predictable. Seeded with
<code class=3D"language-plaintext highlighter-rouge">time.Nanoseconds()</co=
de>, there are just a few bits of entropy. Instead, use
<code class=3D"language-plaintext highlighter-rouge">crypto/rand</code>=E2=
=80=99s Reader, and if you need text, print to hexadecimal or base64.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">import</span> <span class=3D"p">(</span>
    <span class=3D"s">"crypto/rand"</span>
    <span class=3D"c">// "encoding/base64"</span>
    <span class=3D"c">// "encoding/hex"</span>
    <span class=3D"s">"fmt"</span>

    <span class=3D"c">// ...</span>
<span class=3D"p">)</span>

<span class=3D"k">func</span> <span class=3D"n">Key</span><span class=3D"p"=
>()</span> <span class=3D"kt">string</span> <span class=3D"p">{</span>
    <span class=3D"n">buf</span> <span class=3D"o">:=3D</span> <span class=
=3D"nb">make</span><span class=3D"p">([]</span><span class=3D"kt">byte</spa=
n><span class=3D"p">,</span> <span class=3D"m">16</span><span class=3D"p">)=
</span>
    <span class=3D"k">if</span> <span class=3D"n">_</span><span class=3D"p"=
>,</span> <span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span =
class=3D"n">rand</span><span class=3D"o">.</span><span class=3D"n">Read</sp=
an><span class=3D"p">(</span><span class=3D"n">buf</span><span class=3D"p">=
);</span> <span class=3D"n">err</span> <span class=3D"o">!=3D</span> <span =
class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"n">log</span><span class=3D"o">.</span><span class=
=3D"n">Fatalf</span><span class=3D"p">(</span><span class=3D"s">"Out of ran=
domness, should never happen: %v"</span><span class=3D"p">,</span> <span cl=
ass=3D"n">err</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"n">fmt</span><span class=
=3D"o">.</span><span class=3D"n">Sprintf</span><span class=3D"p">(</span><s=
pan class=3D"s">"%x"</span><span class=3D"p">,</span> <span class=3D"n">buf=
</span><span class=3D"p">)</span>
    <span class=3D"c">// or hex.EncodeToString(buf)</span>
    <span class=3D"c">// or base64.StdEncoding.EncodeToString(buf)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Note:</strong> <code class=3D"language-plaintext highlighter-rou=
ge">log.Fatalf</code> is not the standard library log. See [#logging].</p>

<p><a id=3D"useful-test-failures"></a></p>

<h2 id=3D"useful-test-failures">Useful test failures<a class=3D"anchorjs-li=
nk " href=3D"https://google.github.io/styleguide/go/decisions.html#useful-t=
est-failures" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>

<p><a id=3D"TOC-UsefulTestFailures"></a></p>

<p>It should be possible to diagnose a test=E2=80=99s failure without readi=
ng the test=E2=80=99s
source. Tests should fail with helpful messages detailing:</p>

<ul>
  <li>What caused the failure</li>
  <li>What inputs resulted in an error</li>
  <li>The actual result</li>
  <li>What was expected</li>
</ul>

<p>Specific conventions for achieving this goal are outlined below.</p>

<p><a id=3D"assert"></a></p>

<h3 id=3D"assertion-libraries">Assertion libraries<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#assertion-=
libraries" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-Assert"></a></p>

<p>Do not create =E2=80=9Cassertion libraries=E2=80=9D as helpers for testi=
ng.</p>

<p>Assertion libraries are libraries that attempt to combine the validation=
 and
production of failure messages within a test (though the same pitfalls can =
apply
to other test helpers as well). For more on the distinction between test he=
lpers
and assertion libraries, see <a href=3D"https://google.github.io/styleguide=
/go/best-practices#test-functions">best practices</a>.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">var</span> <span class=3D"n">obj</span> <span class=3D"n"=
>BlogPost</span>

<span class=3D"n">assert</span><span class=3D"o">.</span><span class=3D"n">=
IsNotNil</span><span class=3D"p">(</span><span class=3D"n">t</span><span cl=
ass=3D"p">,</span> <span class=3D"s">"obj"</span><span class=3D"p">,</span>=
 <span class=3D"n">obj</span><span class=3D"p">)</span>
<span class=3D"n">assert</span><span class=3D"o">.</span><span class=3D"n">=
StringEq</span><span class=3D"p">(</span><span class=3D"n">t</span><span cl=
ass=3D"p">,</span> <span class=3D"s">"obj.Type"</span><span class=3D"p">,</=
span> <span class=3D"n">obj</span><span class=3D"o">.</span><span class=3D"=
n">Type</span><span class=3D"p">,</span> <span class=3D"s">"blogPost"</span=
><span class=3D"p">)</span>
<span class=3D"n">assert</span><span class=3D"o">.</span><span class=3D"n">=
IntEq</span><span class=3D"p">(</span><span class=3D"n">t</span><span class=
=3D"p">,</span> <span class=3D"s">"obj.Comments"</span><span class=3D"p">,<=
/span> <span class=3D"n">obj</span><span class=3D"o">.</span><span class=3D=
"n">Comments</span><span class=3D"p">,</span> <span class=3D"m">2</span><sp=
an class=3D"p">)</span>
<span class=3D"n">assert</span><span class=3D"o">.</span><span class=3D"n">=
StringNotEq</span><span class=3D"p">(</span><span class=3D"n">t</span><span=
 class=3D"p">,</span> <span class=3D"s">"obj.Body"</span><span class=3D"p">=
,</span> <span class=3D"n">obj</span><span class=3D"o">.</span><span class=
=3D"n">Body</span><span class=3D"p">,</span> <span class=3D"s">""</span><sp=
an class=3D"p">)</span>
</code></pre></div></div>

<p>Assertion libraries tend to either stop the test early (if <code class=
=3D"language-plaintext highlighter-rouge">assert</code> calls
<code class=3D"language-plaintext highlighter-rouge">t.Fatalf</code> or <co=
de class=3D"language-plaintext highlighter-rouge">panic</code>) or omit rel=
evant information about what the test got
right:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">package</span> <span class=3D"n">assert</span>

<span class=3D"k">func</span> <span class=3D"n">IsNotNil</span><span class=
=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span c=
lass=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</spa=
n><span class=3D"p">,</span> <span class=3D"n">name</span> <span class=3D"k=
t">string</span><span class=3D"p">,</span> <span class=3D"n">val</span> <sp=
an class=3D"n">any</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an>
    <span class=3D"k">if</span> <span class=3D"n">val</span> <span class=3D=
"o">=3D=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Fatalf</span><span class=3D"p">(</span><span class=3D"s">"Data %s =3D ni=
l, want not nil"</span><span class=3D"p">,</span> <span class=3D"n">name</s=
pan><span class=3D"p">)</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">StringEq</span><span class=
=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span c=
lass=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</spa=
n><span class=3D"p">,</span> <span class=3D"n">name</span><span class=3D"p"=
>,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <span clas=
s=3D"n">want</span> <span class=3D"kt">string</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"n">got</span> <span class=3D=
"o">!=3D</span> <span class=3D"n">want</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Fatalf</span><span class=3D"p">(</span><span class=3D"s">"Data %s =3D %q=
, want %q"</span><span class=3D"p">,</span> <span class=3D"n">name</span><s=
pan class=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</s=
pan> <span class=3D"n">want</span><span class=3D"p">)</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Complex assertion functions often do not provide <a href=3D"https://goog=
le.github.io/styleguide/go/decisions.html#useful-test-failures">useful fail=
ure messages</a> and
context that exists within the test function. Too many assertion functions =
and
libraries lead to a fragmented developer experience: which assertion librar=
y
should I use, what style of output format should it emit, etc.? Fragmentati=
on
produces unnecessary confusion, especially for library maintainers and auth=
ors
of large-scale changes, who are responsible for fixing potential downstream
breakages. Instead of creating a domain-specific language for testing, use =
Go
itself.</p>

<p>Assertion libraries often factor out comparisons and equality checks. Pr=
efer
using standard libraries such as <a href=3D"https://pkg.go.dev/github.com/g=
oogle/go-cmp/cmp"><code class=3D"language-plaintext highlighter-rouge">cmp<=
/code></a> and <a href=3D"https://golang.org/pkg/fmt/"><code class=3D"langu=
age-plaintext highlighter-rouge">fmt</code></a> instead:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">var</span> <span class=3D"n">got</span> <span class=3D"n"=
>BlogPost</span>

<span class=3D"n">want</span> <span class=3D"o">:=3D</span> <span class=3D"=
n">BlogPost</span><span class=3D"p">{</span>
    <span class=3D"n">Comments</span><span class=3D"o">:</span> <span class=
=3D"m">2</span><span class=3D"p">,</span>
    <span class=3D"n">Body</span><span class=3D"o">:</span>     <span class=
=3D"s">"Hello, world!"</span><span class=3D"p">,</span>
<span class=3D"p">}</span>

<span class=3D"k">if</span> <span class=3D"o">!</span><span class=3D"n">cmp=
</span><span class=3D"o">.</span><span class=3D"n">Equal</span><span class=
=3D"p">(</span><span class=3D"n">got</span><span class=3D"p">,</span> <span=
 class=3D"n">want</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">E=
rrorf</span><span class=3D"p">(</span><span class=3D"s">"Blog post =3D %v, =
want =3D %v"</span><span class=3D"p">,</span> <span class=3D"n">got</span><=
span class=3D"p">,</span> <span class=3D"n">want</span><span class=3D"p">)<=
/span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>For more domain-specific comparison helpers, prefer returning a value or=
 an
error that can be used in the test=E2=80=99s failure message instead of pas=
sing
<code class=3D"language-plaintext highlighter-rouge">*testing.T</code> and =
calling its error reporting methods:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">postLength</span><span clas=
s=3D"p">(</span><span class=3D"n">p</span> <span class=3D"n">BlogPost</span=
><span class=3D"p">)</span> <span class=3D"kt">int</span> <span class=3D"p"=
>{</span> <span class=3D"k">return</span> <span class=3D"nb">len</span><spa=
n class=3D"p">(</span><span class=3D"n">p</span><span class=3D"o">.</span><=
span class=3D"n">Body</span><span class=3D"p">)</span> <span class=3D"p">}<=
/span>

<span class=3D"k">func</span> <span class=3D"n">TestBlogPost_VeritableRant<=
/span><span class=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o=
">*</span><span class=3D"n">testing</span><span class=3D"o">.</span><span c=
lass=3D"n">T</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"n">post</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">BlogPost</span><span class=3D"p">{</span><span class=3D"n">Body</spa=
n><span class=3D"o">:</span> <span class=3D"s">"I am Gunnery Sergeant Hartm=
an, your senior drill instructor."</span><span class=3D"p">}</span>

    <span class=3D"k">if</span> <span class=3D"n">got</span><span class=3D"=
p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</span> <sp=
an class=3D"n">postLength</span><span class=3D"p">(</span><span class=3D"n"=
>post</span><span class=3D"p">),</span> <span class=3D"m">60</span><span cl=
ass=3D"p">;</span> <span class=3D"n">got</span> <span class=3D"o">!=3D</spa=
n> <span class=3D"n">want</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Length of post=
 =3D %v, want %v"</span><span class=3D"p">,</span> <span class=3D"n">got</s=
pan><span class=3D"p">,</span> <span class=3D"n">want</span><span class=3D"=
p">)</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Best Practice:</strong> Were <code class=3D"language-plaintext h=
ighlighter-rouge">postLength</code> non-trivial, it would make sense to tes=
t it
directly, independently of any tests that use it.</p>

<p>See also:</p>

<ul>
  <li><a href=3D"https://google.github.io/styleguide/go/decisions.html#type=
s-of-equality">Equality comparison and diffs</a></li>
  <li><a href=3D"https://google.github.io/styleguide/go/decisions.html#prin=
t-diffs">Print diffs</a></li>
  <li>For more on the distinction between test helpers and assertion helper=
s, see
<a href=3D"https://google.github.io/styleguide/go/best-practices#test-funct=
ions">best practices</a></li>
</ul>

<p><a id=3D"identify-the-function"></a></p>

<h3 id=3D"identify-the-function">Identify the function<a class=3D"anchorjs-=
link " href=3D"https://google.github.io/styleguide/go/decisions.html#identi=
fy-the-function" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" sty=
le=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>In most tests, failure messages should include the name of the function =
that
failed, even though it seems obvious from the name of the test function.
Specifically, your failure message should be <code class=3D"language-plaint=
ext highlighter-rouge">YourFunc(%v) =3D %v, want %v</code>
instead of just <code class=3D"language-plaintext highlighter-rouge">got %v=
, want %v</code>.</p>

<p><a id=3D"identify-the-input"></a></p>

<h3 id=3D"identify-the-input">Identify the input<a class=3D"anchorjs-link "=
 href=3D"https://google.github.io/styleguide/go/decisions.html#identify-the=
-input" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"fon=
t: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>In most tests, failure messages should include the function inputs if th=
ey are
short. If the relevant properties of the inputs are not obvious (for exampl=
e,
because the inputs are large or opaque), you should name your test cases wi=
th a
description of what=E2=80=99s being tested and print the description as par=
t of your
error message.</p>

<p><a id=3D"got-before-want"></a></p>

<h3 id=3D"got-before-want">Got before want<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#got-before-want" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Test outputs should include the actual value that the function returned =
before
printing the value that was expected. A standard format for printing test
outputs is <code class=3D"language-plaintext highlighter-rouge">YourFunc(%v=
) =3D %v, want %v</code>. Where you would write =E2=80=9Cactual=E2=80=9D an=
d
=E2=80=9Cexpected=E2=80=9D, prefer using the words =E2=80=9Cgot=E2=80=9D an=
d =E2=80=9Cwant=E2=80=9D, respectively.</p>

<p>For diffs, directionality is less apparent, and as such it is important =
to
include a key to aid in interpreting the failure. See the
<a href=3D"https://google.github.io/styleguide/go/decisions.html#print-diff=
s">section on printing diffs</a>. Whichever diff order you use in your fail=
ure
messages, you should explicitly indicate it as a part of the failure messag=
e,
because existing code is inconsistent about the ordering.</p>

<p><a id=3D"compare-full-structures"></a></p>

<h3 id=3D"full-structure-comparisons">Full structure comparisons<a class=3D=
"anchorjs-link " href=3D"https://google.github.io/styleguide/go/decisions.h=
tml#full-structure-comparisons" aria-label=3D"Anchor" data-anchorjs-icon=3D=
"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;">=
</a></h3>

<p>If your function returns a struct (or any data type with multiple fields=
 such as
slices, arrays, and maps), avoid writing test code that performs a hand-cod=
ed
field-by-field comparison of the struct. Instead, construct the data that y=
ou=E2=80=99re
expecting your function to return, and compare directly using a
<a href=3D"https://google.github.io/styleguide/go/decisions.html#types-of-e=
quality">deep comparison</a>.</p>

<p><strong>Note:</strong> This does not apply if your data contains irrelev=
ant fields that
obscure the intention of the test.</p>

<p>If your struct needs to be compared for approximate (or equivalent kind =
of
semantic) equality or it contains fields that cannot be compared for equali=
ty
(e.g., if one of the fields is an <code class=3D"language-plaintext highlig=
hter-rouge">io.Reader</code>), tweaking a <a href=3D"https://pkg.go.dev/git=
hub.com/google/go-cmp/cmp#Diff"><code class=3D"language-plaintext highlight=
er-rouge">cmp.Diff</code></a> or
<a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp#Equal"><code cla=
ss=3D"language-plaintext highlighter-rouge">cmp.Equal</code></a> comparison=
 with <a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp/cmpopts"><=
code class=3D"language-plaintext highlighter-rouge">cmpopts</code></a> opti=
ons such as
<a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp/cmpopts#IgnoreIn=
terfaces"><code class=3D"language-plaintext highlighter-rouge">cmpopts.Igno=
reInterfaces</code></a> may meet your needs
(<a href=3D"https://play.golang.org/p/vrCUNVfxsvF">example</a>).</p>

<p>If your function returns multiple return values, you don=E2=80=99t need =
to wrap those in
a struct before comparing them. Just compare the return values individually=
 and
print them.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">val</span><span class=3D"p">,</span> <span class=3D"n">mu=
lti</span><span class=3D"p">,</span> <span class=3D"n">tail</span><span cla=
ss=3D"p">,</span> <span class=3D"n">err</span> <span class=3D"o">:=3D</span=
> <span class=3D"n">strconv</span><span class=3D"o">.</span><span class=3D"=
n">UnquoteChar</span><span class=3D"p">(</span><span class=3D"s">`\"Fran &a=
mp; Freddie's Diner\"`</span><span class=3D"p">,</span> <span class=3D"sc">=
'"'</span><span class=3D"p">)</span>
<span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D"o">=
!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
  <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Fat=
alf</span><span class=3D"p">(</span><span class=3D"o">...</span><span class=
=3D"p">)</span>
<span class=3D"p">}</span>
<span class=3D"k">if</span> <span class=3D"n">val</span> <span class=3D"o">=
!=3D</span> <span class=3D"s">`"`</span> <span class=3D"p">{</span>
  <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Err=
orf</span><span class=3D"p">(</span><span class=3D"o">...</span><span class=
=3D"p">)</span>
<span class=3D"p">}</span>
<span class=3D"k">if</span> <span class=3D"n">multi</span> <span class=3D"p=
">{</span>
  <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Err=
orf</span><span class=3D"p">(</span><span class=3D"o">...</span><span class=
=3D"p">)</span>
<span class=3D"p">}</span>
<span class=3D"k">if</span> <span class=3D"n">tail</span> <span class=3D"o"=
>!=3D</span> <span class=3D"s">`Fran &amp; Freddie's Diner"`</span> <span c=
lass=3D"p">{</span>
  <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Err=
orf</span><span class=3D"p">(</span><span class=3D"o">...</span><span class=
=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"compare-stable-results"></a></p>

<h3 id=3D"compare-stable-results">Compare stable results<a class=3D"anchorj=
s-link " href=3D"https://google.github.io/styleguide/go/decisions.html#comp=
are-stable-results" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" =
style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Avoid comparing results that may depend on output stability of a package=
 that
you do not own. Instead, the test should compare on semantically relevant
information that is stable and resistant to changes in dependencies. For
functionality that returns a formatted string or serialized bytes, it is
generally not safe to assume that the output is stable.</p>

<p>For example, <a href=3D"https://golang.org/pkg/encoding/json/#Marshal"><=
code class=3D"language-plaintext highlighter-rouge">json.Marshal</code></a>=
 can change (and has changed in the past) the
specific bytes that it emits. Tests that perform string equality on the JSO=
N
string may break if the <code class=3D"language-plaintext highlighter-rouge=
">json</code> package changes how it serializes the bytes.
Instead, a more robust test would parse the contents of the JSON string and
ensure that it is semantically equivalent to some expected data structure.<=
/p>

<p><a id=3D"keep-going"></a></p>

<h3 id=3D"keep-going">Keep going<a class=3D"anchorjs-link " href=3D"https:/=
/google.github.io/styleguide/go/decisions.html#keep-going" aria-label=3D"An=
chor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icon=
s; padding-left: 0.375em;"></a></h3>

<p>Tests should keep going for as long as possible, even after a failure, i=
n order
to print out all of the failed checks in a single run. This way, a develope=
r who
is fixing the failing test doesn=E2=80=99t have to re-run the test after fi=
xing each bug
to find the next bug.</p>

<p>Prefer calling <code class=3D"language-plaintext highlighter-rouge">t.Er=
ror</code> over <code class=3D"language-plaintext highlighter-rouge">t.Fata=
l</code> for reporting a mismatch. When comparing
several different properties of a function=E2=80=99s output, use <code clas=
s=3D"language-plaintext highlighter-rouge">t.Error</code> for each of
those comparisons.</p>

<p>Calling <code class=3D"language-plaintext highlighter-rouge">t.Fatal</co=
de> is primarily useful for reporting an unexpected error
condition, when subsequent comparison failures are not going to be meaningf=
ul.</p>

<p>For table-driven test, consider using subtests and use <code class=3D"la=
nguage-plaintext highlighter-rouge">t.Fatal</code> rather than
<code class=3D"language-plaintext highlighter-rouge">t.Error</code> and <co=
de class=3D"language-plaintext highlighter-rouge">continue</code>. See also
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
25: Subtests: Making Your Tests Lean</a>.</p>

<p><strong>Best practice:</strong> For more discussion about when <code cla=
ss=3D"language-plaintext highlighter-rouge">t.Fatal</code> should be used, =
see
<a href=3D"https://google.github.io/styleguide/go/best-practices#t-fatal">b=
est practices</a>.</p>

<p><a id=3D"types-of-equality"></a></p>

<h3 id=3D"equality-comparison-and-diffs">Equality comparison and diffs<a cl=
ass=3D"anchorjs-link " href=3D"https://google.github.io/styleguide/go/decis=
ions.html#equality-comparison-and-diffs" aria-label=3D"Anchor" data-anchorj=
s-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0=
.375em;"></a></h3>

<p>The <code class=3D"language-plaintext highlighter-rouge">=3D=3D</code> o=
perator evaluates equality using <a href=3D"http://golang.org/ref/spec#Comp=
arison_operators">language-defined comparisons</a>.
Scalar values (numbers, booleans, etc) are compared based on their values, =
but
only some structs and interfaces can be compared in this way. Pointers are
compared based on whether they point to the same variable, rather than base=
d on
the equality of the values to which they point.</p>

<p>The <a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp"><code cl=
ass=3D"language-plaintext highlighter-rouge">cmp</code></a> package can com=
pare more complex data structures not appropriately
handled by <code class=3D"language-plaintext highlighter-rouge">=3D=3D</cod=
e>, such as slices. Use <a href=3D"https://pkg.go.dev/github.com/google/go-=
cmp/cmp#Equal"><code class=3D"language-plaintext highlighter-rouge">cmp.Equ=
al</code></a> for equality comparison and
<a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp#Diff"><code clas=
s=3D"language-plaintext highlighter-rouge">cmp.Diff</code></a> to obtain a =
human-readable diff between objects.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">want</span> <span class=3D"o">:=3D</span> <span class=3D"=
o">&amp;</span><span class=3D"n">Doc</span><span class=3D"p">{</span>
    <span class=3D"n">Type</span><span class=3D"o">:</span>     <span class=
=3D"s">"blogPost"</span><span class=3D"p">,</span>
    <span class=3D"n">Comments</span><span class=3D"o">:</span> <span class=
=3D"m">2</span><span class=3D"p">,</span>
    <span class=3D"n">Body</span><span class=3D"o">:</span>     <span class=
=3D"s">"This is the post body."</span><span class=3D"p">,</span>
    <span class=3D"n">Authors</span><span class=3D"o">:</span>  <span class=
=3D"p">[]</span><span class=3D"kt">string</span><span class=3D"p">{</span><=
span class=3D"s">"isaac"</span><span class=3D"p">,</span> <span class=3D"s"=
>"albert"</span><span class=3D"p">,</span> <span class=3D"s">"emmy"</span><=
span class=3D"p">},</span>
<span class=3D"p">}</span>
<span class=3D"k">if</span> <span class=3D"o">!</span><span class=3D"n">cmp=
</span><span class=3D"o">.</span><span class=3D"n">Equal</span><span class=
=3D"p">(</span><span class=3D"n">got</span><span class=3D"p">,</span> <span=
 class=3D"n">want</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">E=
rrorf</span><span class=3D"p">(</span><span class=3D"s">"AddPost() =3D %+v,=
 want %+v"</span><span class=3D"p">,</span> <span class=3D"n">got</span><sp=
an class=3D"p">,</span> <span class=3D"n">want</span><span class=3D"p">)</s=
pan>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>As a general-purpose comparison library, <code class=3D"language-plainte=
xt highlighter-rouge">cmp</code> may not know how to compare
certain types. For example, it can only compare protocol buffer messages if
passed the <a href=3D"https://pkg.go.dev/google.golang.org/protobuf/testing=
/protocmp#Transform"><code class=3D"language-plaintext highlighter-rouge">p=
rotocmp.Transform</code></a> option.</p>

<!-- The order of want and got here is deliberate. See comment in #print-di=
ffs. -->

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">if</span> <span class=3D"n">diff</span> <span class=3D"o"=
>:=3D</span> <span class=3D"n">cmp</span><span class=3D"o">.</span><span cl=
ass=3D"n">Diff</span><span class=3D"p">(</span><span class=3D"n">want</span=
><span class=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,=
</span> <span class=3D"n">protocmp</span><span class=3D"o">.</span><span cl=
ass=3D"n">Transform</span><span class=3D"p">());</span> <span class=3D"n">d=
iff</span> <span class=3D"o">!=3D</span> <span class=3D"s">""</span> <span =
class=3D"p">{</span>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">E=
rrorf</span><span class=3D"p">(</span><span class=3D"s">"Foo() returned une=
xpected difference in protobuf messages (-want +got):</span><span class=3D"=
se">\n</span><span class=3D"s">%s"</span><span class=3D"p">,</span> <span c=
lass=3D"n">diff</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Although the <code class=3D"language-plaintext highlighter-rouge">cmp</c=
ode> package is not part of the Go standard library, it is
maintained by the Go team and should produce stable equality results over t=
ime.
It is user-configurable and should serve most comparison needs.</p>

<p>Existing code may make use of the following older libraries, and may con=
tinue
using them for consistency:</p>

<ul>
  <li><a href=3D"https://pkg.go.dev/github.com/kylelemons/godebug/pretty"><=
code class=3D"language-plaintext highlighter-rouge">pretty</code></a> produ=
ces aesthetically pleasing difference reports. However, it
quite deliberately considers values that have the same visual representatio=
n
as equal. In particular, <code class=3D"language-plaintext highlighter-roug=
e">pretty</code> does not catch differences between nil
slices and empty ones, is not sensitive to different interface
implementations with identical fields, and it is possible to use a nested
map as the basis for comparison with a struct value. It also serializes the
entire value into a string before producing a diff, and as such is not a
good choice for comparing large values. By default, it compares unexported
fields, which makes it sensitive to changes in implementation details in
your dependencies. For this reason, it is not appropriate to use <code clas=
s=3D"language-plaintext highlighter-rouge">pretty</code> on
protobuf messages.</li>
</ul>

<p>Prefer using <code class=3D"language-plaintext highlighter-rouge">cmp</c=
ode> for new code, and it is worth considering updating older code
to use <code class=3D"language-plaintext highlighter-rouge">cmp</code> wher=
e and when it is practical to do so.</p>

<p>Older code may use the standard library <code class=3D"language-plaintex=
t highlighter-rouge">reflect.DeepEqual</code> function to compare
complex structures. <code class=3D"language-plaintext highlighter-rouge">re=
flect.DeepEqual</code> should not be used for checking
equality, as it is sensitive to changes in unexported fields and other
implementation details. Code that is using <code class=3D"language-plaintex=
t highlighter-rouge">reflect.DeepEqual</code> should be updated
to one of the above libraries.</p>

<p><strong>Note:</strong> The <code class=3D"language-plaintext highlighter=
-rouge">cmp</code> package is designed for testing, rather than production =
use.
As such, it may panic when it suspects that a comparison is performed
incorrectly to provide instruction to users on how to improve the test to b=
e
less brittle. Given cmp=E2=80=99s propensity towards panicking, it makes it=
 unsuitable
for code that is used in production as a spurious panic may be fatal.</p>

<p><a id=3D"level-of-detail"></a></p>

<h3 id=3D"level-of-detail">Level of detail<a class=3D"anchorjs-link " href=
=3D"https://google.github.io/styleguide/go/decisions.html#level-of-detail" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>The conventional failure message, which is suitable for most Go tests, i=
s
<code class=3D"language-plaintext highlighter-rouge">YourFunc(%v) =3D %v, w=
ant %v</code>. However, there are cases that may call for more or
less detail:</p>

<ul>
  <li>Tests performing complex interactions should describe the interaction=
s too.
For example, if the same <code class=3D"language-plaintext highlighter-roug=
e">YourFunc</code> is called several times, identify which
call failed the test. If it=E2=80=99s important to know any extra state of =
the
system, include that in the failure output (or at least in the logs).</li>
  <li>If the data is a complex struct with significant boilerplate, it is
acceptable to describe only the important parts in the message, but do not
overly obscure the data.</li>
  <li>Setup failures do not require the same level of detail. If a test hel=
per
populates a Spanner table but Spanner was down, you probably don=E2=80=99t =
need to
include which test input you were going to store in the database.
<code class=3D"language-plaintext highlighter-rouge">t.Fatalf("Setup: Faile=
d to set up test database: %s", err)</code> is usually
helpful enough to resolve the issue.</li>
</ul>

<p><strong>Tip:</strong> Make your failure mode trigger during development.=
 Review what the
failure message looks like and whether a maintainer can effectively deal wi=
th
the failure.</p>

<p>There are some techniques for reproducing test inputs and outputs clearl=
y:</p>

<ul>
  <li>When printing string data, <a href=3D"https://google.github.io/styleg=
uide/go/decisions.html#use-percent-q"><code class=3D"language-plaintext hig=
hlighter-rouge">%q</code> is often useful</a> to
emphasize that the value is important and to more easily spot bad values.</=
li>
  <li>When printing (small) structs, <code class=3D"language-plaintext high=
lighter-rouge">%+v</code> can be more useful than <code class=3D"language-p=
laintext highlighter-rouge">%v</code>.</li>
  <li>When validation of larger values fails, <a href=3D"https://google.git=
hub.io/styleguide/go/decisions.html#print-diffs">printing a diff</a> can
make it easier to understand the failure.</li>
</ul>

<p><a id=3D"print-diffs"></a></p>

<h3 id=3D"print-diffs">Print diffs<a class=3D"anchorjs-link " href=3D"https=
://google.github.io/styleguide/go/decisions.html#print-diffs" aria-label=3D=
"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-i=
cons; padding-left: 0.375em;"></a></h3>

<p>If your function returns large output then it can be hard for someone re=
ading
the failure message to find the differences when your test fails. Instead o=
f
printing both the returned value and the wanted value, make a diff.</p>

<p>To compute diffs for such values, <code class=3D"language-plaintext high=
lighter-rouge">cmp.Diff</code> is preferred, particularly for new
tests and new code, but other tools may be used. See <a href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#types-of-equality">types of equa=
lity</a> for
guidance regarding the strengths and weaknesses of each function.</p>

<ul>
  <li>
    <p><a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp#Diff"><co=
de class=3D"language-plaintext highlighter-rouge">cmp.Diff</code></a></p>
  </li>
  <li>
    <p><a href=3D"https://pkg.go.dev/github.com/kylelemons/godebug/pretty#C=
ompare"><code class=3D"language-plaintext highlighter-rouge">pretty.Compare=
</code></a></p>
  </li>
</ul>

<p>You can use the <a href=3D"https://pkg.go.dev/github.com/kylelemons/gode=
bug/diff"><code class=3D"language-plaintext highlighter-rouge">diff</code><=
/a> package to compare multi-line strings or lists of
strings. You can use this as a building block for other kinds of diffs.</p>

<p>Add some text to your failure message explaining the direction of the di=
ff.</p>

<!--
The reversed order of want and got in these examples is intentional, as thi=
s is
the prevailing order across the Google codebase. The lack of a stance on wh=
ich
order to use is also intentional, as there is no consensus which is
"most readable."


-->

<ul>
  <li>
    <p>Something like <code class=3D"language-plaintext highlighter-rouge">=
diff (-want +got)</code> is good when you=E2=80=99re using the <code class=
=3D"language-plaintext highlighter-rouge">cmp</code>,
<code class=3D"language-plaintext highlighter-rouge">pretty</code>, and <co=
de class=3D"language-plaintext highlighter-rouge">diff</code> packages (if =
you pass <code class=3D"language-plaintext highlighter-rouge">(want, got)</=
code> to the function),
because the <code class=3D"language-plaintext highlighter-rouge">-</code> a=
nd <code class=3D"language-plaintext highlighter-rouge">+</code> that you a=
dd to your format string will match the
<code class=3D"language-plaintext highlighter-rouge">-</code> and <code cla=
ss=3D"language-plaintext highlighter-rouge">+</code> that actually appear a=
t the beginning of the diff lines. If you
pass <code class=3D"language-plaintext highlighter-rouge">(got, want)</code=
> to your function, the correct key would be <code class=3D"language-plaint=
ext highlighter-rouge">(-got +want)</code>
instead.</p>
  </li>
  <li>
    <p>The <code class=3D"language-plaintext highlighter-rouge">messagediff=
</code> package uses a different output format, so the message
<code class=3D"language-plaintext highlighter-rouge">diff (want -&gt; got)<=
/code> is appropriate when you=E2=80=99re using it (if you pass
<code class=3D"language-plaintext highlighter-rouge">(want, got)</code> to =
the function), because the direction of the arrow will
match the direction of the arrow in the =E2=80=9Cmodified=E2=80=9D lines.</=
p>
  </li>
</ul>

<p>The diff will span multiple lines, so you should print a newline before =
you
print the diff.</p>

<p><a id=3D"test-error-semantics"></a></p>

<h3 id=3D"test-error-semantics">Test error semantics<a class=3D"anchorjs-li=
nk " href=3D"https://google.github.io/styleguide/go/decisions.html#test-err=
or-semantics" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>When a unit test performs string comparisons or uses a vanilla <code cla=
ss=3D"language-plaintext highlighter-rouge">cmp</code> to check
that particular kinds of errors are returned for particular inputs, you may=
 find
that your tests are brittle if any of those error messages are reworded in =
the
future. Since this has the potential to turn your unit test into a change
detector (see <a href=3D"https://testing.googleblog.com/2015/01/testing-on-=
toilet-change-detector-tests.html">TotT: Change-Detector Tests Considered H=
armful</a> ),
don=E2=80=99t use string comparison to check what type of error your functi=
on returns.
However, it is permissible to use string comparisons to check that error
messages coming from the package under test satisfy certain properties, for
example, that it includes the parameter name.</p>

<p>Error values in Go typically have a component intended for human eyes an=
d a
component intended for semantic control flow. Tests should seek to only tes=
t
semantic information that can be reliably observed, rather than display
information that is intended for human debugging, as this is often subject =
to
future changes. For guidance on constructing errors with semantic meaning s=
ee
<a href=3D"https://google.github.io/styleguide/go/best-practices#error-hand=
ling">best-practices regarding errors</a>. If an error
with insufficient semantic information is coming from a dependency outside =
your
control, consider filing a bug against the owner to help improve the API, r=
ather
than relying on parsing the error message.</p>

<p>Within unit tests, it is common to only care whether an error occurred o=
r not.
If so, then it is sufficient to only test whether the error was non-nil whe=
n you
expected an error. If you would like to test that the error semantically ma=
tches
some other error, then consider using <a href=3D"https://pkg.go.dev/errors#=
Is"><code class=3D"language-plaintext highlighter-rouge">errors.Is</code></=
a> or <code class=3D"language-plaintext highlighter-rouge">cmp</code> with
<a href=3D"https://pkg.go.dev/github.com/google/go-cmp/cmp/cmpopts#EquateEr=
rors"><code class=3D"language-plaintext highlighter-rouge">cmpopts.EquateEr=
rors</code></a>.</p>

<blockquote>
  <p><strong>Note:</strong> If a test uses <a href=3D"https://pkg.go.dev/gi=
thub.com/google/go-cmp/cmp/cmpopts#EquateErrors"><code class=3D"language-pl=
aintext highlighter-rouge">cmpopts.EquateErrors</code></a> but all of its <=
code class=3D"language-plaintext highlighter-rouge">wantErr</code>
values are either <code class=3D"language-plaintext highlighter-rouge">nil<=
/code> or <code class=3D"language-plaintext highlighter-rouge">cmpopts.AnyE=
rror</code>, then using <code class=3D"language-plaintext highlighter-rouge=
">cmp</code> is
<a href=3D"https://google.github.io/styleguide/go/guide#least-mechanism">un=
necessary mechanism</a>. Simplify the code by making
the want field a <code class=3D"language-plaintext highlighter-rouge">bool<=
/code>. You can then use a simple comparison with <code class=3D"language-p=
laintext highlighter-rouge">!=3D</code>.</p>

  <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n=
">f</span><span class=3D"p">(</span><span class=3D"n">test</span><span clas=
s=3D"o">.</span><span class=3D"n">input</span><span class=3D"p">)</span>
<span class=3D"n">gotErr</span> <span class=3D"o">:=3D</span> <span class=
=3D"n">err</span> <span class=3D"o">!=3D</span> <span class=3D"no">nil</spa=
n>
<span class=3D"k">if</span> <span class=3D"n">gotErr</span> <span class=3D"=
o">!=3D</span> <span class=3D"n">test</span><span class=3D"o">.</span><span=
 class=3D"n">wantErr</span> <span class=3D"p">{</span>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">E=
rrorf</span><span class=3D"p">(</span><span class=3D"s">"f(%q) =3D %v, want=
 error presence =3D %v"</span><span class=3D"p">,</span> <span class=3D"n">=
test</span><span class=3D"o">.</span><span class=3D"n">input</span><span cl=
ass=3D"p">,</span> <span class=3D"n">err</span><span class=3D"p">,</span> <=
span class=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">wan=
tErr</span><span class=3D"p">)</span>
<span class=3D"p">}</span>
</code></pre></div>  </div>
</blockquote>

<p>See also
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
13: Designing Errors for Checking</a>.</p>

<p><a id=3D"test-structure"></a></p>

<h2 id=3D"test-structure">Test structure<a class=3D"anchorjs-link " href=3D=
"https://google.github.io/styleguide/go/decisions.html#test-structure" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h2>

<p><a id=3D"subtests"></a></p>

<h3 id=3D"subtests">Subtests<a class=3D"anchorjs-link " href=3D"https://goo=
gle.github.io/styleguide/go/decisions.html#subtests" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h3>

<p>The standard Go testing library offers a facility to <a href=3D"https://=
pkg.go.dev/testing#hdr-Subtests_and_Sub_benchmarks">define subtests</a>. Th=
is
allows flexibility in setup and cleanup, controlling parallelism, and test
filtering. Subtests can be useful (particularly for table-driven tests), bu=
t
using them is not mandatory. See also the
<a href=3D"https://blog.golang.org/subtests">Go blog post about subtests</a=
>.</p>

<p>Subtests should not depend on the execution of other cases for success o=
r
initial state, because subtests are expected to be able to be run individua=
lly
with using <code class=3D"language-plaintext highlighter-rouge">go test -ru=
n</code> flags or with Bazel <a href=3D"https://bazel.build/docs/user-manua=
l#test-filter">test filter</a> expressions.</p>

<p><a id=3D"subtest-names"></a></p>

<h4 id=3D"subtest-names">Subtest names<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#subtest-names" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h4>

<p>Name your subtest such that it is readable in test output and useful on =
the
command line for users of test filtering. When you use <code class=3D"langu=
age-plaintext highlighter-rouge">t.Run</code> to create a
subtest, the first argument is used as a descriptive name for the test. To
ensure that test results are legible to humans reading the logs, choose sub=
test
names that will remain useful and readable after escaping. Think of subtest
names more like a function identifier than a prose description. The test ru=
nner
replaces spaces with underscores, and escapes non-printing characters. If y=
our
test data benefits from a longer description, consider putting the descript=
ion
in a separate field (perhaps to be printed using <code class=3D"language-pl=
aintext highlighter-rouge">t.Log</code> or alongside failure
messages).</p>

<p>Subtests may be run individually using flags to the <a href=3D"https://g=
olang.org/cmd/go/#hdr-Testing_flags">Go test runner</a> or Bazel
<a href=3D"https://bazel.build/docs/user-manual#test-filter">test filter</a=
>, so choose descriptive names that are also easy to type.</p>

<blockquote>
  <p><strong>Warning:</strong> Slash characters are particularly unfriendly=
 in subtest names,
since they have <a href=3D"https://blog.golang.org/subtests#:~:text=3DPerha=
ps%20a%20bit,match%20any%20tests">special meaning for test filters</a>.</p>

  <blockquote>
    <div class=3D"language-sh highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c"># Bad:</span>
<span class=3D"c"># Assuming TestTime and t.Run("America/New_York", ...)</s=
pan>
bazel <span class=3D"nb">test</span> :mytest <span class=3D"nt">--test_filt=
er</span><span class=3D"o">=3D</span><span class=3D"s2">"Time/New_York"</sp=
an>    <span class=3D"c"># Runs nothing!</span>
bazel <span class=3D"nb">test</span> :mytest <span class=3D"nt">--test_filt=
er</span><span class=3D"o">=3D</span><span class=3D"s2">"Time//New_York"</s=
pan>   <span class=3D"c"># Correct, but awkward.</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<p>To <a href=3D"https://google.github.io/styleguide/go/decisions.html#iden=
tify-the-input">identify the inputs</a> of the function, include them in th=
e test=E2=80=99s failure
messages, where they won=E2=80=99t be escaped by the test runner.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">TestTranslate</span><span c=
lass=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><sp=
an class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"n">data</span> <span class=3D"o">:=3D</span> <span class=
=3D"p">[]</span><span class=3D"k">struct</span> <span class=3D"p">{</span>
        <span class=3D"n">name</span><span class=3D"p">,</span> <span class=
=3D"n">desc</span><span class=3D"p">,</span> <span class=3D"n">srcLang</spa=
n><span class=3D"p">,</span> <span class=3D"n">dstLang</span><span class=3D=
"p">,</span> <span class=3D"n">srcText</span><span class=3D"p">,</span> <sp=
an class=3D"n">wantDstText</span> <span class=3D"kt">string</span>
    <span class=3D"p">}{</span>
        <span class=3D"p">{</span>
            <span class=3D"n">name</span><span class=3D"o">:</span>        =
<span class=3D"s">"hu=3Den_bug-1234"</span><span class=3D"p">,</span>
            <span class=3D"n">desc</span><span class=3D"o">:</span>        =
<span class=3D"s">"regression test following bug 1234. contact: cleese"</sp=
an><span class=3D"p">,</span>
            <span class=3D"n">srcLang</span><span class=3D"o">:</span>     =
<span class=3D"s">"hu"</span><span class=3D"p">,</span>
            <span class=3D"n">srcText</span><span class=3D"o">:</span>     =
<span class=3D"s">"cigarett=C3=A1t =C3=A9s egy =C3=B6ngy=C3=BAjt=C3=B3t k=
=C3=A9rek"</span><span class=3D"p">,</span>
            <span class=3D"n">dstLang</span><span class=3D"o">:</span>     =
<span class=3D"s">"en"</span><span class=3D"p">,</span>
            <span class=3D"n">wantDstText</span><span class=3D"o">:</span> =
<span class=3D"s">"cigarettes and a lighter please"</span><span class=3D"p"=
>,</span>
        <span class=3D"p">},</span> <span class=3D"c">// ...</span>
    <span class=3D"p">}</span>
    <span class=3D"k">for</span> <span class=3D"n">_</span><span class=3D"p=
">,</span> <span class=3D"n">d</span> <span class=3D"o">:=3D</span> <span c=
lass=3D"k">range</span> <span class=3D"n">data</span> <span class=3D"p">{</=
span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Run</span><span class=3D"p">(</span><span class=3D"n">d</span><span clas=
s=3D"o">.</span><span class=3D"n">name</span><span class=3D"p">,</span> <sp=
an class=3D"k">func</span><span class=3D"p">(</span><span class=3D"n">t</sp=
an> <span class=3D"o">*</span><span class=3D"n">testing</span><span class=
=3D"o">.</span><span class=3D"n">T</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span>
            <span class=3D"n">got</span> <span class=3D"o">:=3D</span> <spa=
n class=3D"n">Translate</span><span class=3D"p">(</span><span class=3D"n">d=
</span><span class=3D"o">.</span><span class=3D"n">srcLang</span><span clas=
s=3D"p">,</span> <span class=3D"n">d</span><span class=3D"o">.</span><span =
class=3D"n">dstLang</span><span class=3D"p">,</span> <span class=3D"n">d</s=
pan><span class=3D"o">.</span><span class=3D"n">srcText</span><span class=
=3D"p">)</span>
            <span class=3D"k">if</span> <span class=3D"n">got</span> <span =
class=3D"o">!=3D</span> <span class=3D"n">d</span><span class=3D"o">.</span=
><span class=3D"n">wantDstText</span> <span class=3D"p">{</span>
                <span class=3D"n">t</span><span class=3D"o">.</span><span c=
lass=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"%s</sp=
an><span class=3D"se">\n</span><span class=3D"s">Translate(%q, %q, %q) =3D =
%q, want %q"</span><span class=3D"p">,</span>
                    <span class=3D"n">d</span><span class=3D"o">.</span><sp=
an class=3D"n">desc</span><span class=3D"p">,</span> <span class=3D"n">d</s=
pan><span class=3D"o">.</span><span class=3D"n">srcLang</span><span class=
=3D"p">,</span> <span class=3D"n">d</span><span class=3D"o">.</span><span c=
lass=3D"n">dstLang</span><span class=3D"p">,</span> <span class=3D"n">d</sp=
an><span class=3D"o">.</span><span class=3D"n">srcText</span><span class=3D=
"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <span c=
lass=3D"n">d</span><span class=3D"o">.</span><span class=3D"n">wantDstText<=
/span><span class=3D"p">)</span>
            <span class=3D"p">}</span>
        <span class=3D"p">})</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Here are a few examples of things to avoid:</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"c">// Too wordy.</span>
<span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Run</=
span><span class=3D"p">(</span><span class=3D"s">"check that there is no me=
ntion of scratched records or hovercrafts"</span><span class=3D"p">,</span>=
 <span class=3D"o">...</span><span class=3D"p">)</span>
<span class=3D"c">// Slashes cause problems on the command line.</span>
<span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">Run</=
span><span class=3D"p">(</span><span class=3D"s">"AM/PM confusion"</span><s=
pan class=3D"p">,</span> <span class=3D"o">...</span><span class=3D"p">)</s=
pan>
</code></pre></div></div>

<p>See also
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">Go Tip =
#117: Subtest Names</a>.</p>

<p><a id=3D"table-driven-tests"></a></p>

<h3 id=3D"table-driven-tests">Table-driven tests<a class=3D"anchorjs-link "=
 href=3D"https://google.github.io/styleguide/go/decisions.html#table-driven=
-tests" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"fon=
t: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Use table-driven tests when many different test cases can be tested usin=
g
similar testing logic.</p>

<ul>
  <li>When testing whether the actual output of a function is equal to the
expected output. For example, the many <a href=3D"https://cs.opensource.goo=
gle/go/go/+/master:src/fmt/fmt_test.go">tests of <code class=3D"language-pl=
aintext highlighter-rouge">fmt.Sprintf</code></a> or the
minimal snippet below.</li>
  <li>When testing whether the outputs of a function always conform to the =
same
set of invariants. For example, <a href=3D"https://cs.opensource.google/go/=
go/+/master:src/net/dial_test.go;l=3D318;drc=3D5b606a9d2b7649532fe25794fa6b=
99bd24e7697c">tests for <code class=3D"language-plaintext highlighter-rouge=
">net.Dial</code></a>.</li>
</ul>

<p>Here is the minimal structure of a table-driven test. If needed, you may=
 use
different names or add extra facilities such as subtests or setup and clean=
up
functions. Always keep <a href=3D"https://google.github.io/styleguide/go/de=
cisions.html#useful-test-failures">useful test failures</a> in mind.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">TestCompare</span><span cla=
ss=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span=
 class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"n">compareTests</span> <span class=3D"o">:=3D</span> <sp=
an class=3D"p">[]</span><span class=3D"k">struct</span> <span class=3D"p">{=
</span>
        <span class=3D"n">a</span><span class=3D"p">,</span> <span class=3D=
"n">b</span> <span class=3D"kt">string</span>
        <span class=3D"n">want</span> <span class=3D"kt">int</span>
    <span class=3D"p">}{</span>
        <span class=3D"p">{</span><span class=3D"s">""</span><span class=3D=
"p">,</span> <span class=3D"s">""</span><span class=3D"p">,</span> <span cl=
ass=3D"m">0</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"a"</span><span class=
=3D"p">,</span> <span class=3D"s">""</span><span class=3D"p">,</span> <span=
 class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">""</span><span class=3D=
"p">,</span> <span class=3D"s">"a"</span><span class=3D"p">,</span> <span c=
lass=3D"o">-</span><span class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"abc"</span><span class=
=3D"p">,</span> <span class=3D"s">"abc"</span><span class=3D"p">,</span> <s=
pan class=3D"m">0</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"ab"</span><span class=
=3D"p">,</span> <span class=3D"s">"abc"</span><span class=3D"p">,</span> <s=
pan class=3D"o">-</span><span class=3D"m">1</span><span class=3D"p">},</spa=
n>
        <span class=3D"p">{</span><span class=3D"s">"abc"</span><span class=
=3D"p">,</span> <span class=3D"s">"ab"</span><span class=3D"p">,</span> <sp=
an class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"x"</span><span class=
=3D"p">,</span> <span class=3D"s">"ab"</span><span class=3D"p">,</span> <sp=
an class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"ab"</span><span class=
=3D"p">,</span> <span class=3D"s">"x"</span><span class=3D"p">,</span> <spa=
n class=3D"o">-</span><span class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"x"</span><span class=
=3D"p">,</span> <span class=3D"s">"a"</span><span class=3D"p">,</span> <spa=
n class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"b"</span><span class=
=3D"p">,</span> <span class=3D"s">"x"</span><span class=3D"p">,</span> <spa=
n class=3D"o">-</span><span class=3D"m">1</span><span class=3D"p">},</span>
        <span class=3D"c">// test runtime=C2=B7memeq's chunked implementati=
on</span>
        <span class=3D"p">{</span><span class=3D"s">"abcdefgh"</span><span =
class=3D"p">,</span> <span class=3D"s">"abcdefgh"</span><span class=3D"p">,=
</span> <span class=3D"m">0</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"abcdefghi"</span><span=
 class=3D"p">,</span> <span class=3D"s">"abcdefghi"</span><span class=3D"p"=
>,</span> <span class=3D"m">0</span><span class=3D"p">},</span>
        <span class=3D"p">{</span><span class=3D"s">"abcdefghi"</span><span=
 class=3D"p">,</span> <span class=3D"s">"abcdefghj"</span><span class=3D"p"=
>,</span> <span class=3D"o">-</span><span class=3D"m">1</span><span class=
=3D"p">},</span>
    <span class=3D"p">}</span>

    <span class=3D"k">for</span> <span class=3D"n">_</span><span class=3D"p=
">,</span> <span class=3D"n">test</span> <span class=3D"o">:=3D</span> <spa=
n class=3D"k">range</span> <span class=3D"n">compareTests</span> <span clas=
s=3D"p">{</span>
        <span class=3D"n">got</span> <span class=3D"o">:=3D</span> <span cl=
ass=3D"n">Compare</span><span class=3D"p">(</span><span class=3D"n">test</s=
pan><span class=3D"o">.</span><span class=3D"n">a</span><span class=3D"p">,=
</span> <span class=3D"n">test</span><span class=3D"o">.</span><span class=
=3D"n">b</span><span class=3D"p">)</span>
        <span class=3D"k">if</span> <span class=3D"n">got</span> <span clas=
s=3D"o">!=3D</span> <span class=3D"n">test</span><span class=3D"o">.</span>=
<span class=3D"n">want</span> <span class=3D"p">{</span>
            <span class=3D"n">t</span><span class=3D"o">.</span><span class=
=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Compare(%q=
, %q) =3D %v, want %v"</span><span class=3D"p">,</span> <span class=3D"n">t=
est</span><span class=3D"o">.</span><span class=3D"n">a</span><span class=
=3D"p">,</span> <span class=3D"n">test</span><span class=3D"o">.</span><spa=
n class=3D"n">b</span><span class=3D"p">,</span> <span class=3D"n">got</spa=
n><span class=3D"p">,</span> <span class=3D"n">test</span><span class=3D"o"=
>.</span><span class=3D"n">want</span><span class=3D"p">)</span>
        <span class=3D"p">}</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><strong>Note</strong>: The failure messages in this example above fulfil=
l the guidance to
<a href=3D"https://google.github.io/styleguide/go/decisions.html#identify-t=
he-function">identify the function</a> and
<a href=3D"https://google.github.io/styleguide/go/decisions.html#identify-t=
he-input">identify the input</a>. There=E2=80=99s no need to
<a href=3D"https://google.github.io/styleguide/go/decisions.html#table-test=
s-identifying-the-row">identify the row numerically</a>.</p>

<p>When some test cases need to be checked using different logic from other=
 test
cases, it is more appropriate to write multiple test functions, as explaine=
d in
<a href=3D"https://google.github.io/styleguide/go/index.html#gotip">GoTip #=
50: Disjoint Table Tests</a>. The logic of your test code can get difficult
to understand when each entry in a table has its own different conditional =
logic
to check each output for its inputs. If test cases have different logic but
identical setup, a sequence of <a href=3D"https://google.github.io/stylegui=
de/go/decisions.html#subtests">subtests</a> within a single test
function might make sense.</p>

<p>You can combine table-driven tests with multiple test functions. For exa=
mple,
when testing that a function=E2=80=99s output exactly matches the expected =
output and
that the function returns a non-nil error for an invalid input, then writin=
g two
separate table-driven test functions is the best approach: one for normal
non-error outputs, and one for error outputs.</p>

<p><a id=3D"table-tests-data-driven"></a></p>

<h4 id=3D"data-driven-test-cases">Data-driven test cases<a class=3D"anchorj=
s-link " href=3D"https://google.github.io/styleguide/go/decisions.html#data=
-driven-test-cases" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" =
style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Table test rows can sometimes become complicated, with the row values di=
ctating
conditional behavior inside the test case. The extra clarity from the
duplication between the test cases is necessary for readability.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">type</span> <span class=3D"n">decodeCase</span> <span cla=
ss=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"n">name</span>   <span class=3D"kt">string</span>
    <span class=3D"n">input</span>  <span class=3D"kt">string</span>
    <span class=3D"n">output</span> <span class=3D"kt">string</span>
    <span class=3D"n">err</span>    <span class=3D"kt">error</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">TestDecode</span><span clas=
s=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span =
class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"c">// setupCodex is slow as it creates a real Codex for =
the test.</span>
    <span class=3D"n">codex</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"n">setupCodex</span><span class=3D"p">(</span><span class=3D"n">t</spa=
n><span class=3D"p">)</span>

    <span class=3D"k">var</span> <span class=3D"n">tests</span> <span class=
=3D"p">[]</span><span class=3D"n">decodeCase</span> <span class=3D"c">// ro=
ws omitted for brevity</span>

    <span class=3D"k">for</span> <span class=3D"n">_</span><span class=3D"p=
">,</span> <span class=3D"n">test</span> <span class=3D"o">:=3D</span> <spa=
n class=3D"k">range</span> <span class=3D"n">tests</span> <span class=3D"p"=
>{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Run</span><span class=3D"p">(</span><span class=3D"n">test</span><span c=
lass=3D"o">.</span><span class=3D"n">name</span><span class=3D"p">,</span> =
<span class=3D"k">func</span><span class=3D"p">(</span><span class=3D"n">t<=
/span> <span class=3D"o">*</span><span class=3D"n">testing</span><span clas=
s=3D"o">.</span><span class=3D"n">T</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
            <span class=3D"n">output</span><span class=3D"p">,</span> <span=
 class=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n">Dec=
ode</span><span class=3D"p">(</span><span class=3D"n">test</span><span clas=
s=3D"o">.</span><span class=3D"n">input</span><span class=3D"p">,</span> <s=
pan class=3D"n">codex</span><span class=3D"p">)</span>
            <span class=3D"k">if</span> <span class=3D"n">got</span><span c=
lass=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</s=
pan> <span class=3D"n">output</span><span class=3D"p">,</span> <span class=
=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">output</span>=
<span class=3D"p">;</span> <span class=3D"n">got</span> <span class=3D"o">!=
=3D</span> <span class=3D"n">want</span> <span class=3D"p">{</span>
                <span class=3D"n">t</span><span class=3D"o">.</span><span c=
lass=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode=
(%q) =3D %v, want %v"</span><span class=3D"p">,</span> <span class=3D"n">te=
st</span><span class=3D"o">.</span><span class=3D"n">input</span><span clas=
s=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <sp=
an class=3D"n">want</span><span class=3D"p">)</span>
            <span class=3D"p">}</span>
            <span class=3D"k">if</span> <span class=3D"n">got</span><span c=
lass=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</s=
pan> <span class=3D"n">err</span><span class=3D"p">,</span> <span class=3D"=
n">test</span><span class=3D"o">.</span><span class=3D"n">err</span><span c=
lass=3D"p">;</span> <span class=3D"o">!</span><span class=3D"n">cmp</span><=
span class=3D"o">.</span><span class=3D"n">Equal</span><span class=3D"p">(<=
/span><span class=3D"n">got</span><span class=3D"p">,</span> <span class=3D=
"n">want</span><span class=3D"p">)</span> <span class=3D"p">{</span>
                <span class=3D"n">t</span><span class=3D"o">.</span><span c=
lass=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode=
(%q) err %q, want %q"</span><span class=3D"p">,</span> <span class=3D"n">te=
st</span><span class=3D"o">.</span><span class=3D"n">input</span><span clas=
s=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <sp=
an class=3D"n">want</span><span class=3D"p">)</span>
            <span class=3D"p">}</span>
        <span class=3D"p">})</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>

<span class=3D"k">func</span> <span class=3D"n">TestDecodeWithFake</span><s=
pan class=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</spa=
n><span class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"=
n">T</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"c">// A fakeCodex is a fast approximation of a real Code=
x.</span>
    <span class=3D"n">codex</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"n">newFakeCodex</span><span class=3D"p">()</span>

    <span class=3D"k">var</span> <span class=3D"n">tests</span> <span class=
=3D"p">[]</span><span class=3D"n">decodeCase</span> <span class=3D"c">// ro=
ws omitted for brevity</span>

    <span class=3D"k">for</span> <span class=3D"n">_</span><span class=3D"p=
">,</span> <span class=3D"n">test</span> <span class=3D"o">:=3D</span> <spa=
n class=3D"k">range</span> <span class=3D"n">tests</span> <span class=3D"p"=
>{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Run</span><span class=3D"p">(</span><span class=3D"n">test</span><span c=
lass=3D"o">.</span><span class=3D"n">name</span><span class=3D"p">,</span> =
<span class=3D"k">func</span><span class=3D"p">(</span><span class=3D"n">t<=
/span> <span class=3D"o">*</span><span class=3D"n">testing</span><span clas=
s=3D"o">.</span><span class=3D"n">T</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
            <span class=3D"n">output</span><span class=3D"p">,</span> <span=
 class=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n">Dec=
ode</span><span class=3D"p">(</span><span class=3D"n">test</span><span clas=
s=3D"o">.</span><span class=3D"n">input</span><span class=3D"p">,</span> <s=
pan class=3D"n">codex</span><span class=3D"p">)</span>
            <span class=3D"k">if</span> <span class=3D"n">got</span><span c=
lass=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</s=
pan> <span class=3D"n">output</span><span class=3D"p">,</span> <span class=
=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">output</span>=
<span class=3D"p">;</span> <span class=3D"n">got</span> <span class=3D"o">!=
=3D</span> <span class=3D"n">want</span> <span class=3D"p">{</span>
                <span class=3D"n">t</span><span class=3D"o">.</span><span c=
lass=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode=
(%q) =3D %v, want %v"</span><span class=3D"p">,</span> <span class=3D"n">te=
st</span><span class=3D"o">.</span><span class=3D"n">input</span><span clas=
s=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <sp=
an class=3D"n">want</span><span class=3D"p">)</span>
            <span class=3D"p">}</span>
            <span class=3D"k">if</span> <span class=3D"n">got</span><span c=
lass=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</s=
pan> <span class=3D"n">err</span><span class=3D"p">,</span> <span class=3D"=
n">test</span><span class=3D"o">.</span><span class=3D"n">err</span><span c=
lass=3D"p">;</span> <span class=3D"o">!</span><span class=3D"n">cmp</span><=
span class=3D"o">.</span><span class=3D"n">Equal</span><span class=3D"p">(<=
/span><span class=3D"n">got</span><span class=3D"p">,</span> <span class=3D=
"n">want</span><span class=3D"p">)</span> <span class=3D"p">{</span>
                <span class=3D"n">t</span><span class=3D"o">.</span><span c=
lass=3D"n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode=
(%q) err %q, want %q"</span><span class=3D"p">,</span> <span class=3D"n">te=
st</span><span class=3D"o">.</span><span class=3D"n">input</span><span clas=
s=3D"p">,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <sp=
an class=3D"n">want</span><span class=3D"p">)</span>
            <span class=3D"p">}</span>
        <span class=3D"p">})</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>In the counterexample below, note how hard it is to distinguish between =
which
type of <code class=3D"language-plaintext highlighter-rouge">Codex</code> i=
s used per test case in the case setup. (The highlighted parts
run afoul of the advice from <a href=3D"https://testing.googleblog.com/2008=
/09/tott-data-driven-traps.html">TotT: Data Driven Traps!</a> .)</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"k">type</span> <span class=3D"n">decodeCase</span> <span cla=
ss=3D"k">struct</span> <span class=3D"p">{</span>
  <span class=3D"n">name</span>   <span class=3D"kt">string</span>
  <span class=3D"n">input</span>  <span class=3D"kt">string</span>
  <span class=3D"n">codex</span>  <span class=3D"n">testCodex</span>
  <span class=3D"n">output</span> <span class=3D"kt">string</span>
  <span class=3D"n">err</span>    <span class=3D"kt">error</span>
<span class=3D"p">}</span>

<span class=3D"k">type</span> <span class=3D"n">testCodex</span> <span clas=
s=3D"kt">int</span>

<span class=3D"k">const</span> <span class=3D"p">(</span>
  <span class=3D"n">fake</span> <span class=3D"n">testCodex</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"no">iota</span>
  <span class=3D"n">prod</span>
<span class=3D"p">)</span>

<span class=3D"k">func</span> <span class=3D"n">TestDecode</span><span clas=
s=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span =
class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span>
  <span class=3D"k">var</span> <span class=3D"n">tests</span> <span class=
=3D"p">[]</span><span class=3D"n">decodeCase</span> <span class=3D"c">// ro=
ws omitted for brevity</span>

  <span class=3D"k">for</span> <span class=3D"n">_</span><span class=3D"p">=
,</span> <span class=3D"n">test</span> <span class=3D"o">:=3D</span> <span =
class=3D"n">tests</span> <span class=3D"p">{</span>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">R=
un</span><span class=3D"p">(</span><span class=3D"n">test</span><span class=
=3D"o">.</span><span class=3D"n">name</span><span class=3D"p">,</span> <spa=
n class=3D"k">func</span><span class=3D"p">(</span><span class=3D"n">t</spa=
n> <span class=3D"o">*</span><span class=3D"n">testing</span><span class=3D=
"o">.</span><span class=3D"n">T</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span>
      <span class=3D"k">var</span> <span class=3D"n">codex</span> <span cla=
ss=3D"n">Codex</span>
      <span class=3D"k">switch</span> <span class=3D"n">test</span><span cl=
ass=3D"o">.</span><span class=3D"n">codex</span> <span class=3D"p">{</span>
      <span class=3D"k">case</span> <span class=3D"n">fake</span><span clas=
s=3D"o">:</span>
        <span class=3D"n">codex</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">newFakeCodex</span><span class=3D"p">()</span>
      <span class=3D"k">case</span> <span class=3D"n">prod</span><span clas=
s=3D"o">:</span>
        <span class=3D"n">codex</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">setupCodex</span><span class=3D"p">(</span><span class=3D"n">t</=
span><span class=3D"p">)</span>
      <span class=3D"k">default</span><span class=3D"o">:</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Fatalf</span><span class=3D"p">(</span><span class=3D"s">"Unknown codex =
type: %v"</span><span class=3D"p">,</span> <span class=3D"n">codex</span><s=
pan class=3D"p">)</span>
      <span class=3D"p">}</span>
      <span class=3D"n">output</span><span class=3D"p">,</span> <span class=
=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n">Decode</s=
pan><span class=3D"p">(</span><span class=3D"n">test</span><span class=3D"o=
">.</span><span class=3D"n">input</span><span class=3D"p">,</span> <span cl=
ass=3D"n">codex</span><span class=3D"p">)</span>
      <span class=3D"k">if</span> <span class=3D"n">got</span><span class=
=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</span>=
 <span class=3D"n">output</span><span class=3D"p">,</span> <span class=3D"n=
">test</span><span class=3D"o">.</span><span class=3D"n">output</span><span=
 class=3D"p">;</span> <span class=3D"n">got</span> <span class=3D"o">!=3D</=
span> <span class=3D"n">want</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode(%q) =3D=
 %q, want %q"</span><span class=3D"p">,</span> <span class=3D"n">test</span=
><span class=3D"o">.</span><span class=3D"n">input</span><span class=3D"p">=
,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <span class=
=3D"n">want</span><span class=3D"p">)</span>
      <span class=3D"p">}</span>
      <span class=3D"k">if</span> <span class=3D"n">got</span><span class=
=3D"p">,</span> <span class=3D"n">want</span> <span class=3D"o">:=3D</span>=
 <span class=3D"n">err</span><span class=3D"p">,</span> <span class=3D"n">t=
est</span><span class=3D"o">.</span><span class=3D"n">err</span><span class=
=3D"p">;</span> <span class=3D"o">!</span><span class=3D"n">cmp</span><span=
 class=3D"o">.</span><span class=3D"n">Equal</span><span class=3D"p">(</spa=
n><span class=3D"n">got</span><span class=3D"p">,</span> <span class=3D"n">=
want</span><span class=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Decode(%q) err=
 %q, want %q"</span><span class=3D"p">,</span> <span class=3D"n">test</span=
><span class=3D"o">.</span><span class=3D"n">input</span><span class=3D"p">=
,</span> <span class=3D"n">got</span><span class=3D"p">,</span> <span class=
=3D"n">want</span><span class=3D"p">)</span>
      <span class=3D"p">}</span>
    <span class=3D"p">})</span>
  <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p><a id=3D"table-tests-identifying-the-row"></a></p>

<h4 id=3D"identifying-the-row">Identifying the row<a class=3D"anchorjs-link=
 " href=3D"https://google.github.io/styleguide/go/decisions.html#identifyin=
g-the-row" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"=
font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Do not use the index of the test in the test table as a substitute for n=
aming
your tests or printing the inputs. Nobody wants to go through your test tab=
le
and count the entries in order to figure out which test case is failing.</p=
>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Bad:</span>
<span class=3D"n">tests</span> <span class=3D"o">:=3D</span> <span class=3D=
"p">[]</span><span class=3D"k">struct</span> <span class=3D"p">{</span>
    <span class=3D"n">input</span><span class=3D"p">,</span> <span class=3D=
"n">want</span> <span class=3D"kt">string</span>
<span class=3D"p">}{</span>
    <span class=3D"p">{</span><span class=3D"s">"hello"</span><span class=
=3D"p">,</span> <span class=3D"s">"HELLO"</span><span class=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"s">"wORld"</span><span class=
=3D"p">,</span> <span class=3D"s">"WORLD"</span><span class=3D"p">},</span>
<span class=3D"p">}</span>
<span class=3D"k">for</span> <span class=3D"n">i</span><span class=3D"p">,<=
/span> <span class=3D"n">d</span> <span class=3D"o">:=3D</span> <span class=
=3D"k">range</span> <span class=3D"n">tests</span> <span class=3D"p">{</spa=
n>
    <span class=3D"k">if</span> <span class=3D"n">strings</span><span class=
=3D"o">.</span><span class=3D"n">ToUpper</span><span class=3D"p">(</span><s=
pan class=3D"n">d</span><span class=3D"o">.</span><span class=3D"n">input</=
span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"n">d</span><span class=3D"o">.</span><span class=3D"n">want</span> <spa=
n class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Errorf</span><span class=3D"p">(</span><span class=3D"s">"Failed on case=
 #%d"</span><span class=3D"p">,</span> <span class=3D"n">i</span><span clas=
s=3D"p">)</span>
    <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Add a test description to your test struct and print it along failure me=
ssages.
When using subtests, your subtest name should be effective in identifying t=
he
row.</p>

<p><strong>Important:</strong> Even though <code class=3D"language-plaintex=
t highlighter-rouge">t.Run</code> scopes the output and execution, you must
always <a href=3D"https://google.github.io/styleguide/go/decisions.html#ide=
ntify-the-input">identify the input</a>. The table test row names must foll=
ow the
<a href=3D"https://google.github.io/styleguide/go/decisions.html#subtest-na=
mes">subtest naming</a> guidance.</p>

<p><a id=3D"mark-test-helpers"></a></p>

<h3 id=3D"test-helpers">Test helpers<a class=3D"anchorjs-link " href=3D"htt=
ps://google.github.io/styleguide/go/decisions.html#test-helpers" aria-label=
=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorj=
s-icons; padding-left: 0.375em;"></a></h3>

<p>A test helper is a function that performs a setup or cleanup task. All f=
ailures
that occur in test helpers are expected to be failures of the environment (=
not
from the code under test) =E2=80=94 for example when a test database cannot=
 be started
because there are no more free ports on this machine.</p>

<p>If you pass a <code class=3D"language-plaintext highlighter-rouge">*test=
ing.T</code>, call <a href=3D"https://pkg.go.dev/testing#T.Helper"><code cl=
ass=3D"language-plaintext highlighter-rouge">t.Helper</code></a> to attribu=
te failures in the test
helper to the line where the helper is called. This parameter should come a=
fter
a <a href=3D"https://google.github.io/styleguide/go/decisions.html#contexts=
">context</a> parameter, if present, and before any remaining
parameters.</p>

<div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><pre =
class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">func</span> <span class=3D"n">TestSomeFunction</span><spa=
n class=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span>=
<span class=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n"=
>T</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"n">golden</span> <span class=3D"o">:=3D</span> <span cla=
ss=3D"n">readFile</span><span class=3D"p">(</span><span class=3D"n">t</span=
><span class=3D"p">,</span> <span class=3D"s">"testdata/golden-result.txt"<=
/span><span class=3D"p">)</span>
    <span class=3D"c">// ... tests against golden ...</span>
<span class=3D"p">}</span>

<span class=3D"c">// readFile returns the contents of a data file.</span>
<span class=3D"c">// It must only be called from the same goroutine as star=
ted the test.</span>
<span class=3D"k">func</span> <span class=3D"n">readFile</span><span class=
=3D"p">(</span><span class=3D"n">t</span> <span class=3D"o">*</span><span c=
lass=3D"n">testing</span><span class=3D"o">.</span><span class=3D"n">T</spa=
n><span class=3D"p">,</span> <span class=3D"n">filename</span> <span class=
=3D"kt">string</span><span class=3D"p">)</span> <span class=3D"kt">string</=
span> <span class=3D"p">{</span>
    <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"n">H=
elper</span><span class=3D"p">()</span>
    <span class=3D"n">contents</span><span class=3D"p">,</span> <span class=
=3D"n">err</span> <span class=3D"o">:=3D</span> <span class=3D"n">runfiles<=
/span><span class=3D"o">.</span><span class=3D"n">ReadFile</span><span clas=
s=3D"p">(</span><span class=3D"n">filename</span><span class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"n">err</span> <span class=3D=
"o">!=3D</span> <span class=3D"no">nil</span> <span class=3D"p">{</span>
        <span class=3D"n">t</span><span class=3D"o">.</span><span class=3D"=
n">Fatal</span><span class=3D"p">(</span><span class=3D"n">err</span><span =
class=3D"p">)</span>
    <span class=3D"p">}</span>
    <span class=3D"k">return</span> <span class=3D"kt">string</span><span c=
lass=3D"p">(</span><span class=3D"n">contents</span><span class=3D"p">)</sp=
an>
<span class=3D"p">}</span>
</code></pre></div></div>

<p>Do not use this pattern when it obscures the connection between a test f=
ailure
and the conditions that led to it. Specifically, the guidance about
<a href=3D"https://google.github.io/styleguide/go/decisions.html#assert">as=
sert libraries</a> still applies, and <a href=3D"https://pkg.go.dev/testing=
#T.Helper"><code class=3D"language-plaintext highlighter-rouge">t.Helper</c=
ode></a> should not be used
to implement such libraries.</p>

<p><strong>Tip:</strong> For more on the distinction between test helpers a=
nd assertion helpers,
see <a href=3D"https://google.github.io/styleguide/go/best-practices#test-f=
unctions">best practices</a>.</p>

<p>Although the above refers to <code class=3D"language-plaintext highlight=
er-rouge">*testing.T</code>, much of the advice stays the same for
benchmark and fuzz helpers.</p>

<p><a id=3D"test-package"></a></p>

<h3 id=3D"test-package">Test package<a class=3D"anchorjs-link " href=3D"htt=
ps://google.github.io/styleguide/go/decisions.html#test-package" aria-label=
=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorj=
s-icons; padding-left: 0.375em;"></a></h3>

<p><a id=3D"TOC-TestPackage"></a></p>

<p><a id=3D"test-same-package"></a></p>

<h4 id=3D"tests-in-the-same-package">Tests in the same package<a class=3D"a=
nchorjs-link " href=3D"https://google.github.io/styleguide/go/decisions.htm=
l#tests-in-the-same-package" aria-label=3D"Anchor" data-anchorjs-icon=3D"=
=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"><=
/a></h4>

<p>Tests may be defined in the same package as the code being tested.</p>

<p>To write a test in the same package:</p>

<ul>
  <li>Place the tests in a <code class=3D"language-plaintext highlighter-ro=
uge">foo_test.go</code> file</li>
  <li>Use <code class=3D"language-plaintext highlighter-rouge">package foo<=
/code> for the test file</li>
  <li>Do not explicitly import the package to be tested</li>
</ul>

<pre><code class=3D"language-build"># Good:
go_library(
    name =3D "foo",
    srcs =3D ["foo.go"],
    deps =3D [
        ...
    ],
)

go_test(
    name =3D "foo_test",
    size =3D "small",
    srcs =3D ["foo_test.go"],
    library =3D ":foo",
    deps =3D [
        ...
    ],
)
</code></pre>

<p>A test in the same package can access unexported identifiers in the pack=
age.
This may enable better test coverage and more concise tests. Be aware that =
any
<a href=3D"https://google.github.io/styleguide/go/decisions.html#examples">=
examples</a> declared in the test will not have the package names that a us=
er will
need in their code.</p>

<p><a id=3D"test-different-package"></a></p>

<h4 id=3D"tests-in-a-different-package">Tests in a different package<a clas=
s=3D"anchorjs-link " href=3D"https://google.github.io/styleguide/go/decisio=
ns.html#tests-in-a-different-package" aria-label=3D"Anchor" data-anchorjs-i=
con=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.37=
5em;"></a></h4>

<p>It is not always appropriate or even possible to define a test in the sa=
me
package as the code being tested. In these cases, use a package name with t=
he
<code class=3D"language-plaintext highlighter-rouge">_test</code> suffix. T=
his is an exception to the =E2=80=9Cno underscores=E2=80=9D rule to
<a href=3D"https://google.github.io/styleguide/go/decisions.html#package-na=
mes">package names</a>. For example:</p>

<ul>
  <li>
    <p>If an integration test does not have an obvious library that it belo=
ngs to</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">gmailintegration_test</s=
pan>

<span class=3D"k">import</span> <span class=3D"s">"testing"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>If defining the tests in the same package results in circular depend=
encies</p>

    <div class=3D"language-go highlighter-rouge"><div class=3D"highlight"><=
pre class=3D"highlight"><code><span class=3D"c">// Good:</span>
<span class=3D"k">package</span> <span class=3D"n">fireworks_test</span>

<span class=3D"k">import</span> <span class=3D"p">(</span>
  <span class=3D"s">"fireworks"</span>
  <span class=3D"s">"fireworkstestutil"</span> <span class=3D"c">// firewor=
kstestutil also imports fireworks</span>
<span class=3D"p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><a id=3D"use-package-testing"></a></p>

<h3 id=3D"use-package-testing">Use package <code class=3D"language-plaintex=
t highlighter-rouge">testing</code><a class=3D"anchorjs-link " href=3D"http=
s://google.github.io/styleguide/go/decisions.html#use-package-testing" aria=
-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 a=
nchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>The Go standard library provides the <a href=3D"https://pkg.go.dev/testi=
ng"><code class=3D"language-plaintext highlighter-rouge">testing</code> pac=
kage</a>. This is the only
testing framework permitted for Go code in the Google codebase. In particul=
ar,
<a href=3D"https://google.github.io/styleguide/go/decisions.html#assert">as=
sertion libraries</a> and third-party testing frameworks are not
allowed.</p>

<p>The <code class=3D"language-plaintext highlighter-rouge">testing</code> =
package provides a minimal but complete set of functionality for
writing good tests:</p>

<ul>
  <li>Top-level tests</li>
  <li>Benchmarks</li>
  <li><a href=3D"https://blog.golang.org/examples">Runnable examples</a></l=
i>
  <li>Subtests</li>
  <li>Logging</li>
  <li>Failures and fatal failures</li>
</ul>

<p>These are designed to work cohesively with core language features like
<a href=3D"https://go.dev/ref/spec#Composite_literals">composite literal</a=
> and <a href=3D"https://go.dev/ref/spec#If_statements">if-with-initializer=
</a> syntax to enable test authors to
write [clear, readable, and maintainable tests].</p>

<p><a id=3D"non-decisions"></a></p>

<h2 id=3D"non-decisions">Non-decisions<a class=3D"anchorjs-link " href=3D"h=
ttps://google.github.io/styleguide/go/decisions.html#non-decisions" aria-la=
bel=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anch=
orjs-icons; padding-left: 0.375em;"></a></h2>

<p>A style guide cannot enumerate positive prescriptions for all matters, n=
or can
it enumerate all matters about which it does not offer an opinion. That sai=
d,
here are a few things where the readability community has previously debate=
d and
has not achieved consensus about.</p>

<ul>
  <li><strong>Local variable initialization with zero value</strong>. <code=
 class=3D"language-plaintext highlighter-rouge">var i int</code> and <code =
class=3D"language-plaintext highlighter-rouge">i :=3D 0</code>
are equivalent. See also <a href=3D"https://google.github.io/styleguide/go/=
best-practices#vardeclinitialization">initialization best practices</a>.</l=
i>
  <li><strong>Empty composite literal vs. <code class=3D"language-plaintext=
 highlighter-rouge">new</code> or <code class=3D"language-plaintext highlig=
hter-rouge">make</code></strong>. <code class=3D"language-plaintext highlig=
hter-rouge">&amp;File{}</code> and <code class=3D"language-plaintext highli=
ghter-rouge">new(File)</code>
are equivalent. So are <code class=3D"language-plaintext highlighter-rouge"=
>map[string]bool{}</code> and <code class=3D"language-plaintext highlighter=
-rouge">make(map[string]bool)</code>. See
also <a href=3D"https://google.github.io/styleguide/go/best-practices#varde=
clcomposite">composite declaration best practices</a>.</li>
  <li><strong>got, want argument ordering in cmp.Diff calls</strong>. Be lo=
cally consistent,
and <a href=3D"https://google.github.io/styleguide/go/decisions.html#print-=
diffs">include a legend</a> in your failure message.</li>
  <li><strong><code class=3D"language-plaintext highlighter-rouge">errors.N=
ew</code> vs <code class=3D"language-plaintext highlighter-rouge">fmt.Error=
f</code> on non-formatted strings</strong>.
<code class=3D"language-plaintext highlighter-rouge">errors.New("foo")</cod=
e> and <code class=3D"language-plaintext highlighter-rouge">fmt.Errorf("foo=
")</code> may be used interchangeably.</li>
</ul>

<p>If there are special circumstances where they come up again, the readabi=
lity
mentor might make an optional comment, but in general the author is free to=
 pick
the style they prefer in the given situation.</p>

<p>Naturally, if anything not covered by the style guide does need more dis=
cussion,
authors are welcome to ask =E2=80=93 either in the specific review, or on i=
nternal
message boards.</p>

<!--

-->



     =20
      <div class=3D"footer border-top border-gray-light mt-5 pt-3 text-righ=
t text-gray">
        This site is open source. <a href=3D"https://github.com/google/styl=
eguide/edit/gh-pages/go/decisions.md">Improve this page</a>.
      </div>
     =20
    </div>
   =20
   =20
 =20

</body></html>
------MultipartBoundary--hbdVt383L1VJojCVjPRRWrONwBDThzstCKfaMoQQiN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-f57e049f-e648-4cdf-8074-94a84e0e3bce@mhtml.blink

@charset "utf-8";

.anchorjs-link { opacity: 0; text-decoration: none; -webkit-font-smoothing:=
 antialiased; }

:hover > .anchorjs-link, .anchorjs-link:focus { opacity: 1; }

[data-anchorjs-icon]::after { content: attr(data-anchorjs-icon); }

@font-face { font-family: anchorjs-icons; src: url("data:n/a;base64,AAEAAAA=
LAIAAAwAwT1MvMg8yG2cAAAE4AAAAYGNtYXDp3gC3AAABpAAAAExnYXNwAAAAEAAAA9wAAAAIZ2=
x5ZlQCcfwAAAH4AAABCGhlYWQHFvHyAAAAvAAAADZoaGVhBnACFwAAAPQAAAAkaG10eASAADEAA=
AGYAAAADGxvY2EACACEAAAB8AAAAAhtYXhwAAYAVwAAARgAAAAgbmFtZQGOH9cAAAMAAAAAunBv=
c3QAAwAAAAADvAAAACAAAQAAAAEAAHzE2p9fDzz1AAkEAAAAAADRecUWAAAAANQA6R8AAAAAAoA=
CwAAAAAgAAgAAAAAAAAABAAADwP/AAAACgAAA/9MCrQABAAAAAAAAAAAAAAAAAAAAAwABAAAAAw=
BVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMCQAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJA=
AAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAg//0DwP/AAEADwABAAAAAAQAAAAAA=
AAAAAAAAIAAAAAAAAAIAAAACgAAxAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADAAAAA=
IAAgAAgAAACDpy//9//8AAAAg6cv//f///+EWNwADAAEAAAAAAAAAAAAAAAAACACEAAEAAAAAAA=
AAAAAAAAAxAAACAAQARAKAAsAAKwBUAAABIiYnJjQ3NzY2MzIWFxYUBwcGIicmNDc3NjQnJiYjI=
gYHBwYUFxYUBwYGIwciJicmNDc3NjIXFhQHBwYUFxYWMzI2Nzc2NCcmNDc2MhcWFAcHBgYjARQG=
DAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiA=
NehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi=
6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAAADACWAAEAAAAAAAEACAAAAAEAAAAAA=
AIAAwAIAAEAAAAAAAMACAAAAAEAAAAAAAQACAAAAAEAAAAAAAUAAQALAAEAAAAAAAYACAAAAAMA=
AQQJAAEAEAAMAAMAAQQJAAIABgAcAAMAAQQJAAMAEAAMAAMAAQQJAAQAEAAMAAMAAQQJAAUAAgA=
iAAMAAQQJAAYAEAAMYW5jaG9yanM0MDBAAGEAbgBjAGgAbwByAGoAcwA0ADAAMABAAAAAAwAAAA=
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAH//wAP") format("truetype"); }
------MultipartBoundary--hbdVt383L1VJojCVjPRRWrONwBDThzstCKfaMoQQiN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://google.github.io/styleguide/assets/css/style.css?v=8c4da230fc15e01e0ba3545c8a6ff55bc3da4649

@charset "utf-8";

html { font-family: sans-serif; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, main, menu, na=
v, section { display: block; }

summary { display: list-item; }

audio, canvas, progress, video { display: inline-block; }

audio:not([controls]) { display: none; height: 0px; }

progress { vertical-align: baseline; }

template, [hidden] { display: none !important; }

a { background-color: transparent; }

a:active, a:hover { outline-width: 0px; }

abbr[title] { border-bottom: none; text-decoration: underline dotted; }

b, strong { font-weight: inherit; }

b, strong { font-weight: bolder; }

dfn { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

mark { background-color: rgb(255, 255, 0); color: rgb(0, 0, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

img { border-style: none; }

svg:not(:root) { overflow: hidden; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

button, input, select, textarea { font: inherit; margin: 0px; }

optgroup { font-weight: bold; }

button, input { overflow: visible; }

button, select { text-transform: none; }

button, html [type=3D"button"], [type=3D"reset"], [type=3D"submit"] { appea=
rance: button; }

fieldset { border: 1px solid rgb(192, 192, 192); margin: 0px 2px; padding: =
0.35em 0.625em 0.75em; }

legend { box-sizing: border-box; color: inherit; display: table; max-width:=
 100%; padding: 0px; white-space: normal; }

textarea { overflow: auto; }

[type=3D"checkbox"], [type=3D"radio"] { box-sizing: border-box; padding: 0p=
x; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

[type=3D"search"]::-webkit-search-cancel-button, [type=3D"search"]::-webkit=
-search-decoration { appearance: none; }

::-webkit-input-placeholder { color: inherit; opacity: 0.54; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

* { box-sizing: border-box; }

input, select, textarea, button { font-family: inherit; font-size: inherit;=
 line-height: inherit; }

body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetic=
a, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symb=
ol"; font-size: 14px; line-height: 1.5; color: rgb(36, 41, 46); background-=
color: rgb(255, 255, 255); }

a { color: rgb(3, 102, 214); text-decoration: none; }

a:hover { text-decoration: underline; }

b, strong { font-weight: 600; }

hr, .rule { height: 0px; margin: 15px 0px; overflow: hidden; background: tr=
ansparent; border-width: 0px 0px 1px; border-top-style: initial; border-rig=
ht-style: initial; border-left-style: initial; border-top-color: initial; b=
order-right-color: initial; border-left-color: initial; border-image: initi=
al; border-bottom-style: solid; border-bottom-color: rgb(223, 226, 229); }

hr::before, .rule::before { display: table; content: ""; }

hr::after, .rule::after { display: table; clear: both; content: ""; }

table { border-spacing: 0px; border-collapse: collapse; }

td, th { padding: 0px; }

button { cursor: pointer; border-radius: 0px; }

[hidden][hidden] { display: none !important; }

details summary { cursor: pointer; }

details:not([open]) > :not(summary) { display: none !important; }

h1, h2, h3, h4, h5, h6 { margin-top: 0px; margin-bottom: 0px; }

h1 { font-size: 32px; font-weight: 600; }

h2 { font-size: 24px; font-weight: 600; }

h3 { font-size: 20px; font-weight: 600; }

h4 { font-size: 16px; font-weight: 600; }

h5 { font-size: 14px; font-weight: 600; }

h6 { font-size: 12px; font-weight: 600; }

p { margin-top: 0px; margin-bottom: 10px; }

small { font-size: 90%; }

blockquote { margin: 0px; }

ul, ol { padding-left: 0px; margin-top: 0px; margin-bottom: 0px; }

ol ol, ul ol { list-style-type: lower-roman; }

ul ul ol, ul ol ol, ol ul ol, ol ol ol { list-style-type: lower-alpha; }

dd { margin-left: 0px; }

tt, code { font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo,=
 Courier, monospace; font-size: 12px; }

pre { margin-top: 0px; margin-bottom: 0px; font-family: SFMono-Regular, Con=
solas, "Liberation Mono", Menlo, Courier, monospace; font-size: 12px; }

.octicon { vertical-align: text-bottom; }

.anim-fade-in { animation-name: fade-in; animation-duration: 1s; animation-=
timing-function: ease-in-out; }

.anim-fade-in.fast { animation-duration: 300ms; }

@keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.anim-fade-out { animation-name: fade-out; animation-duration: 1s; animatio=
n-timing-function: ease-out; }

.anim-fade-out.fast { animation-duration: 0.3s; }

@keyframes fade-out {=20
  0% { opacity: 1; }
  100% { opacity: 0; }
}

.anim-fade-up { opacity: 0; animation-name: fade-up; animation-duration: 0.=
3s; animation-fill-mode: forwards; animation-timing-function: ease-out; ani=
mation-delay: 1s; }

@keyframes fade-up {=20
  0% { opacity: 0.8; transform: translateY(100%); }
  100% { opacity: 1; transform: translateY(0px); }
}

.anim-fade-down { animation-name: fade-down; animation-duration: 0.3s; anim=
ation-fill-mode: forwards; animation-timing-function: ease-in; }

@keyframes fade-down {=20
  0% { opacity: 1; transform: translateY(0px); }
  100% { opacity: 0.5; transform: translateY(100%); }
}

.anim-grow-x { width: 0%; animation-name: grow-x; animation-duration: 0.3s;=
 animation-fill-mode: forwards; animation-timing-function: ease; animation-=
delay: 0.5s; }

@keyframes grow-x {=20
  100% { width: 100%; }
}

.anim-shrink-x { animation-name: shrink-x; animation-duration: 0.3s; animat=
ion-fill-mode: forwards; animation-timing-function: ease-in-out; animation-=
delay: 0.5s; }

@keyframes shrink-x {=20
  100% { width: 0%; }
}

.anim-scale-in { animation-name: scale-in; animation-duration: 0.15s; anima=
tion-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5); }

@keyframes scale-in {=20
  0% { opacity: 0; transform: scale(0.5); }
  100% { opacity: 1; transform: scale(1); }
}

.anim-pulse { animation-name: pulse; animation-duration: 2s; animation-timi=
ng-function: linear; animation-iteration-count: infinite; }

@keyframes pulse {=20
  0% { opacity: 0.3; }
  10% { opacity: 1; }
  100% { opacity: 0.3; }
}

.anim-pulse-in { animation-name: pulse-in; animation-duration: 0.5s; }

@keyframes pulse-in {=20
  0% { transform: scale3d(1, 1, 1); }
  50% { transform: scale3d(1.1, 1.1, 1.1); }
  100% { transform: scale3d(1, 1, 1); }
}

.hover-grow { transition: transform 0.3s ease 0s; backface-visibility: hidd=
en; }

.hover-grow:hover { transform: scale(1.025); }

.border { border: 1px solid rgb(225, 228, 232) !important; }

.border-y { border-top: 1px solid rgb(225, 228, 232) !important; border-bot=
tom: 1px solid rgb(225, 228, 232) !important; }

.border-0 { border: 0px !important; }

.border-dashed { border-style: dashed !important; }

.border-blue { border-color: rgb(3, 102, 214) !important; }

.border-blue-light { border-color: rgb(200, 225, 255) !important; }

.border-green { border-color: rgb(52, 208, 88) !important; }

.border-green-light { border-color: rgb(162, 203, 172) !important; }

.border-red { border-color: rgb(215, 58, 73) !important; }

.border-red-light { border-color: rgb(206, 160, 165) !important; }

.border-purple { border-color: rgb(111, 66, 193) !important; }

.border-yellow { border-color: rgb(217, 208, 165) !important; }

.border-gray-light { border-color: rgb(234, 236, 239) !important; }

.border-gray-dark { border-color: rgb(209, 213, 218) !important; }

.border-black-fade { border-color: rgba(27, 31, 35, 0.15) !important; }

.border-top { border-top: 1px solid rgb(225, 228, 232) !important; }

.border-right { border-right: 1px solid rgb(225, 228, 232) !important; }

.border-bottom { border-bottom: 1px solid rgb(225, 228, 232) !important; }

.border-left { border-left: 1px solid rgb(225, 228, 232) !important; }

.border-top-0 { border-top: 0px !important; }

.border-right-0 { border-right: 0px !important; }

.border-bottom-0 { border-bottom: 0px !important; }

.border-left-0 { border-left: 0px !important; }

.rounded-0 { border-radius: 0px !important; }

.rounded-1 { border-radius: 3px !important; }

.rounded-2 { border-radius: 6px !important; }

.rounded-top-0 { border-top-left-radius: 0px !important; border-top-right-r=
adius: 0px !important; }

.rounded-top-1 { border-top-left-radius: 3px !important; border-top-right-r=
adius: 3px !important; }

.rounded-top-2 { border-top-left-radius: 6px !important; border-top-right-r=
adius: 6px !important; }

.rounded-right-0 { border-top-right-radius: 0px !important; border-bottom-r=
ight-radius: 0px !important; }

.rounded-right-1 { border-top-right-radius: 3px !important; border-bottom-r=
ight-radius: 3px !important; }

.rounded-right-2 { border-top-right-radius: 6px !important; border-bottom-r=
ight-radius: 6px !important; }

.rounded-bottom-0 { border-bottom-right-radius: 0px !important; border-bott=
om-left-radius: 0px !important; }

.rounded-bottom-1 { border-bottom-right-radius: 3px !important; border-bott=
om-left-radius: 3px !important; }

.rounded-bottom-2 { border-bottom-right-radius: 6px !important; border-bott=
om-left-radius: 6px !important; }

.rounded-left-0 { border-bottom-left-radius: 0px !important; border-top-lef=
t-radius: 0px !important; }

.rounded-left-1 { border-bottom-left-radius: 3px !important; border-top-lef=
t-radius: 3px !important; }

.rounded-left-2 { border-bottom-left-radius: 6px !important; border-top-lef=
t-radius: 6px !important; }

@media (min-width: 544px) {
  .border-sm-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-sm-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-sm-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-sm-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-sm-top-0 { border-top: 0px !important; }
  .border-sm-right-0 { border-right: 0px !important; }
  .border-sm-bottom-0 { border-bottom: 0px !important; }
  .border-sm-left-0 { border-left: 0px !important; }
  .rounded-sm-0 { border-radius: 0px !important; }
  .rounded-sm-1 { border-radius: 3px !important; }
  .rounded-sm-2 { border-radius: 6px !important; }
  .rounded-sm-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-sm-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-sm-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-sm-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-sm-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-sm-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-sm-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-sm-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-sm-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-sm-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-sm-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-sm-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 768px) {
  .border-md-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-md-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-md-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-md-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-md-top-0 { border-top: 0px !important; }
  .border-md-right-0 { border-right: 0px !important; }
  .border-md-bottom-0 { border-bottom: 0px !important; }
  .border-md-left-0 { border-left: 0px !important; }
  .rounded-md-0 { border-radius: 0px !important; }
  .rounded-md-1 { border-radius: 3px !important; }
  .rounded-md-2 { border-radius: 6px !important; }
  .rounded-md-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-md-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-md-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-md-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-md-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-md-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-md-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-md-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-md-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-md-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-md-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-md-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 1012px) {
  .border-lg-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-lg-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-lg-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-lg-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-lg-top-0 { border-top: 0px !important; }
  .border-lg-right-0 { border-right: 0px !important; }
  .border-lg-bottom-0 { border-bottom: 0px !important; }
  .border-lg-left-0 { border-left: 0px !important; }
  .rounded-lg-0 { border-radius: 0px !important; }
  .rounded-lg-1 { border-radius: 3px !important; }
  .rounded-lg-2 { border-radius: 6px !important; }
  .rounded-lg-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-lg-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-lg-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-lg-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-lg-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-lg-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-lg-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-lg-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-lg-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-lg-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-lg-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-lg-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 1280px) {
  .border-xl-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-xl-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-xl-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-xl-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-xl-top-0 { border-top: 0px !important; }
  .border-xl-right-0 { border-right: 0px !important; }
  .border-xl-bottom-0 { border-bottom: 0px !important; }
  .border-xl-left-0 { border-left: 0px !important; }
  .rounded-xl-0 { border-radius: 0px !important; }
  .rounded-xl-1 { border-radius: 3px !important; }
  .rounded-xl-2 { border-radius: 6px !important; }
  .rounded-xl-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-xl-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-xl-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-xl-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-xl-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-xl-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-xl-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-xl-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-xl-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-xl-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-xl-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-xl-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

.circle { border-radius: 50% !important; }

.box-shadow { box-shadow: rgba(27, 31, 35, 0.1) 0px 1px 1px !important; }

.box-shadow-medium { box-shadow: rgba(27, 31, 35, 0.15) 0px 1px 5px !import=
ant; }

.box-shadow-large { box-shadow: rgba(27, 31, 35, 0.15) 0px 1px 15px !import=
ant; }

.box-shadow-extra-large { box-shadow: rgba(27, 31, 35, 0.07) 0px 10px 50px =
!important; }

.box-shadow-none { box-shadow: none !important; }

.bg-white { background-color: rgb(255, 255, 255) !important; }

.bg-blue { background-color: rgb(3, 102, 214) !important; }

.bg-blue-light { background-color: rgb(241, 248, 255) !important; }

.bg-gray-dark { background-color: rgb(36, 41, 46) !important; }

.bg-gray { background-color: rgb(246, 248, 250) !important; }

.bg-gray-light { background-color: rgb(250, 251, 252) !important; }

.bg-green { background-color: rgb(40, 167, 69) !important; }

.bg-green-light { background-color: rgb(220, 255, 228) !important; }

.bg-red { background-color: rgb(215, 58, 73) !important; }

.bg-red-light { background-color: rgb(255, 220, 224) !important; }

.bg-yellow { background-color: rgb(255, 211, 61) !important; }

.bg-yellow-light { background-color: rgb(255, 245, 177) !important; }

.bg-purple { background-color: rgb(111, 66, 193) !important; }

.bg-purple-light { background-color: rgb(245, 240, 255) !important; }

.bg-shade-gradient { background-image: linear-gradient(rgba(27, 31, 35, 0.0=
67), rgba(27, 31, 35, 0)) !important; background-repeat: no-repeat !importa=
nt; background-size: 100% 200px !important; }

.text-blue { color: rgb(3, 102, 214) !important; }

.text-red { color: rgb(203, 36, 49) !important; }

.text-gray-light { color: rgb(106, 115, 125) !important; }

.text-gray { color: rgb(88, 96, 105) !important; }

.text-gray-dark { color: rgb(36, 41, 46) !important; }

.text-green { color: rgb(40, 167, 69) !important; }

.text-orange { color: rgb(160, 65, 0) !important; }

.text-orange-light { color: rgb(227, 98, 9) !important; }

.text-purple { color: rgb(111, 66, 193) !important; }

.text-white { color: rgb(255, 255, 255) !important; }

.text-inherit { color: inherit !important; }

.text-pending { color: rgb(176, 136, 0) !important; }

.bg-pending { color: rgb(219, 171, 9) !important; }

.link-gray { color: rgb(88, 96, 105) !important; }

.link-gray:hover { color: rgb(3, 102, 214) !important; }

.link-gray-dark { color: rgb(36, 41, 46) !important; }

.link-gray-dark:hover { color: rgb(3, 102, 214) !important; }

.link-hover-blue:hover { color: rgb(3, 102, 214) !important; }

.muted-link { color: rgb(88, 96, 105) !important; }

.muted-link:hover { text-decoration: none; color: rgb(3, 102, 214) !importa=
nt; }

.details-overlay[open] > summary::before { position: fixed; inset: 0px; z-i=
ndex: 80; display: block; cursor: default; content: " "; background: transp=
arent; }

.details-overlay-dark[open] > summary::before { z-index: 99; background: rg=
ba(27, 31, 35, 0.5); }

.flex-row { flex-direction: row !important; }

.flex-row-reverse { flex-direction: row-reverse !important; }

.flex-column { flex-direction: column !important; }

.flex-wrap { flex-wrap: wrap !important; }

.flex-nowrap { flex-wrap: nowrap !important; }

.flex-justify-start { justify-content: flex-start !important; }

.flex-justify-end { justify-content: flex-end !important; }

.flex-justify-center { justify-content: center !important; }

.flex-justify-between { justify-content: space-between !important; }

.flex-justify-around { justify-content: space-around !important; }

.flex-items-start { align-items: flex-start !important; }

.flex-items-end { align-items: flex-end !important; }

.flex-items-center { align-items: center !important; }

.flex-items-baseline { align-items: baseline !important; }

.flex-items-stretch { align-items: stretch !important; }

.flex-content-start { align-content: flex-start !important; }

.flex-content-end { align-content: flex-end !important; }

.flex-content-center { align-content: center !important; }

.flex-content-between { align-content: space-between !important; }

.flex-content-around { align-content: space-around !important; }

.flex-content-stretch { align-content: stretch !important; }

.flex-auto { flex: 1 1 auto !important; }

.flex-shrink-0 { flex-shrink: 0 !important; }

.flex-self-auto { align-self: auto !important; }

.flex-self-start { align-self: flex-start !important; }

.flex-self-end { align-self: flex-end !important; }

.flex-self-center { align-self: center !important; }

.flex-self-baseline { align-self: baseline !important; }

.flex-self-stretch { align-self: stretch !important; }

.flex-item-equal { flex-grow: 1; flex-basis: 0px; }

@media (min-width: 544px) {
  .flex-sm-row { flex-direction: row !important; }
  .flex-sm-row-reverse { flex-direction: row-reverse !important; }
  .flex-sm-column { flex-direction: column !important; }
  .flex-sm-wrap { flex-wrap: wrap !important; }
  .flex-sm-nowrap { flex-wrap: nowrap !important; }
  .flex-sm-justify-start { justify-content: flex-start !important; }
  .flex-sm-justify-end { justify-content: flex-end !important; }
  .flex-sm-justify-center { justify-content: center !important; }
  .flex-sm-justify-between { justify-content: space-between !important; }
  .flex-sm-justify-around { justify-content: space-around !important; }
  .flex-sm-items-start { align-items: flex-start !important; }
  .flex-sm-items-end { align-items: flex-end !important; }
  .flex-sm-items-center { align-items: center !important; }
  .flex-sm-items-baseline { align-items: baseline !important; }
  .flex-sm-items-stretch { align-items: stretch !important; }
  .flex-sm-content-start { align-content: flex-start !important; }
  .flex-sm-content-end { align-content: flex-end !important; }
  .flex-sm-content-center { align-content: center !important; }
  .flex-sm-content-between { align-content: space-between !important; }
  .flex-sm-content-around { align-content: space-around !important; }
  .flex-sm-content-stretch { align-content: stretch !important; }
  .flex-sm-auto { flex: 1 1 auto !important; }
  .flex-sm-shrink-0 { flex-shrink: 0 !important; }
  .flex-sm-self-auto { align-self: auto !important; }
  .flex-sm-self-start { align-self: flex-start !important; }
  .flex-sm-self-end { align-self: flex-end !important; }
  .flex-sm-self-center { align-self: center !important; }
  .flex-sm-self-baseline { align-self: baseline !important; }
  .flex-sm-self-stretch { align-self: stretch !important; }
  .flex-sm-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 768px) {
  .flex-md-row { flex-direction: row !important; }
  .flex-md-row-reverse { flex-direction: row-reverse !important; }
  .flex-md-column { flex-direction: column !important; }
  .flex-md-wrap { flex-wrap: wrap !important; }
  .flex-md-nowrap { flex-wrap: nowrap !important; }
  .flex-md-justify-start { justify-content: flex-start !important; }
  .flex-md-justify-end { justify-content: flex-end !important; }
  .flex-md-justify-center { justify-content: center !important; }
  .flex-md-justify-between { justify-content: space-between !important; }
  .flex-md-justify-around { justify-content: space-around !important; }
  .flex-md-items-start { align-items: flex-start !important; }
  .flex-md-items-end { align-items: flex-end !important; }
  .flex-md-items-center { align-items: center !important; }
  .flex-md-items-baseline { align-items: baseline !important; }
  .flex-md-items-stretch { align-items: stretch !important; }
  .flex-md-content-start { align-content: flex-start !important; }
  .flex-md-content-end { align-content: flex-end !important; }
  .flex-md-content-center { align-content: center !important; }
  .flex-md-content-between { align-content: space-between !important; }
  .flex-md-content-around { align-content: space-around !important; }
  .flex-md-content-stretch { align-content: stretch !important; }
  .flex-md-auto { flex: 1 1 auto !important; }
  .flex-md-shrink-0 { flex-shrink: 0 !important; }
  .flex-md-self-auto { align-self: auto !important; }
  .flex-md-self-start { align-self: flex-start !important; }
  .flex-md-self-end { align-self: flex-end !important; }
  .flex-md-self-center { align-self: center !important; }
  .flex-md-self-baseline { align-self: baseline !important; }
  .flex-md-self-stretch { align-self: stretch !important; }
  .flex-md-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 1012px) {
  .flex-lg-row { flex-direction: row !important; }
  .flex-lg-row-reverse { flex-direction: row-reverse !important; }
  .flex-lg-column { flex-direction: column !important; }
  .flex-lg-wrap { flex-wrap: wrap !important; }
  .flex-lg-nowrap { flex-wrap: nowrap !important; }
  .flex-lg-justify-start { justify-content: flex-start !important; }
  .flex-lg-justify-end { justify-content: flex-end !important; }
  .flex-lg-justify-center { justify-content: center !important; }
  .flex-lg-justify-between { justify-content: space-between !important; }
  .flex-lg-justify-around { justify-content: space-around !important; }
  .flex-lg-items-start { align-items: flex-start !important; }
  .flex-lg-items-end { align-items: flex-end !important; }
  .flex-lg-items-center { align-items: center !important; }
  .flex-lg-items-baseline { align-items: baseline !important; }
  .flex-lg-items-stretch { align-items: stretch !important; }
  .flex-lg-content-start { align-content: flex-start !important; }
  .flex-lg-content-end { align-content: flex-end !important; }
  .flex-lg-content-center { align-content: center !important; }
  .flex-lg-content-between { align-content: space-between !important; }
  .flex-lg-content-around { align-content: space-around !important; }
  .flex-lg-content-stretch { align-content: stretch !important; }
  .flex-lg-auto { flex: 1 1 auto !important; }
  .flex-lg-shrink-0 { flex-shrink: 0 !important; }
  .flex-lg-self-auto { align-self: auto !important; }
  .flex-lg-self-start { align-self: flex-start !important; }
  .flex-lg-self-end { align-self: flex-end !important; }
  .flex-lg-self-center { align-self: center !important; }
  .flex-lg-self-baseline { align-self: baseline !important; }
  .flex-lg-self-stretch { align-self: stretch !important; }
  .flex-lg-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 1280px) {
  .flex-xl-row { flex-direction: row !important; }
  .flex-xl-row-reverse { flex-direction: row-reverse !important; }
  .flex-xl-column { flex-direction: column !important; }
  .flex-xl-wrap { flex-wrap: wrap !important; }
  .flex-xl-nowrap { flex-wrap: nowrap !important; }
  .flex-xl-justify-start { justify-content: flex-start !important; }
  .flex-xl-justify-end { justify-content: flex-end !important; }
  .flex-xl-justify-center { justify-content: center !important; }
  .flex-xl-justify-between { justify-content: space-between !important; }
  .flex-xl-justify-around { justify-content: space-around !important; }
  .flex-xl-items-start { align-items: flex-start !important; }
  .flex-xl-items-end { align-items: flex-end !important; }
  .flex-xl-items-center { align-items: center !important; }
  .flex-xl-items-baseline { align-items: baseline !important; }
  .flex-xl-items-stretch { align-items: stretch !important; }
  .flex-xl-content-start { align-content: flex-start !important; }
  .flex-xl-content-end { align-content: flex-end !important; }
  .flex-xl-content-center { align-content: center !important; }
  .flex-xl-content-between { align-content: space-between !important; }
  .flex-xl-content-around { align-content: space-around !important; }
  .flex-xl-content-stretch { align-content: stretch !important; }
  .flex-xl-auto { flex: 1 1 auto !important; }
  .flex-xl-shrink-0 { flex-shrink: 0 !important; }
  .flex-xl-self-auto { align-self: auto !important; }
  .flex-xl-self-start { align-self: flex-start !important; }
  .flex-xl-self-end { align-self: flex-end !important; }
  .flex-xl-self-center { align-self: center !important; }
  .flex-xl-self-baseline { align-self: baseline !important; }
  .flex-xl-self-stretch { align-self: stretch !important; }
  .flex-xl-item-equal { flex-grow: 1; flex-basis: 0px; }
}

.position-static { position: static !important; }

.position-relative { position: relative !important; }

.position-absolute { position: absolute !important; }

.position-fixed { position: fixed !important; }

.top-0 { top: 0px !important; }

.right-0 { right: 0px !important; }

.bottom-0 { bottom: 0px !important; }

.left-0 { left: 0px !important; }

.v-align-middle { vertical-align: middle !important; }

.v-align-top { vertical-align: top !important; }

.v-align-bottom { vertical-align: bottom !important; }

.v-align-text-top { vertical-align: text-top !important; }

.v-align-text-bottom { vertical-align: text-bottom !important; }

.v-align-baseline { vertical-align: baseline !important; }

.overflow-hidden { overflow: hidden !important; }

.overflow-scroll { overflow: scroll !important; }

.overflow-auto { overflow: auto !important; }

.clearfix::before { display: table; content: ""; }

.clearfix::after { display: table; clear: both; content: ""; }

.float-left { float: left !important; }

.float-right { float: right !important; }

.float-none { float: none !important; }

@media (min-width: 544px) {
  .float-sm-left { float: left !important; }
  .float-sm-right { float: right !important; }
  .float-sm-none { float: none !important; }
}

@media (min-width: 768px) {
  .float-md-left { float: left !important; }
  .float-md-right { float: right !important; }
  .float-md-none { float: none !important; }
}

@media (min-width: 1012px) {
  .float-lg-left { float: left !important; }
  .float-lg-right { float: right !important; }
  .float-lg-none { float: none !important; }
}

@media (min-width: 1280px) {
  .float-xl-left { float: left !important; }
  .float-xl-right { float: right !important; }
  .float-xl-none { float: none !important; }
}

.width-fit { max-width: 100% !important; }

.width-full { width: 100% !important; }

.height-fit { max-height: 100% !important; }

.height-full { height: 100% !important; }

.min-width-0 { min-width: 0px !important; }

.direction-rtl { direction: rtl !important; }

.direction-ltr { direction: ltr !important; }

@media (min-width: 544px) {
  .direction-sm-rtl { direction: rtl !important; }
  .direction-sm-ltr { direction: ltr !important; }
}

@media (min-width: 768px) {
  .direction-md-rtl { direction: rtl !important; }
  .direction-md-ltr { direction: ltr !important; }
}

@media (min-width: 1012px) {
  .direction-lg-rtl { direction: rtl !important; }
  .direction-lg-ltr { direction: ltr !important; }
}

@media (min-width: 1280px) {
  .direction-xl-rtl { direction: rtl !important; }
  .direction-xl-ltr { direction: ltr !important; }
}

.m-0 { margin: 0px !important; }

.mt-0 { margin-top: 0px !important; }

.mr-0 { margin-right: 0px !important; }

.mb-0 { margin-bottom: 0px !important; }

.ml-0 { margin-left: 0px !important; }

.mx-0 { margin-right: 0px !important; margin-left: 0px !important; }

.my-0 { margin-top: 0px !important; margin-bottom: 0px !important; }

.m-1 { margin: 4px !important; }

.mt-1 { margin-top: 4px !important; }

.mr-1 { margin-right: 4px !important; }

.mb-1 { margin-bottom: 4px !important; }

.ml-1 { margin-left: 4px !important; }

.mt-n1 { margin-top: -4px !important; }

.mr-n1 { margin-right: -4px !important; }

.mb-n1 { margin-bottom: -4px !important; }

.ml-n1 { margin-left: -4px !important; }

.mx-1 { margin-right: 4px !important; margin-left: 4px !important; }

.my-1 { margin-top: 4px !important; margin-bottom: 4px !important; }

.m-2 { margin: 8px !important; }

.mt-2 { margin-top: 8px !important; }

.mr-2 { margin-right: 8px !important; }

.mb-2 { margin-bottom: 8px !important; }

.ml-2 { margin-left: 8px !important; }

.mt-n2 { margin-top: -8px !important; }

.mr-n2 { margin-right: -8px !important; }

.mb-n2 { margin-bottom: -8px !important; }

.ml-n2 { margin-left: -8px !important; }

.mx-2 { margin-right: 8px !important; margin-left: 8px !important; }

.my-2 { margin-top: 8px !important; margin-bottom: 8px !important; }

.m-3 { margin: 16px !important; }

.mt-3 { margin-top: 16px !important; }

.mr-3 { margin-right: 16px !important; }

.mb-3 { margin-bottom: 16px !important; }

.ml-3 { margin-left: 16px !important; }

.mt-n3 { margin-top: -16px !important; }

.mr-n3 { margin-right: -16px !important; }

.mb-n3 { margin-bottom: -16px !important; }

.ml-n3 { margin-left: -16px !important; }

.mx-3 { margin-right: 16px !important; margin-left: 16px !important; }

.my-3 { margin-top: 16px !important; margin-bottom: 16px !important; }

.m-4 { margin: 24px !important; }

.mt-4 { margin-top: 24px !important; }

.mr-4 { margin-right: 24px !important; }

.mb-4 { margin-bottom: 24px !important; }

.ml-4 { margin-left: 24px !important; }

.mt-n4 { margin-top: -24px !important; }

.mr-n4 { margin-right: -24px !important; }

.mb-n4 { margin-bottom: -24px !important; }

.ml-n4 { margin-left: -24px !important; }

.mx-4 { margin-right: 24px !important; margin-left: 24px !important; }

.my-4 { margin-top: 24px !important; margin-bottom: 24px !important; }

.m-5 { margin: 32px !important; }

.mt-5 { margin-top: 32px !important; }

.mr-5 { margin-right: 32px !important; }

.mb-5 { margin-bottom: 32px !important; }

.ml-5 { margin-left: 32px !important; }

.mt-n5 { margin-top: -32px !important; }

.mr-n5 { margin-right: -32px !important; }

.mb-n5 { margin-bottom: -32px !important; }

.ml-n5 { margin-left: -32px !important; }

.mx-5 { margin-right: 32px !important; margin-left: 32px !important; }

.my-5 { margin-top: 32px !important; margin-bottom: 32px !important; }

.m-6 { margin: 40px !important; }

.mt-6 { margin-top: 40px !important; }

.mr-6 { margin-right: 40px !important; }

.mb-6 { margin-bottom: 40px !important; }

.ml-6 { margin-left: 40px !important; }

.mt-n6 { margin-top: -40px !important; }

.mr-n6 { margin-right: -40px !important; }

.mb-n6 { margin-bottom: -40px !important; }

.ml-n6 { margin-left: -40px !important; }

.mx-6 { margin-right: 40px !important; margin-left: 40px !important; }

.my-6 { margin-top: 40px !important; margin-bottom: 40px !important; }

.mx-auto { margin-right: auto !important; margin-left: auto !important; }

@media (min-width: 544px) {
  .m-sm-0 { margin: 0px !important; }
  .mt-sm-0 { margin-top: 0px !important; }
  .mr-sm-0 { margin-right: 0px !important; }
  .mb-sm-0 { margin-bottom: 0px !important; }
  .ml-sm-0 { margin-left: 0px !important; }
  .mx-sm-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-sm-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-sm-1 { margin: 4px !important; }
  .mt-sm-1 { margin-top: 4px !important; }
  .mr-sm-1 { margin-right: 4px !important; }
  .mb-sm-1 { margin-bottom: 4px !important; }
  .ml-sm-1 { margin-left: 4px !important; }
  .mt-sm-n1 { margin-top: -4px !important; }
  .mr-sm-n1 { margin-right: -4px !important; }
  .mb-sm-n1 { margin-bottom: -4px !important; }
  .ml-sm-n1 { margin-left: -4px !important; }
  .mx-sm-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-sm-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-sm-2 { margin: 8px !important; }
  .mt-sm-2 { margin-top: 8px !important; }
  .mr-sm-2 { margin-right: 8px !important; }
  .mb-sm-2 { margin-bottom: 8px !important; }
  .ml-sm-2 { margin-left: 8px !important; }
  .mt-sm-n2 { margin-top: -8px !important; }
  .mr-sm-n2 { margin-right: -8px !important; }
  .mb-sm-n2 { margin-bottom: -8px !important; }
  .ml-sm-n2 { margin-left: -8px !important; }
  .mx-sm-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-sm-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-sm-3 { margin: 16px !important; }
  .mt-sm-3 { margin-top: 16px !important; }
  .mr-sm-3 { margin-right: 16px !important; }
  .mb-sm-3 { margin-bottom: 16px !important; }
  .ml-sm-3 { margin-left: 16px !important; }
  .mt-sm-n3 { margin-top: -16px !important; }
  .mr-sm-n3 { margin-right: -16px !important; }
  .mb-sm-n3 { margin-bottom: -16px !important; }
  .ml-sm-n3 { margin-left: -16px !important; }
  .mx-sm-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-sm-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-sm-4 { margin: 24px !important; }
  .mt-sm-4 { margin-top: 24px !important; }
  .mr-sm-4 { margin-right: 24px !important; }
  .mb-sm-4 { margin-bottom: 24px !important; }
  .ml-sm-4 { margin-left: 24px !important; }
  .mt-sm-n4 { margin-top: -24px !important; }
  .mr-sm-n4 { margin-right: -24px !important; }
  .mb-sm-n4 { margin-bottom: -24px !important; }
  .ml-sm-n4 { margin-left: -24px !important; }
  .mx-sm-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-sm-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-sm-5 { margin: 32px !important; }
  .mt-sm-5 { margin-top: 32px !important; }
  .mr-sm-5 { margin-right: 32px !important; }
  .mb-sm-5 { margin-bottom: 32px !important; }
  .ml-sm-5 { margin-left: 32px !important; }
  .mt-sm-n5 { margin-top: -32px !important; }
  .mr-sm-n5 { margin-right: -32px !important; }
  .mb-sm-n5 { margin-bottom: -32px !important; }
  .ml-sm-n5 { margin-left: -32px !important; }
  .mx-sm-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-sm-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-sm-6 { margin: 40px !important; }
  .mt-sm-6 { margin-top: 40px !important; }
  .mr-sm-6 { margin-right: 40px !important; }
  .mb-sm-6 { margin-bottom: 40px !important; }
  .ml-sm-6 { margin-left: 40px !important; }
  .mt-sm-n6 { margin-top: -40px !important; }
  .mr-sm-n6 { margin-right: -40px !important; }
  .mb-sm-n6 { margin-bottom: -40px !important; }
  .ml-sm-n6 { margin-left: -40px !important; }
  .mx-sm-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-sm-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-sm-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 768px) {
  .m-md-0 { margin: 0px !important; }
  .mt-md-0 { margin-top: 0px !important; }
  .mr-md-0 { margin-right: 0px !important; }
  .mb-md-0 { margin-bottom: 0px !important; }
  .ml-md-0 { margin-left: 0px !important; }
  .mx-md-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-md-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-md-1 { margin: 4px !important; }
  .mt-md-1 { margin-top: 4px !important; }
  .mr-md-1 { margin-right: 4px !important; }
  .mb-md-1 { margin-bottom: 4px !important; }
  .ml-md-1 { margin-left: 4px !important; }
  .mt-md-n1 { margin-top: -4px !important; }
  .mr-md-n1 { margin-right: -4px !important; }
  .mb-md-n1 { margin-bottom: -4px !important; }
  .ml-md-n1 { margin-left: -4px !important; }
  .mx-md-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-md-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-md-2 { margin: 8px !important; }
  .mt-md-2 { margin-top: 8px !important; }
  .mr-md-2 { margin-right: 8px !important; }
  .mb-md-2 { margin-bottom: 8px !important; }
  .ml-md-2 { margin-left: 8px !important; }
  .mt-md-n2 { margin-top: -8px !important; }
  .mr-md-n2 { margin-right: -8px !important; }
  .mb-md-n2 { margin-bottom: -8px !important; }
  .ml-md-n2 { margin-left: -8px !important; }
  .mx-md-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-md-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-md-3 { margin: 16px !important; }
  .mt-md-3 { margin-top: 16px !important; }
  .mr-md-3 { margin-right: 16px !important; }
  .mb-md-3 { margin-bottom: 16px !important; }
  .ml-md-3 { margin-left: 16px !important; }
  .mt-md-n3 { margin-top: -16px !important; }
  .mr-md-n3 { margin-right: -16px !important; }
  .mb-md-n3 { margin-bottom: -16px !important; }
  .ml-md-n3 { margin-left: -16px !important; }
  .mx-md-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-md-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-md-4 { margin: 24px !important; }
  .mt-md-4 { margin-top: 24px !important; }
  .mr-md-4 { margin-right: 24px !important; }
  .mb-md-4 { margin-bottom: 24px !important; }
  .ml-md-4 { margin-left: 24px !important; }
  .mt-md-n4 { margin-top: -24px !important; }
  .mr-md-n4 { margin-right: -24px !important; }
  .mb-md-n4 { margin-bottom: -24px !important; }
  .ml-md-n4 { margin-left: -24px !important; }
  .mx-md-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-md-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-md-5 { margin: 32px !important; }
  .mt-md-5 { margin-top: 32px !important; }
  .mr-md-5 { margin-right: 32px !important; }
  .mb-md-5 { margin-bottom: 32px !important; }
  .ml-md-5 { margin-left: 32px !important; }
  .mt-md-n5 { margin-top: -32px !important; }
  .mr-md-n5 { margin-right: -32px !important; }
  .mb-md-n5 { margin-bottom: -32px !important; }
  .ml-md-n5 { margin-left: -32px !important; }
  .mx-md-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-md-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-md-6 { margin: 40px !important; }
  .mt-md-6 { margin-top: 40px !important; }
  .mr-md-6 { margin-right: 40px !important; }
  .mb-md-6 { margin-bottom: 40px !important; }
  .ml-md-6 { margin-left: 40px !important; }
  .mt-md-n6 { margin-top: -40px !important; }
  .mr-md-n6 { margin-right: -40px !important; }
  .mb-md-n6 { margin-bottom: -40px !important; }
  .ml-md-n6 { margin-left: -40px !important; }
  .mx-md-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-md-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-md-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 1012px) {
  .m-lg-0 { margin: 0px !important; }
  .mt-lg-0 { margin-top: 0px !important; }
  .mr-lg-0 { margin-right: 0px !important; }
  .mb-lg-0 { margin-bottom: 0px !important; }
  .ml-lg-0 { margin-left: 0px !important; }
  .mx-lg-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-lg-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-lg-1 { margin: 4px !important; }
  .mt-lg-1 { margin-top: 4px !important; }
  .mr-lg-1 { margin-right: 4px !important; }
  .mb-lg-1 { margin-bottom: 4px !important; }
  .ml-lg-1 { margin-left: 4px !important; }
  .mt-lg-n1 { margin-top: -4px !important; }
  .mr-lg-n1 { margin-right: -4px !important; }
  .mb-lg-n1 { margin-bottom: -4px !important; }
  .ml-lg-n1 { margin-left: -4px !important; }
  .mx-lg-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-lg-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-lg-2 { margin: 8px !important; }
  .mt-lg-2 { margin-top: 8px !important; }
  .mr-lg-2 { margin-right: 8px !important; }
  .mb-lg-2 { margin-bottom: 8px !important; }
  .ml-lg-2 { margin-left: 8px !important; }
  .mt-lg-n2 { margin-top: -8px !important; }
  .mr-lg-n2 { margin-right: -8px !important; }
  .mb-lg-n2 { margin-bottom: -8px !important; }
  .ml-lg-n2 { margin-left: -8px !important; }
  .mx-lg-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-lg-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-lg-3 { margin: 16px !important; }
  .mt-lg-3 { margin-top: 16px !important; }
  .mr-lg-3 { margin-right: 16px !important; }
  .mb-lg-3 { margin-bottom: 16px !important; }
  .ml-lg-3 { margin-left: 16px !important; }
  .mt-lg-n3 { margin-top: -16px !important; }
  .mr-lg-n3 { margin-right: -16px !important; }
  .mb-lg-n3 { margin-bottom: -16px !important; }
  .ml-lg-n3 { margin-left: -16px !important; }
  .mx-lg-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-lg-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-lg-4 { margin: 24px !important; }
  .mt-lg-4 { margin-top: 24px !important; }
  .mr-lg-4 { margin-right: 24px !important; }
  .mb-lg-4 { margin-bottom: 24px !important; }
  .ml-lg-4 { margin-left: 24px !important; }
  .mt-lg-n4 { margin-top: -24px !important; }
  .mr-lg-n4 { margin-right: -24px !important; }
  .mb-lg-n4 { margin-bottom: -24px !important; }
  .ml-lg-n4 { margin-left: -24px !important; }
  .mx-lg-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-lg-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-lg-5 { margin: 32px !important; }
  .mt-lg-5 { margin-top: 32px !important; }
  .mr-lg-5 { margin-right: 32px !important; }
  .mb-lg-5 { margin-bottom: 32px !important; }
  .ml-lg-5 { margin-left: 32px !important; }
  .mt-lg-n5 { margin-top: -32px !important; }
  .mr-lg-n5 { margin-right: -32px !important; }
  .mb-lg-n5 { margin-bottom: -32px !important; }
  .ml-lg-n5 { margin-left: -32px !important; }
  .mx-lg-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-lg-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-lg-6 { margin: 40px !important; }
  .mt-lg-6 { margin-top: 40px !important; }
  .mr-lg-6 { margin-right: 40px !important; }
  .mb-lg-6 { margin-bottom: 40px !important; }
  .ml-lg-6 { margin-left: 40px !important; }
  .mt-lg-n6 { margin-top: -40px !important; }
  .mr-lg-n6 { margin-right: -40px !important; }
  .mb-lg-n6 { margin-bottom: -40px !important; }
  .ml-lg-n6 { margin-left: -40px !important; }
  .mx-lg-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-lg-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-lg-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 1280px) {
  .m-xl-0 { margin: 0px !important; }
  .mt-xl-0 { margin-top: 0px !important; }
  .mr-xl-0 { margin-right: 0px !important; }
  .mb-xl-0 { margin-bottom: 0px !important; }
  .ml-xl-0 { margin-left: 0px !important; }
  .mx-xl-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-xl-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-xl-1 { margin: 4px !important; }
  .mt-xl-1 { margin-top: 4px !important; }
  .mr-xl-1 { margin-right: 4px !important; }
  .mb-xl-1 { margin-bottom: 4px !important; }
  .ml-xl-1 { margin-left: 4px !important; }
  .mt-xl-n1 { margin-top: -4px !important; }
  .mr-xl-n1 { margin-right: -4px !important; }
  .mb-xl-n1 { margin-bottom: -4px !important; }
  .ml-xl-n1 { margin-left: -4px !important; }
  .mx-xl-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-xl-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-xl-2 { margin: 8px !important; }
  .mt-xl-2 { margin-top: 8px !important; }
  .mr-xl-2 { margin-right: 8px !important; }
  .mb-xl-2 { margin-bottom: 8px !important; }
  .ml-xl-2 { margin-left: 8px !important; }
  .mt-xl-n2 { margin-top: -8px !important; }
  .mr-xl-n2 { margin-right: -8px !important; }
  .mb-xl-n2 { margin-bottom: -8px !important; }
  .ml-xl-n2 { margin-left: -8px !important; }
  .mx-xl-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-xl-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-xl-3 { margin: 16px !important; }
  .mt-xl-3 { margin-top: 16px !important; }
  .mr-xl-3 { margin-right: 16px !important; }
  .mb-xl-3 { margin-bottom: 16px !important; }
  .ml-xl-3 { margin-left: 16px !important; }
  .mt-xl-n3 { margin-top: -16px !important; }
  .mr-xl-n3 { margin-right: -16px !important; }
  .mb-xl-n3 { margin-bottom: -16px !important; }
  .ml-xl-n3 { margin-left: -16px !important; }
  .mx-xl-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-xl-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-xl-4 { margin: 24px !important; }
  .mt-xl-4 { margin-top: 24px !important; }
  .mr-xl-4 { margin-right: 24px !important; }
  .mb-xl-4 { margin-bottom: 24px !important; }
  .ml-xl-4 { margin-left: 24px !important; }
  .mt-xl-n4 { margin-top: -24px !important; }
  .mr-xl-n4 { margin-right: -24px !important; }
  .mb-xl-n4 { margin-bottom: -24px !important; }
  .ml-xl-n4 { margin-left: -24px !important; }
  .mx-xl-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-xl-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-xl-5 { margin: 32px !important; }
  .mt-xl-5 { margin-top: 32px !important; }
  .mr-xl-5 { margin-right: 32px !important; }
  .mb-xl-5 { margin-bottom: 32px !important; }
  .ml-xl-5 { margin-left: 32px !important; }
  .mt-xl-n5 { margin-top: -32px !important; }
  .mr-xl-n5 { margin-right: -32px !important; }
  .mb-xl-n5 { margin-bottom: -32px !important; }
  .ml-xl-n5 { margin-left: -32px !important; }
  .mx-xl-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-xl-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-xl-6 { margin: 40px !important; }
  .mt-xl-6 { margin-top: 40px !important; }
  .mr-xl-6 { margin-right: 40px !important; }
  .mb-xl-6 { margin-bottom: 40px !important; }
  .ml-xl-6 { margin-left: 40px !important; }
  .mt-xl-n6 { margin-top: -40px !important; }
  .mr-xl-n6 { margin-right: -40px !important; }
  .mb-xl-n6 { margin-bottom: -40px !important; }
  .ml-xl-n6 { margin-left: -40px !important; }
  .mx-xl-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-xl-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-xl-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

.p-0 { padding: 0px !important; }

.pt-0 { padding-top: 0px !important; }

.pr-0 { padding-right: 0px !important; }

.pb-0 { padding-bottom: 0px !important; }

.pl-0 { padding-left: 0px !important; }

.px-0 { padding-right: 0px !important; padding-left: 0px !important; }

.py-0 { padding-top: 0px !important; padding-bottom: 0px !important; }

.p-1 { padding: 4px !important; }

.pt-1 { padding-top: 4px !important; }

.pr-1 { padding-right: 4px !important; }

.pb-1 { padding-bottom: 4px !important; }

.pl-1 { padding-left: 4px !important; }

.px-1 { padding-right: 4px !important; padding-left: 4px !important; }

.py-1 { padding-top: 4px !important; padding-bottom: 4px !important; }

.p-2 { padding: 8px !important; }

.pt-2 { padding-top: 8px !important; }

.pr-2 { padding-right: 8px !important; }

.pb-2 { padding-bottom: 8px !important; }

.pl-2 { padding-left: 8px !important; }

.px-2 { padding-right: 8px !important; padding-left: 8px !important; }

.py-2 { padding-top: 8px !important; padding-bottom: 8px !important; }

.p-3 { padding: 16px !important; }

.pt-3 { padding-top: 16px !important; }

.pr-3 { padding-right: 16px !important; }

.pb-3 { padding-bottom: 16px !important; }

.pl-3 { padding-left: 16px !important; }

.px-3 { padding-right: 16px !important; padding-left: 16px !important; }

.py-3 { padding-top: 16px !important; padding-bottom: 16px !important; }

.p-4 { padding: 24px !important; }

.pt-4 { padding-top: 24px !important; }

.pr-4 { padding-right: 24px !important; }

.pb-4 { padding-bottom: 24px !important; }

.pl-4 { padding-left: 24px !important; }

.px-4 { padding-right: 24px !important; padding-left: 24px !important; }

.py-4 { padding-top: 24px !important; padding-bottom: 24px !important; }

.p-5 { padding: 32px !important; }

.pt-5 { padding-top: 32px !important; }

.pr-5 { padding-right: 32px !important; }

.pb-5 { padding-bottom: 32px !important; }

.pl-5 { padding-left: 32px !important; }

.px-5 { padding-right: 32px !important; padding-left: 32px !important; }

.py-5 { padding-top: 32px !important; padding-bottom: 32px !important; }

.p-6 { padding: 40px !important; }

.pt-6 { padding-top: 40px !important; }

.pr-6 { padding-right: 40px !important; }

.pb-6 { padding-bottom: 40px !important; }

.pl-6 { padding-left: 40px !important; }

.px-6 { padding-right: 40px !important; padding-left: 40px !important; }

.py-6 { padding-top: 40px !important; padding-bottom: 40px !important; }

@media (min-width: 544px) {
  .p-sm-0 { padding: 0px !important; }
  .pt-sm-0 { padding-top: 0px !important; }
  .pr-sm-0 { padding-right: 0px !important; }
  .pb-sm-0 { padding-bottom: 0px !important; }
  .pl-sm-0 { padding-left: 0px !important; }
  .px-sm-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-sm-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-sm-1 { padding: 4px !important; }
  .pt-sm-1 { padding-top: 4px !important; }
  .pr-sm-1 { padding-right: 4px !important; }
  .pb-sm-1 { padding-bottom: 4px !important; }
  .pl-sm-1 { padding-left: 4px !important; }
  .px-sm-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-sm-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-sm-2 { padding: 8px !important; }
  .pt-sm-2 { padding-top: 8px !important; }
  .pr-sm-2 { padding-right: 8px !important; }
  .pb-sm-2 { padding-bottom: 8px !important; }
  .pl-sm-2 { padding-left: 8px !important; }
  .px-sm-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-sm-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-sm-3 { padding: 16px !important; }
  .pt-sm-3 { padding-top: 16px !important; }
  .pr-sm-3 { padding-right: 16px !important; }
  .pb-sm-3 { padding-bottom: 16px !important; }
  .pl-sm-3 { padding-left: 16px !important; }
  .px-sm-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-sm-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-sm-4 { padding: 24px !important; }
  .pt-sm-4 { padding-top: 24px !important; }
  .pr-sm-4 { padding-right: 24px !important; }
  .pb-sm-4 { padding-bottom: 24px !important; }
  .pl-sm-4 { padding-left: 24px !important; }
  .px-sm-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-sm-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-sm-5 { padding: 32px !important; }
  .pt-sm-5 { padding-top: 32px !important; }
  .pr-sm-5 { padding-right: 32px !important; }
  .pb-sm-5 { padding-bottom: 32px !important; }
  .pl-sm-5 { padding-left: 32px !important; }
  .px-sm-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-sm-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-sm-6 { padding: 40px !important; }
  .pt-sm-6 { padding-top: 40px !important; }
  .pr-sm-6 { padding-right: 40px !important; }
  .pb-sm-6 { padding-bottom: 40px !important; }
  .pl-sm-6 { padding-left: 40px !important; }
  .px-sm-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-sm-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 768px) {
  .p-md-0 { padding: 0px !important; }
  .pt-md-0 { padding-top: 0px !important; }
  .pr-md-0 { padding-right: 0px !important; }
  .pb-md-0 { padding-bottom: 0px !important; }
  .pl-md-0 { padding-left: 0px !important; }
  .px-md-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-md-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-md-1 { padding: 4px !important; }
  .pt-md-1 { padding-top: 4px !important; }
  .pr-md-1 { padding-right: 4px !important; }
  .pb-md-1 { padding-bottom: 4px !important; }
  .pl-md-1 { padding-left: 4px !important; }
  .px-md-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-md-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-md-2 { padding: 8px !important; }
  .pt-md-2 { padding-top: 8px !important; }
  .pr-md-2 { padding-right: 8px !important; }
  .pb-md-2 { padding-bottom: 8px !important; }
  .pl-md-2 { padding-left: 8px !important; }
  .px-md-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-md-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-md-3 { padding: 16px !important; }
  .pt-md-3 { padding-top: 16px !important; }
  .pr-md-3 { padding-right: 16px !important; }
  .pb-md-3 { padding-bottom: 16px !important; }
  .pl-md-3 { padding-left: 16px !important; }
  .px-md-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-md-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-md-4 { padding: 24px !important; }
  .pt-md-4 { padding-top: 24px !important; }
  .pr-md-4 { padding-right: 24px !important; }
  .pb-md-4 { padding-bottom: 24px !important; }
  .pl-md-4 { padding-left: 24px !important; }
  .px-md-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-md-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-md-5 { padding: 32px !important; }
  .pt-md-5 { padding-top: 32px !important; }
  .pr-md-5 { padding-right: 32px !important; }
  .pb-md-5 { padding-bottom: 32px !important; }
  .pl-md-5 { padding-left: 32px !important; }
  .px-md-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-md-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-md-6 { padding: 40px !important; }
  .pt-md-6 { padding-top: 40px !important; }
  .pr-md-6 { padding-right: 40px !important; }
  .pb-md-6 { padding-bottom: 40px !important; }
  .pl-md-6 { padding-left: 40px !important; }
  .px-md-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-md-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 1012px) {
  .p-lg-0 { padding: 0px !important; }
  .pt-lg-0 { padding-top: 0px !important; }
  .pr-lg-0 { padding-right: 0px !important; }
  .pb-lg-0 { padding-bottom: 0px !important; }
  .pl-lg-0 { padding-left: 0px !important; }
  .px-lg-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-lg-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-lg-1 { padding: 4px !important; }
  .pt-lg-1 { padding-top: 4px !important; }
  .pr-lg-1 { padding-right: 4px !important; }
  .pb-lg-1 { padding-bottom: 4px !important; }
  .pl-lg-1 { padding-left: 4px !important; }
  .px-lg-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-lg-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-lg-2 { padding: 8px !important; }
  .pt-lg-2 { padding-top: 8px !important; }
  .pr-lg-2 { padding-right: 8px !important; }
  .pb-lg-2 { padding-bottom: 8px !important; }
  .pl-lg-2 { padding-left: 8px !important; }
  .px-lg-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-lg-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-lg-3 { padding: 16px !important; }
  .pt-lg-3 { padding-top: 16px !important; }
  .pr-lg-3 { padding-right: 16px !important; }
  .pb-lg-3 { padding-bottom: 16px !important; }
  .pl-lg-3 { padding-left: 16px !important; }
  .px-lg-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-lg-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-lg-4 { padding: 24px !important; }
  .pt-lg-4 { padding-top: 24px !important; }
  .pr-lg-4 { padding-right: 24px !important; }
  .pb-lg-4 { padding-bottom: 24px !important; }
  .pl-lg-4 { padding-left: 24px !important; }
  .px-lg-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-lg-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-lg-5 { padding: 32px !important; }
  .pt-lg-5 { padding-top: 32px !important; }
  .pr-lg-5 { padding-right: 32px !important; }
  .pb-lg-5 { padding-bottom: 32px !important; }
  .pl-lg-5 { padding-left: 32px !important; }
  .px-lg-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-lg-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-lg-6 { padding: 40px !important; }
  .pt-lg-6 { padding-top: 40px !important; }
  .pr-lg-6 { padding-right: 40px !important; }
  .pb-lg-6 { padding-bottom: 40px !important; }
  .pl-lg-6 { padding-left: 40px !important; }
  .px-lg-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-lg-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 1280px) {
  .p-xl-0 { padding: 0px !important; }
  .pt-xl-0 { padding-top: 0px !important; }
  .pr-xl-0 { padding-right: 0px !important; }
  .pb-xl-0 { padding-bottom: 0px !important; }
  .pl-xl-0 { padding-left: 0px !important; }
  .px-xl-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-xl-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-xl-1 { padding: 4px !important; }
  .pt-xl-1 { padding-top: 4px !important; }
  .pr-xl-1 { padding-right: 4px !important; }
  .pb-xl-1 { padding-bottom: 4px !important; }
  .pl-xl-1 { padding-left: 4px !important; }
  .px-xl-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-xl-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-xl-2 { padding: 8px !important; }
  .pt-xl-2 { padding-top: 8px !important; }
  .pr-xl-2 { padding-right: 8px !important; }
  .pb-xl-2 { padding-bottom: 8px !important; }
  .pl-xl-2 { padding-left: 8px !important; }
  .px-xl-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-xl-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-xl-3 { padding: 16px !important; }
  .pt-xl-3 { padding-top: 16px !important; }
  .pr-xl-3 { padding-right: 16px !important; }
  .pb-xl-3 { padding-bottom: 16px !important; }
  .pl-xl-3 { padding-left: 16px !important; }
  .px-xl-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-xl-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-xl-4 { padding: 24px !important; }
  .pt-xl-4 { padding-top: 24px !important; }
  .pr-xl-4 { padding-right: 24px !important; }
  .pb-xl-4 { padding-bottom: 24px !important; }
  .pl-xl-4 { padding-left: 24px !important; }
  .px-xl-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-xl-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-xl-5 { padding: 32px !important; }
  .pt-xl-5 { padding-top: 32px !important; }
  .pr-xl-5 { padding-right: 32px !important; }
  .pb-xl-5 { padding-bottom: 32px !important; }
  .pl-xl-5 { padding-left: 32px !important; }
  .px-xl-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-xl-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-xl-6 { padding: 40px !important; }
  .pt-xl-6 { padding-top: 40px !important; }
  .pr-xl-6 { padding-right: 40px !important; }
  .pb-xl-6 { padding-bottom: 40px !important; }
  .pl-xl-6 { padding-left: 40px !important; }
  .px-xl-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-xl-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

.p-responsive { padding-right: 16px !important; padding-left: 16px !importa=
nt; }

@media (min-width: 544px) {
  .p-responsive { padding-right: 40px !important; padding-left: 40px !impor=
tant; }
}

@media (min-width: 1012px) {
  .p-responsive { padding-right: 16px !important; padding-left: 16px !impor=
tant; }
}

.h1 { font-size: 26px !important; }

@media (min-width: 768px) {
  .h1 { font-size: 32px !important; }
}

.h2 { font-size: 22px !important; }

@media (min-width: 768px) {
  .h2 { font-size: 24px !important; }
}

.h3 { font-size: 18px !important; }

@media (min-width: 768px) {
  .h3 { font-size: 20px !important; }
}

.h4 { font-size: 16px !important; }

.h5 { font-size: 14px !important; }

.h6 { font-size: 12px !important; }

.h1, .h2, .h3, .h4, .h5, .h6 { font-weight: 600 !important; }

.f1 { font-size: 26px !important; }

@media (min-width: 768px) {
  .f1 { font-size: 32px !important; }
}

.f2 { font-size: 22px !important; }

@media (min-width: 768px) {
  .f2 { font-size: 24px !important; }
}

.f3 { font-size: 18px !important; }

@media (min-width: 768px) {
  .f3 { font-size: 20px !important; }
}

.f4 { font-size: 16px !important; }

@media (min-width: 768px) {
  .f4 { font-size: 16px !important; }
}

.f5 { font-size: 14px !important; }

.f6 { font-size: 12px !important; }

.f00-light { font-size: 40px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f00-light { font-size: 48px !important; }
}

.f0-light { font-size: 32px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f0-light { font-size: 40px !important; }
}

.f1-light { font-size: 26px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f1-light { font-size: 32px !important; }
}

.f2-light { font-size: 22px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f2-light { font-size: 24px !important; }
}

.f3-light { font-size: 18px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f3-light { font-size: 20px !important; }
}

.text-small { font-size: 12px !important; }

.lead { margin-bottom: 30px; font-size: 20px; font-weight: 300; color: rgb(=
88, 96, 105); }

.lh-condensed-ultra { line-height: 1 !important; }

.lh-condensed { line-height: 1.25 !important; }

.lh-default { line-height: 1.5 !important; }

.lh-0 { line-height: 0 !important; }

.text-right { text-align: right !important; }

.text-left { text-align: left !important; }

.text-center { text-align: center !important; }

@media (min-width: 544px) {
  .text-sm-right { text-align: right !important; }
  .text-sm-left { text-align: left !important; }
  .text-sm-center { text-align: center !important; }
}

@media (min-width: 768px) {
  .text-md-right { text-align: right !important; }
  .text-md-left { text-align: left !important; }
  .text-md-center { text-align: center !important; }
}

@media (min-width: 1012px) {
  .text-lg-right { text-align: right !important; }
  .text-lg-left { text-align: left !important; }
  .text-lg-center { text-align: center !important; }
}

@media (min-width: 1280px) {
  .text-xl-right { text-align: right !important; }
  .text-xl-left { text-align: left !important; }
  .text-xl-center { text-align: center !important; }
}

.text-normal { font-weight: 400 !important; }

.text-bold { font-weight: 600 !important; }

.text-italic { font-style: italic !important; }

.text-uppercase { text-transform: uppercase !important; }

.text-underline { text-decoration: underline !important; }

.no-underline { text-decoration: none !important; }

.no-wrap { white-space: nowrap !important; }

.ws-normal { white-space: normal !important; }

.wb-break-all { word-break: break-all !important; }

.text-emphasized { font-weight: 600; color: rgb(36, 41, 46); }

.list-style-none { list-style: none !important; }

.text-shadow-dark { text-shadow: rgba(27, 31, 35, 0.25) 0px 1px 1px, rgba(2=
7, 31, 35, 0.75) 0px 1px 25px; }

.text-shadow-light { text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; }

.text-mono { font-family: SFMono-Regular, Consolas, "Liberation Mono", Menl=
o, Courier, monospace; }

.user-select-none { user-select: none !important; }

.d-block { display: block !important; }

.d-flex { display: flex !important; }

.d-inline { display: inline !important; }

.d-inline-block { display: inline-block !important; }

.d-inline-flex { display: inline-flex !important; }

.d-none { display: none !important; }

.d-table { display: table !important; }

.d-table-cell { display: table-cell !important; }

@media (min-width: 544px) {
  .d-sm-block { display: block !important; }
  .d-sm-flex { display: flex !important; }
  .d-sm-inline { display: inline !important; }
  .d-sm-inline-block { display: inline-block !important; }
  .d-sm-inline-flex { display: inline-flex !important; }
  .d-sm-none { display: none !important; }
  .d-sm-table { display: table !important; }
  .d-sm-table-cell { display: table-cell !important; }
}

@media (min-width: 768px) {
  .d-md-block { display: block !important; }
  .d-md-flex { display: flex !important; }
  .d-md-inline { display: inline !important; }
  .d-md-inline-block { display: inline-block !important; }
  .d-md-inline-flex { display: inline-flex !important; }
  .d-md-none { display: none !important; }
  .d-md-table { display: table !important; }
  .d-md-table-cell { display: table-cell !important; }
}

@media (min-width: 1012px) {
  .d-lg-block { display: block !important; }
  .d-lg-flex { display: flex !important; }
  .d-lg-inline { display: inline !important; }
  .d-lg-inline-block { display: inline-block !important; }
  .d-lg-inline-flex { display: inline-flex !important; }
  .d-lg-none { display: none !important; }
  .d-lg-table { display: table !important; }
  .d-lg-table-cell { display: table-cell !important; }
}

@media (min-width: 1280px) {
  .d-xl-block { display: block !important; }
  .d-xl-flex { display: flex !important; }
  .d-xl-inline { display: inline !important; }
  .d-xl-inline-block { display: inline-block !important; }
  .d-xl-inline-flex { display: inline-flex !important; }
  .d-xl-none { display: none !important; }
  .d-xl-table { display: table !important; }
  .d-xl-table-cell { display: table-cell !important; }
}

.v-hidden { visibility: hidden !important; }

.v-visible { visibility: visible !important; }

@media (max-width: 544px) {
  .hide-sm { display: none !important; }
}

@media (min-width: 544px) and (max-width: 768px) {
  .hide-md { display: none !important; }
}

@media (min-width: 768px) and (max-width: 1012px) {
  .hide-lg { display: none !important; }
}

@media (min-width: 1012px) {
  .hide-xl { display: none !important; }
}

.table-fixed { table-layout: fixed !important; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; overf=
low: hidden; clip: rect(0px, 0px, 0px, 0px); overflow-wrap: normal; border:=
 0px; }

.show-on-focus { position: absolute; width: 1px; height: 1px; margin: 0px; =
overflow: hidden; clip: rect(1px, 1px, 1px, 1px); }

.show-on-focus:focus { z-index: 20; width: auto; height: auto; clip: auto; =
}

.container { width: 980px; margin-right: auto; margin-left: auto; }

.container::before { display: table; content: ""; }

.container::after { display: table; clear: both; content: ""; }

.container-md { max-width: 768px; margin-right: auto; margin-left: auto; }

.container-lg { max-width: 1012px; margin-right: auto; margin-left: auto; }

.container-xl { max-width: 1280px; margin-right: auto; margin-left: auto; }

.columns { margin-right: -10px; margin-left: -10px; }

.columns::before { display: table; content: ""; }

.columns::after { display: table; clear: both; content: ""; }

.column { float: left; padding-right: 10px; padding-left: 10px; }

.one-third { width: 33.3333%; }

.two-thirds { width: 66.6667%; }

.one-fourth { width: 25%; }

.one-half { width: 50%; }

.three-fourths { width: 75%; }

.one-fifth { width: 20%; }

.four-fifths { width: 80%; }

.centered { display: block; float: none; margin-right: auto; margin-left: a=
uto; }

.col-1 { width: 8.33333%; }

.col-2 { width: 16.6667%; }

.col-3 { width: 25%; }

.col-4 { width: 33.3333%; }

.col-5 { width: 41.6667%; }

.col-6 { width: 50%; }

.col-7 { width: 58.3333%; }

.col-8 { width: 66.6667%; }

.col-9 { width: 75%; }

.col-10 { width: 83.3333%; }

.col-11 { width: 91.6667%; }

.col-12 { width: 100%; }

@media (min-width: 544px) {
  .col-sm-1 { width: 8.33333%; }
  .col-sm-2 { width: 16.6667%; }
  .col-sm-3 { width: 25%; }
  .col-sm-4 { width: 33.3333%; }
  .col-sm-5 { width: 41.6667%; }
  .col-sm-6 { width: 50%; }
  .col-sm-7 { width: 58.3333%; }
  .col-sm-8 { width: 66.6667%; }
  .col-sm-9 { width: 75%; }
  .col-sm-10 { width: 83.3333%; }
  .col-sm-11 { width: 91.6667%; }
  .col-sm-12 { width: 100%; }
}

@media (min-width: 768px) {
  .col-md-1 { width: 8.33333%; }
  .col-md-2 { width: 16.6667%; }
  .col-md-3 { width: 25%; }
  .col-md-4 { width: 33.3333%; }
  .col-md-5 { width: 41.6667%; }
  .col-md-6 { width: 50%; }
  .col-md-7 { width: 58.3333%; }
  .col-md-8 { width: 66.6667%; }
  .col-md-9 { width: 75%; }
  .col-md-10 { width: 83.3333%; }
  .col-md-11 { width: 91.6667%; }
  .col-md-12 { width: 100%; }
}

@media (min-width: 1012px) {
  .col-lg-1 { width: 8.33333%; }
  .col-lg-2 { width: 16.6667%; }
  .col-lg-3 { width: 25%; }
  .col-lg-4 { width: 33.3333%; }
  .col-lg-5 { width: 41.6667%; }
  .col-lg-6 { width: 50%; }
  .col-lg-7 { width: 58.3333%; }
  .col-lg-8 { width: 66.6667%; }
  .col-lg-9 { width: 75%; }
  .col-lg-10 { width: 83.3333%; }
  .col-lg-11 { width: 91.6667%; }
  .col-lg-12 { width: 100%; }
}

@media (min-width: 1280px) {
  .col-xl-1 { width: 8.33333%; }
  .col-xl-2 { width: 16.6667%; }
  .col-xl-3 { width: 25%; }
  .col-xl-4 { width: 33.3333%; }
  .col-xl-5 { width: 41.6667%; }
  .col-xl-6 { width: 50%; }
  .col-xl-7 { width: 58.3333%; }
  .col-xl-8 { width: 66.6667%; }
  .col-xl-9 { width: 75%; }
  .col-xl-10 { width: 83.3333%; }
  .col-xl-11 { width: 91.6667%; }
  .col-xl-12 { width: 100%; }
}

.gutter { margin-right: -16px; margin-left: -16px; }

.gutter > [class*=3D"col-"] { padding-right: 16px !important; padding-left:=
 16px !important; }

.gutter-condensed { margin-right: -8px; margin-left: -8px; }

.gutter-condensed > [class*=3D"col-"] { padding-right: 8px !important; padd=
ing-left: 8px !important; }

.gutter-spacious { margin-right: -24px; margin-left: -24px; }

.gutter-spacious > [class*=3D"col-"] { padding-right: 24px !important; padd=
ing-left: 24px !important; }

@media (min-width: 544px) {
  .gutter-sm { margin-right: -16px; margin-left: -16px; }
  .gutter-sm > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-sm-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-sm-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-sm-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-sm-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 768px) {
  .gutter-md { margin-right: -16px; margin-left: -16px; }
  .gutter-md > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-md-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-md-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-md-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-md-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 1012px) {
  .gutter-lg { margin-right: -16px; margin-left: -16px; }
  .gutter-lg > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-lg-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-lg-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-lg-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-lg-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 1280px) {
  .gutter-xl { margin-right: -16px; margin-left: -16px; }
  .gutter-xl > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-xl-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-xl-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-xl-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-xl-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

.offset-1 { margin-left: 8.33333% !important; }

.offset-2 { margin-left: 16.6667% !important; }

.offset-3 { margin-left: 25% !important; }

.offset-4 { margin-left: 33.3333% !important; }

.offset-5 { margin-left: 41.6667% !important; }

.offset-6 { margin-left: 50% !important; }

.offset-7 { margin-left: 58.3333% !important; }

.offset-8 { margin-left: 66.6667% !important; }

.offset-9 { margin-left: 75% !important; }

.offset-10 { margin-left: 83.3333% !important; }

.offset-11 { margin-left: 91.6667% !important; }

@media (min-width: 544px) {
  .offset-sm-1 { margin-left: 8.33333% !important; }
  .offset-sm-2 { margin-left: 16.6667% !important; }
  .offset-sm-3 { margin-left: 25% !important; }
  .offset-sm-4 { margin-left: 33.3333% !important; }
  .offset-sm-5 { margin-left: 41.6667% !important; }
  .offset-sm-6 { margin-left: 50% !important; }
  .offset-sm-7 { margin-left: 58.3333% !important; }
  .offset-sm-8 { margin-left: 66.6667% !important; }
  .offset-sm-9 { margin-left: 75% !important; }
  .offset-sm-10 { margin-left: 83.3333% !important; }
  .offset-sm-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 768px) {
  .offset-md-1 { margin-left: 8.33333% !important; }
  .offset-md-2 { margin-left: 16.6667% !important; }
  .offset-md-3 { margin-left: 25% !important; }
  .offset-md-4 { margin-left: 33.3333% !important; }
  .offset-md-5 { margin-left: 41.6667% !important; }
  .offset-md-6 { margin-left: 50% !important; }
  .offset-md-7 { margin-left: 58.3333% !important; }
  .offset-md-8 { margin-left: 66.6667% !important; }
  .offset-md-9 { margin-left: 75% !important; }
  .offset-md-10 { margin-left: 83.3333% !important; }
  .offset-md-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 1012px) {
  .offset-lg-1 { margin-left: 8.33333% !important; }
  .offset-lg-2 { margin-left: 16.6667% !important; }
  .offset-lg-3 { margin-left: 25% !important; }
  .offset-lg-4 { margin-left: 33.3333% !important; }
  .offset-lg-5 { margin-left: 41.6667% !important; }
  .offset-lg-6 { margin-left: 50% !important; }
  .offset-lg-7 { margin-left: 58.3333% !important; }
  .offset-lg-8 { margin-left: 66.6667% !important; }
  .offset-lg-9 { margin-left: 75% !important; }
  .offset-lg-10 { margin-left: 83.3333% !important; }
  .offset-lg-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 1280px) {
  .offset-xl-1 { margin-left: 8.33333% !important; }
  .offset-xl-2 { margin-left: 16.6667% !important; }
  .offset-xl-3 { margin-left: 25% !important; }
  .offset-xl-4 { margin-left: 33.3333% !important; }
  .offset-xl-5 { margin-left: 41.6667% !important; }
  .offset-xl-6 { margin-left: 50% !important; }
  .offset-xl-7 { margin-left: 58.3333% !important; }
  .offset-xl-8 { margin-left: 66.6667% !important; }
  .offset-xl-9 { margin-left: 75% !important; }
  .offset-xl-10 { margin-left: 83.3333% !important; }
  .offset-xl-11 { margin-left: 91.6667% !important; }
}

.markdown-body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI"=
, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Seg=
oe UI Symbol"; font-size: 16px; line-height: 1.5; overflow-wrap: break-word=
; }

.markdown-body::before { display: table; content: ""; }

.markdown-body::after { display: table; clear: both; content: ""; }

.markdown-body > :first-child { margin-top: 0px !important; }

.markdown-body > :last-child { margin-bottom: 0px !important; }

.markdown-body a:not([href]) { color: inherit; text-decoration: none; }

.markdown-body .absent { color: rgb(203, 36, 49); }

.markdown-body .anchor { float: left; padding-right: 4px; margin-left: -20p=
x; line-height: 1; }

.markdown-body .anchor:focus { outline: none; }

.markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-b=
ody ol, .markdown-body dl, .markdown-body table, .markdown-body pre { margi=
n-top: 0px; margin-bottom: 16px; }

.markdown-body hr { height: 0.25em; padding: 0px; margin: 24px 0px; backgro=
und-color: rgb(225, 228, 232); border: 0px; }

.markdown-body blockquote { padding: 0px 1em; color: rgb(106, 115, 125); bo=
rder-left: 0.25em solid rgb(223, 226, 229); }

.markdown-body blockquote > :first-child { margin-top: 0px; }

.markdown-body blockquote > :last-child { margin-bottom: 0px; }

.markdown-body kbd { display: inline-block; padding: 3px 5px; font-size: 11=
px; line-height: 10px; color: rgb(68, 77, 86); vertical-align: middle; back=
ground-color: rgb(250, 251, 252); border-width: 1px; border-style: solid; b=
order-color: rgb(198, 203, 209) rgb(198, 203, 209) rgb(149, 157, 165); bord=
er-image: initial; border-radius: 3px; box-shadow: rgb(149, 157, 165) 0px -=
1px 0px inset; }

.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4,=
 .markdown-body h5, .markdown-body h6 { margin-top: 24px; margin-bottom: 16=
px; font-weight: 600; line-height: 1.25; }

.markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown=
-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 =
.octicon-link, .markdown-body h6 .octicon-link { color: rgb(27, 31, 35); ve=
rtical-align: middle; visibility: hidden; }

.markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown=
-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:=
hover .anchor, .markdown-body h6:hover .anchor { text-decoration: none; }

.markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anc=
hor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown=
-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octi=
con-link, .markdown-body h6:hover .anchor .octicon-link { visibility: visib=
le; }

.markdown-body h1 tt, .markdown-body h1 code, .markdown-body h2 tt, .markdo=
wn-body h2 code, .markdown-body h3 tt, .markdown-body h3 code, .markdown-bo=
dy h4 tt, .markdown-body h4 code, .markdown-body h5 tt, .markdown-body h5 c=
ode, .markdown-body h6 tt, .markdown-body h6 code { font-size: inherit; }

.markdown-body h1 { padding-bottom: 0.3em; font-size: 2em; border-bottom: 1=
px solid rgb(234, 236, 239); }

.markdown-body h2 { padding-bottom: 0.3em; font-size: 1.5em; border-bottom:=
 1px solid rgb(234, 236, 239); }

.markdown-body h3 { font-size: 1.25em; }

.markdown-body h4 { font-size: 1em; }

.markdown-body h5 { font-size: 0.875em; }

.markdown-body h6 { font-size: 0.85em; color: rgb(106, 115, 125); }

.markdown-body ul, .markdown-body ol { padding-left: 2em; }

.markdown-body ul.no-list, .markdown-body ol.no-list { padding: 0px; list-s=
tyle-type: none; }

.markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown=
-body ol ul { margin-top: 0px; margin-bottom: 0px; }

.markdown-body li { }

.markdown-body li > p { margin-top: 16px; }

.markdown-body li + li { margin-top: 0.25em; }

.markdown-body dl { padding: 0px; }

.markdown-body dl dt { padding: 0px; margin-top: 16px; font-size: 1em; font=
-style: italic; font-weight: 600; }

.markdown-body dl dd { padding: 0px 16px; margin-bottom: 16px; }

.markdown-body table { display: block; width: 100%; overflow: auto; }

.markdown-body table th { font-weight: 600; }

.markdown-body table th, .markdown-body table td { padding: 6px 13px; borde=
r: 1px solid rgb(223, 226, 229); }

.markdown-body table tr { background-color: rgb(255, 255, 255); border-top:=
 1px solid rgb(198, 203, 209); }

.markdown-body table tr:nth-child(2n) { background-color: rgb(246, 248, 250=
); }

.markdown-body table img { background-color: transparent; }

.markdown-body img { max-width: 100%; box-sizing: content-box; background-c=
olor: rgb(255, 255, 255); }

.markdown-body img[align=3D"right"] { padding-left: 20px; }

.markdown-body img[align=3D"left"] { padding-right: 20px; }

.markdown-body .emoji { max-width: none; vertical-align: text-top; backgrou=
nd-color: transparent; }

.markdown-body span.frame { display: block; overflow: hidden; }

.markdown-body span.frame > span { display: block; float: left; width: auto=
; padding: 7px; margin: 13px 0px 0px; overflow: hidden; border: 1px solid r=
gb(223, 226, 229); }

.markdown-body span.frame span img { display: block; float: left; }

.markdown-body span.frame span span { display: block; padding: 5px 0px 0px;=
 clear: both; color: rgb(36, 41, 46); }

.markdown-body span.align-center { display: block; overflow: hidden; clear:=
 both; }

.markdown-body span.align-center > span { display: block; margin: 13px auto=
 0px; overflow: hidden; text-align: center; }

.markdown-body span.align-center span img { margin: 0px auto; text-align: c=
enter; }

.markdown-body span.align-right { display: block; overflow: hidden; clear: =
both; }

.markdown-body span.align-right > span { display: block; margin: 13px 0px 0=
px; overflow: hidden; text-align: right; }

.markdown-body span.align-right span img { margin: 0px; text-align: right; =
}

.markdown-body span.float-left { display: block; float: left; margin-right:=
 13px; overflow: hidden; }

.markdown-body span.float-left span { margin: 13px 0px 0px; }

.markdown-body span.float-right { display: block; float: right; margin-left=
: 13px; overflow: hidden; }

.markdown-body span.float-right > span { display: block; margin: 13px auto =
0px; overflow: hidden; text-align: right; }

.markdown-body code, .markdown-body tt { padding: 0.2em 0.4em; margin: 0px;=
 font-size: 85%; background-color: rgba(27, 31, 35, 0.05); border-radius: 3=
px; }

.markdown-body code br, .markdown-body tt br { display: none; }

.markdown-body del code { text-decoration: inherit; }

.markdown-body pre { overflow-wrap: normal; }

.markdown-body pre > code { padding: 0px; margin: 0px; font-size: 100%; wor=
d-break: normal; white-space: pre; background: transparent; border: 0px; }

.markdown-body .highlight { margin-bottom: 16px; }

.markdown-body .highlight pre { margin-bottom: 0px; word-break: normal; }

.markdown-body .highlight pre, .markdown-body pre { padding: 16px; overflow=
: auto; font-size: 85%; line-height: 1.45; background-color: rgb(246, 248, =
250); border-radius: 3px; }

.markdown-body pre code, .markdown-body pre tt { display: inline; padding: =
0px; margin: 0px; overflow: visible; line-height: inherit; overflow-wrap: n=
ormal; background-color: transparent; border: 0px; }

.markdown-body .csv-data td, .markdown-body .csv-data th { padding: 5px; ov=
erflow: hidden; font-size: 12px; line-height: 1; text-align: left; white-sp=
ace: nowrap; }

.markdown-body .csv-data .blob-num { padding: 10px 8px 9px; text-align: rig=
ht; background: rgb(255, 255, 255); border: 0px; }

.markdown-body .csv-data tr { border-top: 0px; }

.markdown-body .csv-data th { font-weight: 600; background: rgb(246, 248, 2=
50); border-top: 0px; }

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight .cm { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cp { color: rgb(153, 153, 153); font-weight: bold; }

.highlight .c1 { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cs { color: rgb(153, 153, 153); font-weight: bold; font-style: =
italic; }

.highlight .c, .highlight .cd { color: rgb(153, 153, 136); font-style: ital=
ic; }

.highlight .err { color: rgb(166, 23, 23); background-color: rgb(227, 210, =
210); }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .ge { color: rgb(0, 0, 0); font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .kc { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kd { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kn { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kp { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kr { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kt { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .k, .highlight .kv { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .mf { color: rgb(0, 153, 153); }

.highlight .mh { color: rgb(0, 153, 153); }

.highlight .il { color: rgb(0, 153, 153); }

.highlight .mi { color: rgb(0, 153, 153); }

.highlight .mo { color: rgb(0, 153, 153); }

.highlight .m, .highlight .mb, .highlight .mx { color: rgb(0, 153, 153); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .s { color: rgb(221, 17, 68); }

.highlight .na { color: rgb(0, 128, 128); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .nb { color: rgb(0, 134, 179); }

.highlight .nc { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .no { color: rgb(0, 128, 128); }

.highlight .nd { color: rgb(60, 93, 93); font-weight: bold; }

.highlight .ni { color: rgb(128, 0, 128); }

.highlight .ne { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nf { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nl { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: rgb(0, 0, 128); }

.highlight .vc { color: rgb(0, 128, 128); }

.highlight .vg { color: rgb(0, 128, 128); }

.highlight .vi { color: rgb(0, 128, 128); }

.highlight .nv { color: rgb(0, 128, 128); }

.highlight .ow { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .o { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight { background-color: rgb(248, 248, 248); }

.footer { display: none; }
------MultipartBoundary--hbdVt383L1VJojCVjPRRWrONwBDThzstCKfaMoQQiN------

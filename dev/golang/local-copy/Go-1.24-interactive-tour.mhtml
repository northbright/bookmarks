From: <Saved by Blink>
Snapshot-Content-Location: https://antonz.org/go-1-24/
Subject: Go 1.24 interactive tour
Date: Wed, 12 Feb 2025 06:11:52 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--vrhnCtQJUSNQ4IdEPuHR3LN8o1BDbqwaKu6ApG8vl5----"


------MultipartBoundary--vrhnCtQJUSNQ4IdEPuHR3LN8o1BDbqwaKu6ApG8vl5----
Content-Type: text/html
Content-ID: <frame-9F08C2728098277806967EF6DAD9301B@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://antonz.org/go-1-24/

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><meta name=3D"viewport" content=3D"wid=
th=3Ddevice-width,initial-scale=3D1,maximum-scale=3D1"><title>Go 1.24 inter=
active tour</title>
<meta name=3D"description" content=3D"Weak pointers, faster maps, directory=
-scoped access, and more."><meta name=3D"robots" content=3D"index, follow">=
<link rel=3D"stylesheet" type=3D"text/css" href=3D"https://antonz.org/asset=
s/css/style.ab5b07a3b8460dd96d9aa8eef3fcde58195fdd8aeae66b56e0428d9bc3c4a9f=
6.css"><link rel=3D"icon" href=3D"https://antonz.org/assets/favicon/favicon=
.ico" sizes=3D"any"><link rel=3D"icon" type=3D"image/svg+xml" href=3D"https=
://antonz.org/assets/favicon/favicon.svg"><link rel=3D"apple-touch-icon" hr=
ef=3D"https://antonz.org/assets/favicon/apple-touch-icon.png"><link rel=3D"=
manifest" href=3D"https://antonz.org/assets/favicon/manifest.json"><link re=
l=3D"canonical" href=3D"https://antonz.org/go-1-24/"><meta name=3D"author" =
content=3D"Anton Zhiyanov"><meta property=3D"og:type" content=3D"article"><=
meta property=3D"og:title" content=3D"Go 1.24 interactive tour"><meta prope=
rty=3D"og:description" content=3D"Weak pointers, faster maps, directory-sco=
ped access, and more."><meta property=3D"og:url" content=3D"https://antonz.=
org/go-1-24/"><meta property=3D"og:image" content=3D"https://antonz.org/go-=
1-24/cover.png"><meta name=3D"twitter:card" content=3D"summary_large_image"=
><meta name=3D"twitter:title" content=3D"Go 1.24 interactive tour"><meta na=
me=3D"twitter:description" content=3D"Weak pointers, faster maps, directory=
-scoped access, and more."><meta name=3D"twitter:url" content=3D"https://an=
tonz.org/go-1-24/"><meta name=3D"twitter:site" content=3D"@ohmypy"><meta na=
me=3D"twitter:image" content=3D"https://antonz.org/go-1-24/cover.png"></hea=
d><body><div class=3D"header"><div class=3D"container"><div class=3D"row"><=
div class=3D"col-xs-6 col-sm-3"><a class=3D"img-link" href=3D"https://anton=
z.org/"><img src=3D"https://antonz.org/assets/logo.svg" class=3D"header-ico=
n">
</a>&nbsp;
<a href=3D"https://antonz.org/"><strong>Anton Zhiyanov</strong></a></div><d=
iv class=3D"col-xs-12 col-sm-6 col-md-4 hidden-mobile"><a class=3D"menu__li=
nk" href=3D"https://antonz.org/#projects"><span>projects</span>
</a><a class=3D"menu__link" href=3D"https://antonz.org/#books"><span>books<=
/span>
</a><a class=3D"menu__link" href=3D"https://antonz.org/all/"><span>blog</sp=
an>
</a><a class=3D"menu__link" href=3D"https://antonz.org/#about"><span>about<=
/span></a></div><div class=3D"col-xs-6 col-sm-3"><div class=3D"search-modul=
e"><form action=3D"https://duckduckgo.com/">





<input type=3D"search" name=3D"q" autocomplete=3D"off" placeholder=3D"Searc=
h" aria-label=3D"Search"></form></div></div></div></div></div><div class=3D=
"storey"><div class=3D"container"><article class=3D"post longread" data-nam=
espace=3D""><div class=3D"row"><div class=3D"col-xs-12 col-md-10 article"><=
header><h1>Go 1.24 interactive tour</h1></header><p>Go 1.24 is scheduled fo=
r release in February, so it's a good time to explore what's new. The offic=
ial <a href=3D"https://tip.golang.org/doc/go1.24">release&nbsp;notes</a> ar=
e pretty dry, so I prepared an interactive version with lots of examples sh=
owing what has changed and what the new behavior is.</p><p>Read on and see!=
</p><p><a href=3D"https://antonz.org/go-1-24/#generic-type-aliases">Generic=
&nbsp;aliases</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#weak-pointers">Weak&nbsp;pointers</a=
>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#improved-finalizers">Improved&nbsp;f=
inalizers</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#swiss-tables">Swiss&nbsp;tables</a>&=
nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#concurrent-hash-trie-map">Concurrent=
&nbsp;map</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#directory-scoped-filesystem-access">=
Directory&nbsp;scope</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#benchmark-loop">Benchmark&nbsp;loop<=
/a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#synthetic-time-for-testing">Syntheti=
c&nbsp;time</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#test-context-and-working-directory">=
Test&nbsp;context</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#discard-log-output">Discard&nbsp;log=
s</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#appender-interfaces">Appender&nbsp;i=
nterfaces</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#more-string-and-byte-iterators">More=
&nbsp;iterators</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#sha-3-and-friends">SHA-3&nbsp;and&nb=
sp;friends</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#http-protocols">HTTP&nbsp;protocols<=
/a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#omit-zero-values-in-json">Omit&nbsp;=
zeros</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#random-text">Random&nbsp;text</a>&nb=
sp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#tool-dependencies">Tool&nbsp;depende=
ncies</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#json-output-for-build-install-and-te=
st">JSON&nbsp;output</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#main-modules-version">Main&nbsp;vers=
ion</a>&nbsp;=E2=80=A2
<a href=3D"https://antonz.org/go-1-24/#summary">Summary</a></p><blockquote>=
<p>This article is based on the official release notes from The Go Authors,=
 licensed under the BSD-3-Clause license. This is not an exhaustive list; s=
ee the official release notes for that.</p></blockquote><p>I also provide l=
inks to the proposals (=F0=9D=97=A3) and commits (=F0=9D=97=96=F0=9D=97=9F)=
 for the features described. Check them out for motivation and implementati=
on details.</p><h2 id=3D"generic-type-aliases">Generic type aliases</h2><p>=
A quick refresher: type alias in Go creates a synonym for a type without cr=
eating a new type.</p><p>When a type is <em>defined</em> based on another t=
ype, the types are different:</p><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contentedi=
table=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"=
><span class=3D"kd">type</span> <span class=3D"nx">ID</span> <span class=3D=
"kt">int</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">va=
r</span> <span class=3D"nx">n</span> <span class=3D"kt">int</span> <span cl=
ass=3D"p">=3D</span> <span class=3D"mi">10</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">va=
r</span> <span class=3D"nx">id</span> <span class=3D"nx">ID</span> <span cl=
ass=3D"p">=3D</span> <span class=3D"mi">10</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 id =3D n
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// Compile-time error:
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// cannot use n (variable of type int) as ID value in assignment
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">id=
</span> <span class=3D"p">=3D</span> <span class=3D"nf">ID</span><span clas=
s=3D"p">(</span><span class=3D"nx">n</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"id is %T\n"</span><span class=3D"p">,</=
span> <span class=3D"nx">id</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>When a type is declared as an <em>alias</em> of another=
 type, the types remain the same:</p><div class=3D"highlight"><pre tabindex=
=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" conten=
teditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D=
"cl"><span class=3D"kd">type</span> <span class=3D"nx">ID</span> <span clas=
s=3D"p">=3D</span> <span class=3D"kt">int</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">va=
r</span> <span class=3D"nx">n</span> <span class=3D"kt">int</span> <span cl=
ass=3D"p">=3D</span> <span class=3D"mi">10</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">va=
r</span> <span class=3D"nx">id</span> <span class=3D"nx">ID</span> <span cl=
ass=3D"p">=3D</span> <span class=3D"mi">10</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">id=
</span> <span class=3D"p">=3D</span> <span class=3D"nx">n</span> <span clas=
s=3D"c1">// works fine
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"nx">fmt</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Printf</span><span class=3D"p">(</span><span class=3D"s">"id is =
%T\n"</span><span class=3D"p">,</span> <span class=3D"nx">id</span><span cl=
ass=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Go 1.24 supports <em>generic type aliases</em>: a type =
alias can be parameterized like a defined type. For example, you can define=
 <code>Set</code> as a generic alias to a <code>map</code> with boolean val=
ues (not that it helps much):</p><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contentedi=
table=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"=
><span class=3D"kd">type</span> <span class=3D"nx">Set</span><span class=3D=
"p">[</span><span class=3D"nx">T</span> <span class=3D"nx">comparable</span=
><span class=3D"p">]</span> <span class=3D"p">=3D</span> <span class=3D"kd"=
>map</span><span class=3D"p">[</span><span class=3D"nx">T</span><span class=
=3D"p">]</span><span class=3D"kt">bool</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">se=
t</span> <span class=3D"o">:=3D</span> <span class=3D"nx">Set</span><span c=
lass=3D"p">[</span><span class=3D"kt">string</span><span class=3D"p">]{</sp=
an><span class=3D"s">"one"</span><span class=3D"p">:</span> <span class=3D"=
kc">true</span><span class=3D"p">,</span> <span class=3D"s">"two"</span><sp=
an class=3D"p">:</span> <span class=3D"kc">true</span><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"s">"'one' in set:"</span><span class=3D"p"=
>,</span> <span class=3D"nx">set</span><span class=3D"p">[</span><span clas=
s=3D"s">"one"</span><span class=3D"p">])</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"s">"'six' in set:"</span><span class=3D"p"=
>,</span> <span class=3D"nx">set</span><span class=3D"p">[</span><span clas=
s=3D"s">"six"</span><span class=3D"p">])</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"set is %T\n"</span><span class=3D"p">,<=
/span> <span class=3D"nx">set</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>The <a href=3D"https://go.dev/ref/spec#Alias_declaratio=
ns">language spec</a> is updated accordingly. For now, you can disable the =
feature by setting <code>GOEXPERIMENT=3Dnoaliastypeparams</code>, but this =
option will be removed in Go 1.25.</p><p>=F0=9D=97=A3 <a href=3D"https://go=
.dev/issue/46477">46477</a></p><h2 id=3D"weak-pointers">Weak pointers</h2><=
p>A <a href=3D"https://tip.golang.org/pkg/weak"><code>weak</code></a> point=
er references an object like a regular pointer. But unlike a regular pointe=
r, a weak pointer cannot keep an object alive. If only weak pointers refere=
nce an object, the garbage collector can reclaim its memory.</p><p>Let's sa=
y we have a blob type:</p><div class=3D"highlight"><pre tabindex=3D"0" clas=
s=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contenteditable=
=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><spa=
n class=3D"c1">// Blob is a large byte slice.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">type</span> <span class=3D"nx">Blob</span> <=
span class=3D"p">[]</span><span class=3D"kt">byte</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">fu=
nc</span> <span class=3D"p">(</span><span class=3D"nx">b</span> <span class=
=3D"nx">Blob</span><span class=3D"p">)</span> <span class=3D"nf">String</sp=
an><span class=3D"p">()</span> <span class=3D"kt">string</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nx">fmt</span><span class=3D"p">.</span><span=
 class=3D"nf">Sprintf</span><span class=3D"p">(</span><span class=3D"s">"Bl=
ob(%d KB)"</span><span class=3D"p">,</span> <span class=3D"nb">len</span><s=
pan class=3D"p">(</span><span class=3D"nx">b</span><span class=3D"p">)</spa=
n><span class=3D"o">/</span><span class=3D"mi">1024</span><span class=3D"p"=
>)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 newBlob returns a new Blob of the given size in KB.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">newBlob</span=
><span class=3D"p">(</span><span class=3D"nx">size</span> <span class=3D"kt=
">int</span><span class=3D"p">)</span> <span class=3D"o">*</span><span clas=
s=3D"nx">Blob</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"o">:=3D</span> <span class=3D"nb">make</span><spa=
n class=3D"p">([]</span><span class=3D"kt">byte</span><span class=3D"p">,</=
span> <span class=3D"nx">size</span><span class=3D"o">*</span><span class=
=3D"mi">1024</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>for</span> <span class=3D"nx">i</span> <span class=3D"o">:=3D</span> <span=
 class=3D"k">range</span> <span class=3D"nx">size</span> <span class=3D"p">=
{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">b</span><span class=3D"p">[</span><span class=3D"nx">i</span><span =
class=3D"p">]</span> <span class=3D"p">=3D</span> <span class=3D"nb">byte</=
span><span class=3D"p">(</span><span class=3D"nx">i</span><span class=3D"p"=
>)</span> <span class=3D"o">%</span> <span class=3D"mi">255</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"p">(</span><span class=3D"o">*</span><span cl=
ass=3D"nx">Blob</span><span class=3D"p">)(</span><span class=3D"o">&amp;</s=
pan><span class=3D"nx">b</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-weak-blob" editor=
=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>And a pointer to a 1000 KB blob:</p><div class=3D"highl=
ight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data=
-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"l=
ine"><span class=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">m=
ain</span><span class=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"o">:=3D</span> <span class=3D"nf">newBlob</span><=
span class=3D"p">(</span><span class=3D"mi">1000</span><span class=3D"p">)<=
/span> <span class=3D"c1">// 1000 KB
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">fmt</span><span class=3D"p">.</span><spa=
n class=3D"nf">Println</span><span class=3D"p">(</span><span class=3D"nx">b=
</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>We can create a <em>weak</em> pointer (<code>weak.Point=
er</code>) from a regular one with <code>weak.Make</code>, and access the o=
riginal pointer using the <code>Pointer.Value</code> method:</p><div class=
=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language=
-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span c=
lass=3D"line"><span class=3D"cl"><span class=3D"kd">func</span> <span class=
=3D"nf">main</span><span class=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wb</span> <span class=3D"o">:=3D</span> <span class=3D"nx">weak</span><sp=
an class=3D"p">.</span><span class=3D"nf">Make</span><span class=3D"p">(</s=
pan><span class=3D"nf">newBlob</span><span class=3D"p">(</span><span class=
=3D"mi">1000</span><span class=3D"p">))</span> <span class=3D"c1">// 1000 K=
B
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">fmt</span><span class=3D"p">.</span><spa=
n class=3D"nf">Println</span><span class=3D"p">(</span><span class=3D"nx">w=
b</span><span class=3D"p">.</span><span class=3D"nf">Value</span><span clas=
s=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>The regular pointer prevents the garbage collector from=
 reclaiming the memory occupied by an object:</p><div class=3D"highlight"><=
pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=
=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"line">=
<span class=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">main</=
span><span class=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">heapSize</span> <span class=3D"o">:=3D</span> <span class=3D"nf">getAlloc=
</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"o">:=3D</span> <span class=3D"nf">newBlob</span><=
span class=3D"p">(</span><span class=3D"mi">1000</span><span class=3D"p">)<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"value before GC =3D"</span><span c=
lass=3D"p">,</span> <span class=3D"nx">b</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">runtime</span><span class=3D"p">.</span><span class=3D"nf">GC</span><span=
 class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"value after GC =3D"</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">b</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"heap size delta =3D %d KB\n"</span>=
<span class=3D"p">,</span> <span class=3D"nf">heapDelta</span><span class=
=3D"p">(</span><span class=3D"nx">heapSize</span><span class=3D"p">))</span=
>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><details><summary>What are getAlloc and heapDelta</summary=
><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=
=3D"language-go" data-lang=3D"go"><span class=3D"line"><span class=3D"cl"><=
span class=3D"c1">// heapDelta returns the delta in KB between
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// the current heap size and the previous heap size.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">heapDelta</sp=
an><span class=3D"p">(</span><span class=3D"nx">prev</span> <span class=3D"=
kt">uint64</span><span class=3D"p">)</span> <span class=3D"kt">uint64</span=
> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">cur</span> <span class=3D"o">:=3D</span> <span class=3D"nf">getAlloc</spa=
n><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">cur</span> <span class=3D"p">&lt;</span> <spa=
n class=3D"nx">prev</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">return</span> <span class=3D"mi">0</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nx">cur</span> <span class=3D"o">-</span> <sp=
an class=3D"nx">prev</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 getAlloc returns the current heap size in KB.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">getAlloc</spa=
n><span class=3D"p">()</span> <span class=3D"kt">uint64</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"kd=
">var</span> <span class=3D"nx">m</span> <span class=3D"nx">runtime</span><=
span class=3D"p">.</span><span class=3D"nx">MemStats</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">runtime</span><span class=3D"p">.</span><span class=3D"nf">ReadMemStats</=
span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D=
"nx">m</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nx">m</span><span class=3D"p">.</span><span c=
lass=3D"nx">Alloc</span> <span class=3D"o">/</span> <span class=3D"mi">1024=
</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div></details><p>The weak pointer allows the g=
arbage collector to free the memory:</p><div class=3D"highlight"><pre tabin=
dex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" con=
tenteditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=
=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">main</span><span =
class=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">heapSize</span> <span class=3D"o">:=3D</span> <span class=3D"nf">getAlloc=
</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wb</span> <span class=3D"o">:=3D</span> <span class=3D"nx">weak</span><sp=
an class=3D"p">.</span><span class=3D"nf">Make</span><span class=3D"p">(</s=
pan><span class=3D"nf">newBlob</span><span class=3D"p">(</span><span class=
=3D"mi">1000</span><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"value before GC =3D"</span><span c=
lass=3D"p">,</span> <span class=3D"nx">wb</span><span class=3D"p">.</span><=
span class=3D"nf">Value</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">runtime</span><span class=3D"p">.</span><span class=3D"nf">GC</span><span=
 class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"value after GC =3D"</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">wb</span><span class=3D"p">.</span><s=
pan class=3D"nf">Value</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"heap size delta =3D %d KB\n"</span>=
<span class=3D"p">,</span> <span class=3D"nf">heapDelta</span><span class=
=3D"p">(</span><span class=3D"nx">heapSize</span><span class=3D"p">))</span=
>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>As you can see, <code>Pointer.Value</code> returns nil =
if the original pointer's value was reclaimed by the garbage collector. Not=
e that it's not <em>guaranteed</em> to return nil as soon as an object is n=
o longer referenced (or at any time later); the runtime decides when to rec=
laim the memory.</p><p>Weak pointers are useful for implementing a cache of=
 large objects, ensuring that an object isn't kept alive just because it's =
in the cache. See the next section for an example.</p><p>=F0=9D=97=A3 <a hr=
ef=3D"https://go.dev/issue/67552">67552</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/628455">628455</a></p=
><h2 id=3D"improved-finalizers">Improved finalizers</h2><p>Remember our blo=
b?</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code c=
lass=3D"language-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=
=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"kd">func<=
/span> <span class=3D"nf">main</span><span class=3D"p">()</span> <span clas=
s=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"o">:=3D</span> <span class=3D"nf">newBlob</span><=
span class=3D"p">(</span><span class=3D"mi">1000</span><span class=3D"p">)<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"b=3D%v, type=3D%T\n"</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">b</span><span class=3D"p">,</span> <s=
pan class=3D"nx">b</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>What if we want to run a cleanup function when the blob=
 is garbage collected?</p><p>Previously, we'd call <a href=3D"https://tip.g=
olang.org/pkg/runtime#SetFinalizer"><code>runtime.SetFinalizer</code></a>, =
which is notoriously hard to use. Now there's a better solution with <a hre=
f=3D"https://tip.golang.org/pkg/runtime#AddCleanup"><code>runtime.AddCleanu=
p</code></a>:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chro=
ma"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D"true" s=
pellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"=
kd">func</span> <span class=3D"nf">main</span><span class=3D"p">()</span> <=
span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"o">:=3D</span> <span class=3D"nf">newBlob</span><=
span class=3D"p">(</span><span class=3D"mi">1000</span><span class=3D"p">)<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">now</span> <span class=3D"o">:=3D</span> <span class=3D"nx">time</span><s=
pan class=3D"p">.</span><span class=3D"nf">Now</span><span class=3D"p">()</=
span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Register a cleanup function to run
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// when the object is no longer reachabl=
e.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">runtime</span><span class=3D"p">.</span>=
<span class=3D"nf">AddCleanup</span><span class=3D"p">(</span><span class=
=3D"nx">b</span><span class=3D"p">,</span> <span class=3D"nx">cleanup</span=
><span class=3D"p">,</span> <span class=3D"nx">now</span><span class=3D"p">=
)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">time</span><span class=3D"p">.</span><span class=3D"nf">Sleep</span><span=
 class=3D"p">(</span><span class=3D"mi">10</span> <span class=3D"o">*</span=
> <span class=3D"nx">time</span><span class=3D"p">.</span><span class=3D"nx=
">Millisecond</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span> <span class=3D"p">=3D</span> <span class=3D"kc">nil</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">runtime</span><span class=3D"p">.</span><span class=3D"nf">GC</span><span=
 class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">time</span><span class=3D"p">.</span><span class=3D"nf">Sleep</span><span=
 class=3D"p">(</span><span class=3D"mi">10</span> <span class=3D"o">*</span=
> <span class=3D"nx">time</span><span class=3D"p">.</span><span class=3D"nx=
">Millisecond</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">fu=
nc</span> <span class=3D"nf">cleanup</span><span class=3D"p">(</span><span =
class=3D"nx">created</span> <span class=3D"nx">time</span><span class=3D"p"=
>.</span><span class=3D"nx">Time</span><span class=3D"p">)</span> <span cla=
ss=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"s">"object is cleaned up! lifetime =3D %dms\n"</span><span class=3D"p">=
,</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">time</span><span class=3D"p">.</span><span class=3D"nf">Since</span=
><span class=3D"p">(</span><span class=3D"nx">created</span><span class=3D"=
p">)</span><span class=3D"o">/</span><span class=3D"nx">time</span><span cl=
ass=3D"p">.</span><span class=3D"nx">Millisecond</span><span class=3D"p">,<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob" template=3D"header.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><code>AddCleanup</code> attaches a cleanup function to =
an object that runs when the object is no longer reachable. The cleanup fun=
ction runs in a separate goroutine, which handles all cleanup calls for a p=
rogram sequentially. Multiple cleanups can be attached to the same pointer.=
</p><p>Note an argument to the cleanup function:</p><div class=3D"highlight=
"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lan=
g=3D"go"><span class=3D"line"><span class=3D"cl"><span class=3D"c1">// AddC=
leanup attaches a cleanup function to ptr.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// Some time after ptr is no longer reachable,
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// the runtime will call cleanup(arg) in a separate goroutine.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nx">AddCleanup</s=
pan><span class=3D"p">[</span><span class=3D"nx">T</span><span class=3D"p">=
,</span> <span class=3D"nx">S</span> <span class=3D"nx">any</span><span cla=
ss=3D"p">](</span><span class=3D"nx">ptr</span> <span class=3D"o">*</span><=
span class=3D"nx">T</span><span class=3D"p">,</span> <span class=3D"nx">cle=
anup</span> <span class=3D"kd">func</span><span class=3D"p">(</span><span c=
lass=3D"nx">S</span><span class=3D"p">),</span> <span class=3D"nx">arg</spa=
n> <span class=3D"nx">S</span><span class=3D"p">)</span> <span class=3D"nx"=
>Cleanup</span>
</span></span></code></pre></div><p>In the example above, we passed the cre=
ation time as an argument, but typically it would be a resource we want to =
clean up when the pointer is garbage collected.</p><p>Here's an example. Su=
ppose we want to implement a <code>WeakMap</code>, where an item can be dis=
carded if no one references it's value. Let's use a <code>map</code> with <=
code>weak.Pointer</code> values:</p><div class=3D"highlight"><pre tabindex=
=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" conten=
teditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D=
"cl"><span class=3D"c1">// WeakMap is a map with weakly referenced values.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">type</span> <span class=3D"nx">WeakMap</span=
><span class=3D"p">[</span><span class=3D"nx">K</span> <span class=3D"nx">c=
omparable</span><span class=3D"p">,</span> <span class=3D"nx">V</span> <spa=
n class=3D"nx">any</span><span class=3D"p">]</span> <span class=3D"kd">stru=
ct</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">store</span> <span class=3D"kd">map</span><span class=3D"p">[</span><span=
 class=3D"nx">K</span><span class=3D"p">]</span><span class=3D"nx">weak</sp=
an><span class=3D"p">.</span><span class=3D"nx">Pointer</span><span class=
=3D"p">[</span><span class=3D"nx">V</span><span class=3D"p">]</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">mu</span>    <span class=3D"nx">sync</span><span class=3D"p">.</span><spa=
n class=3D"nx">Mutex</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 NewWeakMap creates a new WeakMap.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nx">NewWeakMap</s=
pan><span class=3D"p">[</span><span class=3D"nx">K</span> <span class=3D"nx=
">comparable</span><span class=3D"p">,</span> <span class=3D"nx">V</span> <=
span class=3D"nx">any</span><span class=3D"p">]()</span> <span class=3D"o">=
*</span><span class=3D"nx">WeakMap</span><span class=3D"p">[</span><span cl=
ass=3D"nx">K</span><span class=3D"p">,</span> <span class=3D"nx">V</span><s=
pan class=3D"p">]</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"o">&amp;</span><span class=3D"nx">WeakMap</sp=
an><span class=3D"p">[</span><span class=3D"nx">K</span><span class=3D"p">,=
</span> <span class=3D"nx">V</span><span class=3D"p">]{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">store</span><span class=3D"p">:</span> <span class=3D"nb">make</spa=
n><span class=3D"p">(</span><span class=3D"kd">map</span><span class=3D"p">=
[</span><span class=3D"nx">K</span><span class=3D"p">]</span><span class=3D=
"nx">weak</span><span class=3D"p">.</span><span class=3D"nx">Pointer</span>=
<span class=3D"p">[</span><span class=3D"nx">V</span><span class=3D"p">]),<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Len returns the number of items in the map.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">wm</span> <span class=3D"o">*</span><span class=3D"nx">WeakMap=
</span><span class=3D"p">[</span><span class=3D"nx">K</span><span class=3D"=
p">,</span> <span class=3D"nx">V</span><span class=3D"p">])</span> <span cl=
ass=3D"nf">Len</span><span class=3D"p">()</span> <span class=3D"kt">int</sp=
an> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nx">mu</span><span clas=
s=3D"p">.</span><span class=3D"nf">Lock</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span c=
lass=3D"nx">mu</span><span class=3D"p">.</span><span class=3D"nf">Unlock</s=
pan><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nb">len</span><span class=3D"p">(</span><span=
 class=3D"nx">wm</span><span class=3D"p">.</span><span class=3D"nx">store</=
span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-weak-map-1" editor=
=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Getting a value is straightforward:</p><div class=3D"hi=
ghlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" d=
ata-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=
=3D"line"><span class=3D"cl"><span class=3D"c1">// Get returns the value st=
ored in the map for a key,
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// or nil if no value is present.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">wm</span> <span class=3D"o">*</span><span class=3D"nx">WeakMap=
</span><span class=3D"p">[</span><span class=3D"nx">K</span><span class=3D"=
p">,</span> <span class=3D"nx">V</span><span class=3D"p">])</span> <span cl=
ass=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"nx">key</span=
> <span class=3D"nx">K</span><span class=3D"p">)</span> <span class=3D"o">*=
</span><span class=3D"nx">V</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nx">mu</span><span clas=
s=3D"p">.</span><span class=3D"nf">Lock</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span c=
lass=3D"nx">mu</span><span class=3D"p">.</span><span class=3D"nf">Unlock</s=
pan><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">wp</span><span class=3D"p">,</span> <span cla=
ss=3D"nx">found</span> <span class=3D"o">:=3D</span> <span class=3D"nx">wm<=
/span><span class=3D"p">.</span><span class=3D"nx">store</span><span class=
=3D"p">[</span><span class=3D"nx">key</span><span class=3D"p">];</span> <sp=
an class=3D"nx">found</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">return</span> <span class=3D"nx">wp</span><span class=3D"p">.</span>=
<span class=3D"nf">Value</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"kc">nil</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-weak-map-2" editor=
=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Now, how do we ensure the item is removed from the map =
when the runtime reclaims the value? With <code>runtime.AddCleanup</code>, =
it's simple:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chrom=
a"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D"true" sp=
ellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"c=
1">// Set sets the value for a key.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">wm</span> <span class=3D"o">*</span><span class=3D"nx">WeakMap=
</span><span class=3D"p">[</span><span class=3D"nx">K</span><span class=3D"=
p">,</span> <span class=3D"nx">V</span><span class=3D"p">])</span> <span cl=
ass=3D"nf">Set</span><span class=3D"p">(</span><span class=3D"nx">key</span=
> <span class=3D"nx">K</span><span class=3D"p">,</span> <span class=3D"nx">=
value</span> <span class=3D"o">*</span><span class=3D"nx">V</span><span cla=
ss=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nx">mu</span><span clas=
s=3D"p">.</span><span class=3D"nf">Lock</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span c=
lass=3D"nx">mu</span><span class=3D"p">.</span><span class=3D"nf">Unlock</s=
pan><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Create a weak pointer for the value.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">wp</span> <span class=3D"o">:=3D</span> =
<span class=3D"nx">weak</span><span class=3D"p">.</span><span class=3D"nf">=
Make</span><span class=3D"p">(</span><span class=3D"nx">value</span><span c=
lass=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Remove the item when the value is reclaimed.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">runtime</span><span class=3D"p">.</span>=
<span class=3D"nf">AddCleanup</span><span class=3D"p">(</span><span class=
=3D"nx">value</span><span class=3D"p">,</span> <span class=3D"nx">wm</span>=
<span class=3D"p">.</span><span class=3D"nx">Delete</span><span class=3D"p"=
>,</span> <span class=3D"nx">key</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Store the weak pointer in the map.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">wm</span><span class=3D"p">.</span><span=
 class=3D"nx">store</span><span class=3D"p">[</span><span class=3D"nx">key<=
/span><span class=3D"p">]</span> <span class=3D"p">=3D</span> <span class=
=3D"nx">wp</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Delete removes an item for a key.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">wm</span> <span class=3D"o">*</span><span class=3D"nx">WeakMap=
</span><span class=3D"p">[</span><span class=3D"nx">K</span><span class=3D"=
p">,</span> <span class=3D"nx">V</span><span class=3D"p">])</span> <span cl=
ass=3D"nf">Delete</span><span class=3D"p">(</span><span class=3D"nx">key</s=
pan> <span class=3D"nx">K</span><span class=3D"p">)</span> <span class=3D"p=
">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nx">mu</span><span clas=
s=3D"p">.</span><span class=3D"nf">Lock</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span c=
lass=3D"nx">mu</span><span class=3D"p">.</span><span class=3D"nf">Unlock</s=
pan><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nb=
">delete</span><span class=3D"p">(</span><span class=3D"nx">wm</span><span =
class=3D"p">.</span><span class=3D"nx">store</span><span class=3D"p">,</spa=
n> <span class=3D"nx">key</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-weak-map-3" editor=
=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>We pass the current key to the cleanup function (<code>=
wm.Delete</code>) so it knows which item to remove from the map.</p><div cl=
ass=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"langu=
age-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><spa=
n class=3D"line"><span class=3D"cl"><span class=3D"kd">var</span> <span cla=
ss=3D"nx">sink</span> <span class=3D"o">*</span><span class=3D"nx">Blob</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">fu=
nc</span> <span class=3D"nf">main</span><span class=3D"p">()</span> <span c=
lass=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span> <span class=3D"o">:=3D</span> <span class=3D"nx">NewWeakMap</sp=
an><span class=3D"p">[</span><span class=3D"kt">string</span><span class=3D=
"p">,</span> <span class=3D"nx">Blob</span><span class=3D"p">]()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nf">Set</span><span cla=
ss=3D"p">(</span><span class=3D"s">"one"</span><span class=3D"p">,</span> <=
span class=3D"nf">newBlob</span><span class=3D"p">(</span><span class=3D"mi=
">10</span><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">wm</span><span class=3D"p">.</span><span class=3D"nf">Set</span><span cla=
ss=3D"p">(</span><span class=3D"s">"two"</span><span class=3D"p">,</span> <=
span class=3D"nf">newBlob</span><span class=3D"p">(</span><span class=3D"mi=
">20</span><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"Before GC:"</span><span class=3D"p=
">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"len(map) =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Len</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"map[one] =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"one"</spa=
n><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"map[two] =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"two"</spa=
n><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Allow the garbage collector to reclaim
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// the second item, but not the first on=
e.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">sink</span> <span class=3D"p">=3D</span>=
 <span class=3D"nx">wm</span><span class=3D"p">.</span><span class=3D"nf">G=
et</span><span class=3D"p">(</span><span class=3D"s">"one"</span><span clas=
s=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">runtime</span><span class=3D"p">.</span><span class=3D"nf">GC</span><span=
 class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"After GC:"</span><span class=3D"p"=
>)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"len(map) =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Len</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"map[one] =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"one"</spa=
n><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"map[two] =3D"</span><span class=3D=
"p">,</span> <span class=3D"nx">wm</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"two"</spa=
n><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-weak-blob s-weak-map-1 s-weak-map-2 s-weak-map-3=
" template=3D"header.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Works like a charm!</p><p>Note that the cleanup functio=
n is not <em>guaranteed</em> to run immediately after an object is no longe=
r referenced; it may execute at an arbitrary time in the future.</p><p>With=
 the introduction of <code>AddCleanup</code>, the usage of <code>SetFinaliz=
er</code> is discouraged. New code should prefer <code>AddCleanup</code>.</=
p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/67535">67535</a> =E2=80=
=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/627695">627695</a>, <=
a href=3D"https://go.dev/cl/627975">627975</a></p><h2 id=3D"swiss-tables">S=
wiss tables</h2><p>After many years, the Go team decided to change the unde=
rlying <code>map</code> implementation! It is now based on <a href=3D"https=
://abseil.io/about/design/swisstables">SwissTable</a>, which offers several=
 optimizations:</p><ul><li>Access and assignment of large (&gt;1024 entries=
) maps improved ~30%.</li><li>Assignment into pre-sized maps improved ~35%.=
</li><li>Iteration faster across the board by ~10%, ~60% for maps with low =
load (large size, few entries).</li></ul><details><summary>Benchmarks</summ=
ary><p>These results are <a href=3D"https://github.com/golang/go/issues/547=
66#issuecomment-2542444404">missing a few optimizations</a>, but give a goo=
d overview of changes.</p><div class=3D"highlight"><pre tabindex=3D"0" clas=
s=3D"chroma"><code class=3D"language-text" data-lang=3D"text"><span class=
=3D"line"><span class=3D"cl">                                              =
            =E2=94=82 /tmp/noswiss.lu.txt =E2=94=82          /tmp/swiss.lu.=
txt           =E2=94=82
</span></span><span class=3D"line"><span class=3D"cl">                     =
                                     =E2=94=82       sec/op        =E2=94=
=82    sec/op      vs base               =E2=94=82
</span></span><span class=3D"line"><span class=3D"cl">MapIter/impl=3Druntim=
eMap/t=3DInt64/len=3D64-12                          642.0n =C2=B1  3%    60=
3.8n =C2=B1  6%   -5.95% (p=3D0.004 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIter/impl=3Druntim=
eMap/t=3DInt64/len=3D8192-12                        87.98=C2=B5 =C2=B1  1% =
   78.80=C2=B5 =C2=B1  1%  -10.43% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIter/impl=3Druntim=
eMap/t=3DInt64/len=3D4194304-12                     47.40m =C2=B1  2%    44=
.41m =C2=B1  2%   -6.30% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterLowLoad/impl=
=3DruntimeMap/t=3DInt64/len=3D64-12                  145.85n =C2=B1  3%    =
92.85n =C2=B1  2%  -36.34% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterLowLoad/impl=
=3DruntimeMap/t=3DInt64/len=3D8192-12                13.205=C2=B5 =C2=B1  0=
%    6.078=C2=B5 =C2=B1  1%  -53.97% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterLowLoad/impl=
=3DruntimeMap/t=3DInt64/len=3D4194304-12              15.20m =C2=B1  1%    =
18.22m =C2=B1  1%  +19.87% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterGrow/impl=3Dru=
ntimeMap/t=3DInt64/len=3D64-12                     10.196=C2=B5 =C2=B1  2% =
   8.092=C2=B5 =C2=B1  8%  -20.63% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterGrow/impl=3Dru=
ntimeMap/t=3DInt64/len=3D8192-12                    1.259m =C2=B1  2%    1.=
008m =C2=B1  4%  -19.97% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapIterGrow/impl=3Dru=
ntimeMap/t=3DInt64/len=3D4194304-12                  1.424 =C2=B1  5%     1=
.275 =C2=B1  0%  -10.47% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt64/len=3D64-12                        14.08n =C2=B1  4%    15=
.28n =C2=B1  3%   +8.45% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt64/len=3D8192-12                      27.61n =C2=B1  1%    18=
.80n =C2=B1  1%  -31.89% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt64/len=3D4194304-12                   82.94n =C2=B1  1%   102=
.20n =C2=B1  0%  +23.22% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt32/len=3D64-12                        13.84n =C2=B1  5%    15=
.56n =C2=B1  2%  +12.39% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt32/len=3D8192-12                      26.90n =C2=B1  2%    18=
.47n =C2=B1  2%  -31.34% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DInt32/len=3D4194304-12                   79.60n =C2=B1  0%    93=
.00n =C2=B1  0%  +16.83% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DString/len=3D64-12                       16.36n =C2=B1  6%    18=
.69n =C2=B1  1%  +14.24% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DString/len=3D8192-12                     38.39n =C2=B1  1%    25=
.67n =C2=B1  1%  -33.13% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetHit/impl=3Drunt=
imeMap/t=3DString/len=3D4194304-12                  146.0n =C2=B1  1%    17=
2.2n =C2=B1  1%  +17.95% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt64/len=3D64-12                       15.63n =C2=B1  8%    15=
.08n =C2=B1  8%        ~ (p=3D0.240 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt64/len=3D8192-12                     17.55n =C2=B1  1%    17=
.59n =C2=B1  4%        ~ (p=3D0.909 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt64/len=3D4194304-12                 106.40n =C2=B1  1%    72=
.99n =C2=B1  2%  -31.40% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt32/len=3D64-12                       15.63n =C2=B1  7%    15=
.27n =C2=B1  8%        ~ (p=3D0.132 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt32/len=3D8192-12                     17.18n =C2=B1  3%    17=
.25n =C2=B1  1%        ~ (p=3D0.729 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DInt32/len=3D4194304-12                 100.15n =C2=B1  1%    74=
.71n =C2=B1  1%  -25.40% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DString/len=3D64-12                      18.96n =C2=B1  3%    18=
.19n =C2=B1 11%        ~ (p=3D0.132 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DString/len=3D8192-12                    23.79n =C2=B1  3%    20=
.98n =C2=B1  2%  -11.79% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapGetMiss/impl=3Drun=
timeMap/t=3DString/len=3D4194304-12                134.85n =C2=B1  1%    84=
.82n =C2=B1  1%  -37.10% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt64/len=3D64-12                       5.886=C2=B5 =C2=B1  3% =
   5.699=C2=B5 =C2=B1  3%   -3.18% (p=3D0.015 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt64/len=3D8192-12                     739.1=C2=B5 =C2=B1  2% =
   816.0=C2=B5 =C2=B1  4%  +10.41% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt64/len=3D4194304-12                  929.3m =C2=B1  1%    89=
4.2m =C2=B1  5%        ~ (p=3D0.065 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt32/len=3D64-12                       5.487=C2=B5 =C2=B1  4% =
   5.326=C2=B5 =C2=B1  2%   -2.93% (p=3D0.028 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt32/len=3D8192-12                     681.6=C2=B5 =C2=B1  2% =
   767.3=C2=B5 =C2=B1  2%  +12.58% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DInt32/len=3D4194304-12                  831.9m =C2=B1  2%    80=
2.9m =C2=B1  1%   -3.49% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DString/len=3D64-12                      7.607=C2=B5 =C2=B1  2% =
   7.379=C2=B5 =C2=B1  2%   -2.99% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DString/len=3D8192-12                    1.204m =C2=B1  4%    1.=
212m =C2=B1  4%        ~ (p=3D0.310 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutGrow/impl=3Drun=
timeMap/t=3DString/len=3D4194304-12                  1.699 =C2=B1  2%     1=
.876 =C2=B1  1%  +10.37% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt64/len=3D64-12                2.179=C2=B5 =C2=B1  1% =
   1.428=C2=B5 =C2=B1  5%  -34.47% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt64/len=3D8192-12              277.6=C2=B5 =C2=B1  2% =
   198.6=C2=B5 =C2=B1  1%  -28.45% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt64/len=3D4194304-12           389.7m =C2=B1  1%    51=
8.2m =C2=B1  1%  +32.97% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt32/len=3D64-12                1.784=C2=B5 =C2=B1  2% =
   1.110=C2=B5 =C2=B1  3%  -37.78% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt32/len=3D8192-12              228.1=C2=B5 =C2=B1  5% =
   151.4=C2=B5 =C2=B1  4%  -33.62% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DInt32/len=3D4194304-12           361.5m =C2=B1  1%    48=
1.2m =C2=B1  1%  +33.10% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DString/len=3D64-12               2.670=C2=B5 =C2=B1  3% =
   2.167=C2=B5 =C2=B1  3%  -18.81% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DString/len=3D8192-12             380.1=C2=B5 =C2=B1  2% =
   417.2=C2=B5 =C2=B1  9%   +9.77% (p=3D0.015 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutPreAllocate/imp=
l=3DruntimeMap/t=3DString/len=3D4194304-12          493.1m =C2=B1  4%    71=
8.1m =C2=B1  7%  +45.62% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DInt32/len=3D64-12                     1421.0n =C2=B1  3%    80=
4.0n =C2=B1  5%  -43.42% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DInt32/len=3D8192-12                    192.4=C2=B5 =C2=B1  1% =
   120.6=C2=B5 =C2=B1  1%  -37.30% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DInt32/len=3D4194304-12                 364.0m =C2=B1  2%    47=
3.0m =C2=B1  2%  +29.95% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DString/len=3D64-12                     1.602=C2=B5 =C2=B1  4% =
   1.083=C2=B5 =C2=B1 14%  -32.41% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DString/len=3D8192-12                   232.4=C2=B5 =C2=B1  1% =
   165.7=C2=B5 =C2=B1  2%  -28.68% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutReuse/impl=3Dru=
ntimeMap/t=3DString/len=3D4194304-12                440.4m =C2=B1  2%    67=
2.5m =C2=B1  1%  +52.72% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt64/len=3D64-12                     34.25n =C2=B1  3%    37=
.76n =C2=B1  5%  +10.23% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt64/len=3D8192-12                   57.91n =C2=B1  2%    45=
.24n =C2=B1  2%  -21.89% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt64/len=3D4194304-12                170.5n =C2=B1  0%    22=
2.0n =C2=B1  1%  +30.20% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt32/len=3D64-12                     34.06n =C2=B1  4%    37=
.87n =C2=B1  6%  +11.16% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt32/len=3D8192-12                   54.92n =C2=B1  1%    43=
.41n =C2=B1  2%  -20.96% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DInt32/len=3D4194304-12                153.4n =C2=B1  1%    17=
8.3n =C2=B1  2%  +16.26% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DString/len=3D64-12                    42.11n =C2=B1  8%    48=
.48n =C2=B1  7%  +15.12% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DString/len=3D8192-12                  78.46n =C2=B1  1%    56=
.10n =C2=B1  2%  -28.50% (p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapPutDelete/impl=3Dr=
untimeMap/t=3DString/len=3D4194304-12               204.6n =C2=B1  1%    26=
1.4n =C2=B1  1%  +27.76% (p=3D0.002 n=3D6)
</span></span></code></pre></div></details><p>You can disable the new imple=
mentation by setting <code>GOEXPERIMENT=3Dnoswissmap</code> at build time.<=
/p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/54766">54766</a></p><h2 =
id=3D"concurrent-hash-trie-map">Concurrent hash-trie map</h2><p>The impleme=
ntation of <a href=3D"https://tip.golang.org/pkg/sync#Map"><code>sync.Map</=
code></a> has changed to a concurrent hash-trie, improving performance, esp=
ecially for map modifications. Modifications of disjoint key sets are less =
likely to contend on larger maps, and no ramp-up time is needed to achieve =
low-contention loads.</p><p>The new implementation outperforms the old one =
on nearly every benchmark:</p><div class=3D"highlight"><pre tabindex=3D"0" =
class=3D"chroma"><code class=3D"language-text" data-lang=3D"text"><span cla=
ss=3D"line"><span class=3D"cl">                                =E2=94=82   =
  before      =E2=94=82                 after                 =E2=94=82
</span></span><span class=3D"line"><span class=3D"cl">                     =
           =E2=94=82     sec/op      =E2=94=82    sec/op      vs base      =
          =E2=94=82
</span></span><span class=3D"line"><span class=3D"cl">MapLoadMostlyHits    =
               7.870n =C2=B1   1%    8.415n =C2=B1  3%    +6.93% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadMostlyMisses  =
               7.210n =C2=B1   1%    5.314n =C2=B1  2%   -26.28% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadOrStoreBalance=
d             360.10n =C2=B1  18%    71.78n =C2=B1  2%   -80.07% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadOrStoreUnique =
               707.2n =C2=B1  18%    135.2n =C2=B1  4%   -80.88% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadOrStoreCollisi=
on             5.089n =C2=B1 201%    3.963n =C2=B1  1%   -22.11% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadAndDeleteBalan=
ced           17.045n =C2=B1  64%    5.280n =C2=B1  1%   -69.02% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadAndDeleteUniqu=
e             14.250n =C2=B1  57%    6.452n =C2=B1  1%         ~ (p=3D0.368=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapLoadAndDeleteColli=
sion           19.34n =C2=B1  39%    23.31n =C2=B1 27%         ~ (p=3D0.180=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapRange             =
               3.055=C2=B5 =C2=B1   3%    1.918=C2=B5 =C2=B1  2%   -37.23% =
(p=3D0.002 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapAdversarialAlloc  =
              245.30n =C2=B1   6%    14.90n =C2=B1 23%   -93.92% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapAdversarialDelete =
             143.550n =C2=B1   2%    8.184n =C2=B1  1%   -94.30% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapDeleteCollision   =
               9.199n =C2=B1  65%    3.165n =C2=B1  1%   -65.59% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapSwapCollision     =
               164.7n =C2=B1   7%    108.7n =C2=B1 36%   -34.01% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapSwapMostlyHits    =
               33.12n =C2=B1  15%    35.79n =C2=B1  9%         ~ (p=3D0.180=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapSwapMostlyMisses  =
               604.5n =C2=B1   5%    280.2n =C2=B1  7%   -53.64% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndSwapColl=
ision          96.02n =C2=B1  40%    69.93n =C2=B1 24%   -27.17% (p=3D0.041=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndSwapNoEx=
istingKey      6.345n =C2=B1   1%    6.202n =C2=B1  1%    -2.24% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndSwapValu=
eNotEqual      6.121n =C2=B1   3%    5.564n =C2=B1  4%    -9.09% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndSwapMost=
lyHits         44.21n =C2=B1  13%    43.46n =C2=B1 11%         ~ (p=3D0.485=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndSwapMost=
lyMisses       33.51n =C2=B1   6%    13.51n =C2=B1  5%   -59.70% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndDeleteCo=
llision        27.85n =C2=B1 104%    31.02n =C2=B1 26%         ~ (p=3D0.180=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndDeleteMo=
stlyHits       50.43n =C2=B1  33%   109.45n =C2=B1  8%  +117.03% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapCompareAndDeleteMo=
stlyMisses     27.17n =C2=B1   7%    11.37n =C2=B1  3%   -58.14% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">MapClear             =
               300.2n =C2=B1   5%    124.2n =C2=B1  8%   -58.64% (p=3D0.002=
 n=3D6)
</span></span><span class=3D"line"><span class=3D"cl">geomean              =
               50.38n           25.79n         -48.81%
</span></span></code></pre></div><p>The load-hit case (<code>MapLoadMostlyH=
its</code>) is slightly slower due to Swiss Tables improving the performanc=
e of the old <code>sync.Map</code>. Some benchmarks show a seemingly large =
slowdown, but that's mainly due to the fact that the new implementation shr=
inks promptly (as elements are deleted from the map), whereas the old one s=
hrinks in generations (the dirty map needs to be promoted).</p><p>The concu=
rrent hash-trie map (<code>HashTrieMap</code>) was initially added for the =
<code>unique</code> package in Go 1.23. It proved faster than the original =
<code>sync.Map</code> in many cases, so the Go team reimplemented <code>syn=
c.Map</code> as a wrapper for <code>HashTrieMap</code>.</p><p>You can disab=
le the new implementation by setting <code>GOEXPERIMENT=3Dnosynchashtriemap=
</code> at build time.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/7=
0683">70683</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/608335">608335</a></p=
><h2 id=3D"directory-scoped-filesystem-access">Directory-scoped filesystem =
access</h2><p>The new <a href=3D"https://tip.golang.org/pkg/os#Root"><code>=
os.Root</code></a> type restricts filesystem operations to a specific direc=
tory.</p><p>The <code>OpenRoot</code> function opens a directory and return=
s a <code>Root</code>:</p><div class=3D"highlight"><pre tabindex=3D"0" clas=
s=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contenteditable=
=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><spa=
n class=3D"nx">dir</span><span class=3D"p">,</span> <span class=3D"nx">err<=
/span> <span class=3D"o">:=3D</span> <span class=3D"nx">os</span><span clas=
s=3D"p">.</span><span class=3D"nf">OpenRoot</span><span class=3D"p">(</span=
><span class=3D"s">"data"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"opened root=3D%s, err=3D%v\n"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">dir</span><span class=3D"p">.</s=
pan><span class=3D"nf">Name</span><span class=3D"p">(),</span> <span class=
=3D"nx">err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet id=3D"s-os-root" editor=3D=
"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Methods on <code>Root</code> operate within the directo=
ry and do not allow paths outside the directory:</p><div class=3D"highlight=
"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lan=
g=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"line"=
><span class=3D"cl"><span class=3D"nx">file</span><span class=3D"p">,</span=
> <span class=3D"nx">err</span> <span class=3D"o">:=3D</span> <span class=
=3D"nx">dir</span><span class=3D"p">.</span><span class=3D"nf">Open</span><=
span class=3D"p">(</span><span class=3D"s">"01.txt"</span><span class=3D"p"=
>)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"opened file=3D%s, err=3D%v\n"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">file</span><span class=3D"p">.</=
span><span class=3D"nf">Name</span><span class=3D"p">(),</span> <span class=
=3D"nx">err</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fi=
le</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span cla=
ss=3D"p">=3D</span> <span class=3D"nx">dir</span><span class=3D"p">.</span>=
<span class=3D"nf">Open</span><span class=3D"p">(</span><span class=3D"s">"=
../main.txt"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"opened file=3D%v, err=3D%v\n"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">file</span><span class=3D"p">,</=
span> <span class=3D"nx">err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-os-root" template=3D"root.go" output=3D"" state=
=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Methods on <code>Root</code> mirror most file system op=
erations available in the <code>os</code> package:</p><div class=3D"highlig=
ht"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-l=
ang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"lin=
e"><span class=3D"cl"><span class=3D"nx">file</span><span class=3D"p">,</sp=
an> <span class=3D"nx">err</span> <span class=3D"o">:=3D</span> <span class=
=3D"nx">dir</span><span class=3D"p">.</span><span class=3D"nf">Create</span=
><span class=3D"p">(</span><span class=3D"s">"new.txt"</span><span class=3D=
"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"created file=3D%s, err=3D%v\n"</span><s=
pan class=3D"p">,</span> <span class=3D"nx">file</span><span class=3D"p">.<=
/span><span class=3D"nf">Name</span><span class=3D"p">(),</span> <span clas=
s=3D"nx">err</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">st=
at</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span cla=
ss=3D"o">:=3D</span> <span class=3D"nx">dir</span><span class=3D"p">.</span=
><span class=3D"nf">Stat</span><span class=3D"p">(</span><span class=3D"s">=
"02.txt"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"s"=
>"file info: name=3D%s, size=3D%dB, mode=3D%v, err=3D%v\n"</span><span clas=
s=3D"p">,</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">stat</span><span class=3D"p">.</span><span class=3D"nf">Name</span><span =
class=3D"p">(),</span> <span class=3D"nx">stat</span><span class=3D"p">.</s=
pan><span class=3D"nf">Size</span><span class=3D"p">(),</span> <span class=
=3D"nx">stat</span><span class=3D"p">.</span><span class=3D"nf">Mode</span>=
<span class=3D"p">(),</span> <span class=3D"nx">err</span><span class=3D"p"=
>,</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">)</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">er=
r</span> <span class=3D"p">=3D</span> <span class=3D"nx">dir</span><span cl=
ass=3D"p">.</span><span class=3D"nf">Remove</span><span class=3D"p">(</span=
><span class=3D"s">"03.txt"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"deleted 03.txt, err=3D%v\n"</span><span=
 class=3D"p">,</span> <span class=3D"nx">err</span><span class=3D"p">)</spa=
n>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-os-root" template=3D"root.go" output=3D"" state=
=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>You should close the <code>Root</code> after you are do=
ne with it:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma=
"><code class=3D"language-go" data-lang=3D"go"><span class=3D"line"><span c=
lass=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">process</span=
><span class=3D"p">(</span><span class=3D"nx">dir</span> <span class=3D"kt"=
>string</span><span class=3D"p">)</span> <span class=3D"kt">error</span> <s=
pan class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">r</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span cl=
ass=3D"o">:=3D</span> <span class=3D"nx">os</span><span class=3D"p">.</span=
><span class=3D"nf">OpenRoot</span><span class=3D"p">(</span><span class=3D=
"nx">dir</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">err</span> <span class=3D"o">!=3D</span> <spa=
n class=3D"kc">nil</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">return</span> <span class=3D"nx">err</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nx">r</span><span class=3D"p">.</span><span cl=
ass=3D"nf">Close</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// do stuff
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"k">return</span> <span class=3D"kc">nil</spa=
n>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><p>After the <code>Root</code> is closed, =
calling its methods return errors:</p><div class=3D"highlight"><pre tabinde=
x=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" conte=
nteditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=
=3D"cl"><span class=3D"nx">err</span> <span class=3D"p">=3D</span> <span cl=
ass=3D"nx">dir</span><span class=3D"p">.</span><span class=3D"nf">Close</sp=
an><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"closed root, err=3D%v\n"</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">err</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fi=
le</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span cla=
ss=3D"o">:=3D</span> <span class=3D"nx">dir</span><span class=3D"p">.</span=
><span class=3D"nf">Open</span><span class=3D"p">(</span><span class=3D"s">=
"01.txt"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"opened file=3D%v, err=3D%v\n"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">file</span><span class=3D"p">,</=
span> <span class=3D"nx">err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-os-root" template=3D"root.go" output=3D"" state=
=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><code>Root</code> methods follow symbolic links, but th=
ese links cannot reference locations outside the root. Symbolic links must =
be relative. Methods do not restrict traversal of filesystem boundaries, Li=
nux bind mounts, /proc special files, or access to Unix device files.</p><p=
>On most platforms, creating a <code>Root</code> opens a file descriptor or=
 handle for the directory. If the directory is moved, <code>Root</code> met=
hods reference the directory in its new location.</p><p>=F0=9D=97=A3 <a hre=
f=3D"https://go.dev/issue/67002">67002</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/612136">612136</a>, <=
a href=3D"https://go.dev/cl/627076">627076</a>, <a href=3D"https://go.dev/c=
l/627475">627475</a>, <a href=3D"https://go.dev/cl/629518">629518</a>, <a h=
ref=3D"https://go.dev/cl/629555">629555</a></p><h2 id=3D"benchmark-loop">Be=
nchmark loop</h2><p>You are probably familiar with a benchmark loop (<code>=
for range b.N</code>):</p><div class=3D"highlight"><pre tabindex=3D"0" clas=
s=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contenteditable=
=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><spa=
n class=3D"kd">var</span> <span class=3D"nx">sink</span> <span class=3D"kt"=
>int</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">fu=
nc</span> <span class=3D"nf">BenchmarkSlicesMax</span><span class=3D"p">(</=
span><span class=3D"nx">b</span> <span class=3D"o">*</span><span class=3D"n=
x">testing</span><span class=3D"p">.</span><span class=3D"nx">B</span><span=
 class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Setup the benchmark.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">s</span> <span class=3D"o">:=3D</span> <=
span class=3D"nf">randomSlice</span><span class=3D"p">(</span><span class=
=3D"mi">10_000</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">b</span><span class=3D"p">.</span><span class=3D"nf">ResetTimer</span><sp=
an class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Run the benchmark.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"k">for</span> <span class=3D"k">range</span>=
 <span class=3D"nx">b</span><span class=3D"p">.</span><span class=3D"nx">N<=
/span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">sink</span> <span class=3D"p">=3D</span> <span class=3D"nx">slices<=
/span><span class=3D"p">.</span><span class=3D"nf">Max</span><span class=3D=
"p">(</span><span class=3D"nx">s</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"benchmark.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Go conveniently handles the mechanics of running benchm=
arks, determines a reasonable <code>b.N</code>, and provides the final resu=
lts in nanoseconds per operation.</p><p>Yet, there are a few nuances to kee=
p in mind:</p><ul><li>The benchmark function (<code>BenchmarkSlicesMax</cod=
e>) runs multiple times, so the setup step also runs multiple times (nothin=
g we can do about that).</li><li>We need to reset the benchmark timer to ex=
clude the setup time from the benchmark time.</li><li>We have to ensure the=
 compiler doesn't optimize away the benchmarked call (<code>slices.Max</cod=
e>) by using a sink variable.</li></ul><p>Go 1.24 introduces the faster and=
 less error-prone <a href=3D"https://tip.golang.org/pkg/testing#B.Loop"><co=
de>testing.B.Loop</code></a> to replace the traditional <code>for range b.N=
</code> loop:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chro=
ma"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D"true" s=
pellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"=
kd">func</span> <span class=3D"nf">BenchmarkSlicesMax</span><span class=3D"=
p">(</span><span class=3D"nx">b</span> <span class=3D"o">*</span><span clas=
s=3D"nx">testing</span><span class=3D"p">.</span><span class=3D"nx">B</span=
><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Setup the benchmark.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">s</span> <span class=3D"o">:=3D</span> <=
span class=3D"nf">randomSlice</span><span class=3D"p">(</span><span class=
=3D"mi">10_000</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Run the benchmark.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"k">for</span> <span class=3D"nx">b</span><sp=
an class=3D"p">.</span><span class=3D"nf">Loop</span><span class=3D"p">()</=
span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">slices</span><span class=3D"p">.</span><span class=3D"nf">Max</span=
><span class=3D"p">(</span><span class=3D"nx">s</span><span class=3D"p">)</=
span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"benchmark.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><code>b.Loop</code> solves issues with the <code>b.N</c=
ode> method:</p><ul><li>The benchmark function executes once per <code>-cou=
nt</code>, so setup and cleanup steps run only once.</li><li>Everything out=
side the <code>b.Loop</code> doesn't affect the benchmark time, so <code>b.=
ResetTimer</code> isn't needed.</li><li>Compiler never optimizes away calls=
 to functions within the body of a <code>b.Loop</code>.</li></ul><p>Benchma=
rks should use either <code>b.Loop</code> or a <code>b.N</code>-style loop,=
 but not both.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/61515">61=
515</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/608798">608798</a>, <=
a href=3D"https://go.dev/cl/612043">612043</a>, <a href=3D"https://go.dev/c=
l/612835">612835</a>, <a href=3D"https://go.dev/cl/627755">627755</a>, <a h=
ref=3D"https://go.dev/cl/635898">635898</a></p><h2 id=3D"synthetic-time-for=
-testing">Synthetic time for testing</h2><p>Suppose we have a function that=
 waits for a value from a channel for one minute, then times out:</p><div c=
lass=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lang=
uage-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><sp=
an class=3D"line"><span class=3D"cl"><span class=3D"c1">// Read reads a val=
ue from the input channel and returns it.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// Timeouts after 60 seconds.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">Read</span><s=
pan class=3D"p">(</span><span class=3D"nx">in</span> <span class=3D"kd">cha=
n</span> <span class=3D"kt">int</span><span class=3D"p">)</span> <span clas=
s=3D"p">(</span><span class=3D"kt">int</span><span class=3D"p">,</span> <sp=
an class=3D"kt">error</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>select</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>case</span> <span class=3D"nx">v</span> <span class=3D"o">:=3D</span> <spa=
n class=3D"o">&lt;-</span><span class=3D"nx">in</span><span class=3D"p">:</=
span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">return</span> <span class=3D"nx">v</span><span class=3D"p">,</span> =
<span class=3D"kc">nil</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>case</span> <span class=3D"o">&lt;-</span><span class=3D"nx">time</span><s=
pan class=3D"p">.</span><span class=3D"nf">After</span><span class=3D"p">(<=
/span><span class=3D"mi">60</span> <span class=3D"o">*</span> <span class=
=3D"nx">time</span><span class=3D"p">.</span><span class=3D"nx">Second</spa=
n><span class=3D"p">):</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">return</span> <span class=3D"mi">0</span><span class=3D"p">,</span> =
<span class=3D"nx">errors</span><span class=3D"p">.</span><span class=3D"nf=
">New</span><span class=3D"p">(</span><span class=3D"s">"timeout"</span><sp=
an class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-synctest-read" edi=
tor=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>We use it like this:</p><div class=3D"highlight"><pre t=
abindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go"=
 contenteditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span c=
lass=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">main</span><s=
pan class=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">ch</span> <span class=3D"o">:=3D</span> <span class=3D"nb">make</span><sp=
an class=3D"p">(</span><span class=3D"kd">chan</span> <span class=3D"kt">in=
t</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>go</span> <span class=3D"kd">func</span><span class=3D"p">()</span> <span =
class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">ch</span> <span class=3D"o">&lt;-</span> <span class=3D"mi">42</spa=
n>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">val</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span =
class=3D"o">:=3D</span> <span class=3D"nf">Read</span><span class=3D"p">(</=
span><span class=3D"nx">ch</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"val=3D%v, err=3D%v\n"</span><span c=
lass=3D"p">,</span> <span class=3D"nx">val</span><span class=3D"p">,</span>=
 <span class=3D"nx">err</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-synctest-read" template=3D"header.go" output=3D"=
" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>How do we test the timeout situation? Surely we don't w=
ant the test to actually wait 60 seconds. We could make the timeout a param=
eter (we probably should), but let's say we prefer not to.</p><p>The new <a=
 href=3D"https://github.com/golang/go/blob/master/src/testing/synctest/sync=
test.go"><code>testing/synctest</code></a> package to the rescue! The <code=
>synctest.Run()</code> function executes an isolated "bubble" in a new goro=
utine. Within the bubble, <code>time</code> package functions use a fake cl=
ock, allowing our test to pass instantly:</p><div class=3D"highlight"><pre =
tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go=
"><span class=3D"line"><span class=3D"cl"><span class=3D"kd">func</span> <s=
pan class=3D"nf">TestReadTimeout</span><span class=3D"p">(</span><span clas=
s=3D"nx">t</span> <span class=3D"o">*</span><span class=3D"nx">testing</spa=
n><span class=3D"p">.</span><span class=3D"nx">T</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">synctest</span><span class=3D"p">.</span><span class=3D"nf">Run</span><sp=
an class=3D"p">(</span><span class=3D"kd">func</span><span class=3D"p">()</=
span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">ch</span> <span class=3D"o">:=3D</span> <span class=3D"nb">make</sp=
an><span class=3D"p">(</span><span class=3D"kd">chan</span> <span class=3D"=
kt">int</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">_</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <s=
pan class=3D"o">:=3D</span> <span class=3D"nf">Read</span><span class=3D"p"=
>(</span><span class=3D"nx">ch</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">if</span> <span class=3D"nx">err</span> <span class=3D"o">=3D=3D</sp=
an> <span class=3D"kc">nil</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">            <span cla=
ss=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatal</span>=
<span class=3D"p">(</span><span class=3D"s">"expected timeout error, got ni=
l"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>})</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-text" data-lang=3D"text"><span =
class=3D"line"><span class=3D"cl">PASS
</span></span></code></pre></div><p>Goroutines in the bubble use a syntheti=
c time implementation (the initial time is midnight UTC 2000-01-01). Time a=
dvances when every goroutine in the bubble is blocked. In our example, when=
 the only goroutine is blocked on <code>select</code> in <code>Read</code>,=
 the bubble's clock advances 60 seconds, triggering the timeout case.</p><p=
>Another useful function is <code>synctest.Wait</code>. It waits for all go=
routines in the current bubble to block, then resumes execution:</p><div cl=
ass=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"langu=
age-go" data-lang=3D"go"><span class=3D"line"><span class=3D"cl"><span clas=
s=3D"nx">synctest</span><span class=3D"p">.</span><span class=3D"nf">Run</s=
pan><span class=3D"p">(</span><span class=3D"kd">func</span><span class=3D"=
p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"kd=
">const</span> <span class=3D"nx">timeout</span> <span class=3D"p">=3D</spa=
n> <span class=3D"mi">5</span> <span class=3D"o">*</span> <span class=3D"nx=
">time</span><span class=3D"p">.</span><span class=3D"nx">Second</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">ctx</span><span class=3D"p">,</span> <span class=3D"nx">cancel</span> <sp=
an class=3D"o">:=3D</span> <span class=3D"nx">context</span><span class=3D"=
p">.</span><span class=3D"nf">WithTimeout</span><span class=3D"p">(</span><=
span class=3D"nx">context</span><span class=3D"p">.</span><span class=3D"nf=
">Background</span><span class=3D"p">(),</span> <span class=3D"nx">timeout<=
/span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nf">cancel</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Wait just less than the timeout.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">time</span><span class=3D"p">.</span><sp=
an class=3D"nf">Sleep</span><span class=3D"p">(</span><span class=3D"nx">ti=
meout</span> <span class=3D"o">-</span> <span class=3D"nx">time</span><span=
 class=3D"p">.</span><span class=3D"nx">Nanosecond</span><span class=3D"p">=
)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">synctest</span><span class=3D"p">.</span><span class=3D"nf">Wait</span><s=
pan class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"before timeout: ctx.Err() =3D %v\n"=
</span><span class=3D"p">,</span> <span class=3D"nx">ctx</span><span class=
=3D"p">.</span><span class=3D"nf">Err</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Wait the rest of the way until the timeout.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">time</span><span class=3D"p">.</span><sp=
an class=3D"nf">Sleep</span><span class=3D"p">(</span><span class=3D"nx">ti=
me</span><span class=3D"p">.</span><span class=3D"nx">Nanosecond</span><spa=
n class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">synctest</span><span class=3D"p">.</span><span class=3D"nf">Wait</span><s=
pan class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span=
 class=3D"p">(</span><span class=3D"s">"after timeout:  ctx.Err() =3D %v\n"=
</span><span class=3D"p">,</span> <span class=3D"nx">ctx</span><span class=
=3D"p">.</span><span class=3D"nf">Err</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">})<=
/span>
</span></span></code></pre></div><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-text" data-lang=3D"text"><span =
class=3D"line"><span class=3D"cl">before timeout: ctx.Err() =3D &lt;nil&gt;
</span></span><span class=3D"line"><span class=3D"cl">after timeout:  ctx.E=
rr() =3D context deadline exceeded
</span></span></code></pre></div><p>The <code>synctest</code> package is ex=
perimental and must be enabled by setting <code>GOEXPERIMENT=3Dsynctest</co=
de> at build time. The package API is subject to change in future releases.=
 See the proposal for more information and to provide feeback.</p><p>=F0=9D=
=97=A3 <a href=3D"https://go.dev/issue/67434">67434</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/629735">629735</a>, <=
a href=3D"https://go.dev/cl/629856">629856</a></p><h2 id=3D"test-context-an=
d-working-directory">Test context and working directory</h2><p>Suppose we w=
ant to test this very useful server:</p><div class=3D"highlight"><pre tabin=
dex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" con=
tenteditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=
=3D"cl"><span class=3D"c1">// Server provides answers to all questions.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">type</span> <span class=3D"nx">Server</span>=
 <span class=3D"kd">struct</span><span class=3D"p">{}</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Get returns an answer from the server.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">s</span> <span class=3D"o">*</span><span class=3D"nx">Server</=
span><span class=3D"p">)</span> <span class=3D"nf">Get</span><span class=3D=
"p">(</span><span class=3D"nx">query</span> <span class=3D"kt">string</span=
><span class=3D"p">)</span> <span class=3D"kt">int</span> <span class=3D"p"=
>{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"mi">42</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 startServer starts a server that can
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// be stopped by canceling the context.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">ctx</span> <span class=3D=
"nx">context</span><span class=3D"p">.</span><span class=3D"nx">Context</sp=
an><span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"nx">=
Server</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>go</span> <span class=3D"kd">func</span><span class=3D"p">()</span> <span =
class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">select</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">case</span> <span class=3D"o">&lt;-</span><span class=3D"nx">ctx</sp=
an><span class=3D"p">.</span><span class=3D"nf">Done</span><span class=3D"p=
">():</span>
</span></span><span class=3D"line"><span class=3D"cl">            <span cla=
ss=3D"c1">// Free resources.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>        <span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"o">&amp;</span><span class=3D"nx">Server</spa=
n><span class=3D"p">{}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet id=3D"s-test-server" edito=
r=3D"basic" state=3D"unknown">
<codapi-toolbar>

<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Here's a beautiful test I wrote:</p><div class=3D"highl=
ight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data=
-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"l=
ine"><span class=3D"cl"><span class=3D"kd">func</span> <span class=3D"nf">T=
est</span><span class=3D"p">(</span><span class=3D"nx">t</span> <span class=
=3D"o">*</span><span class=3D"nx">testing</span><span class=3D"p">.</span><=
span class=3D"nx">T</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">srv</span> <span class=3D"o">:=3D</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">context</span><span class=
=3D"p">.</span><span class=3D"nf">Background</span><span class=3D"p">())</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">srv</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"how much?"=
</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">42</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatal</span><s=
pan class=3D"p">(</span><span class=3D"s">"unexpected value"</span><span cl=
ass=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-test-server" template=3D"test.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Hooray, the test passed! However, there's a problem: I =
used an empty context, so the server didn't actually stop. Such resource le=
akage can be an issue, especially with many tests.</p><p>I can fix it by cr=
eating a cancelable context and canceling it when the test completes:</p><d=
iv class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"=
language-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"=
><span class=3D"line"><span class=3D"cl"><span class=3D"kd">func</span> <sp=
an class=3D"nf">Test</span><span class=3D"p">(</span><span class=3D"nx">t</=
span> <span class=3D"o">*</span><span class=3D"nx">testing</span><span clas=
s=3D"p">.</span><span class=3D"nx">T</span><span class=3D"p">)</span> <span=
 class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">ctx</span><span class=3D"p">,</span> <span class=3D"nx">cancel</span> <sp=
an class=3D"o">:=3D</span> <span class=3D"nx">context</span><span class=3D"=
p">.</span><span class=3D"nf">WithCancel</span><span class=3D"p">(</span><s=
pan class=3D"nx">context</span><span class=3D"p">.</span><span class=3D"nf"=
>Background</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>defer</span> <span class=3D"nf">cancel</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">srv</span> <span class=3D"o">:=3D</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">ctx</span><span class=3D"=
p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">srv</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"how much?"=
</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">42</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatal</span><s=
pan class=3D"p">(</span><span class=3D"s">"unexpected value"</span><span cl=
ass=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-test-server" template=3D"test.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Even better, now I can use the new <a href=3D"https://t=
ip.golang.org/pkg/testing#T.Context"><code>T.Context</code></a> method. It =
returns a context that is canceled after the test completes:</p><div class=
=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language=
-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span c=
lass=3D"line"><span class=3D"cl"><span class=3D"kd">func</span> <span class=
=3D"nf">Test</span><span class=3D"p">(</span><span class=3D"nx">t</span> <s=
pan class=3D"o">*</span><span class=3D"nx">testing</span><span class=3D"p">=
.</span><span class=3D"nx">T</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">srv</span> <span class=3D"o">:=3D</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">t</span><span class=3D"p"=
>.</span><span class=3D"nf">Context</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">srv</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"how much?"=
</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">42</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatal</span><s=
pan class=3D"p">(</span><span class=3D"s">"unexpected value"</span><span cl=
ass=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" depends-on=3D"s-test-server" template=3D"test.go" output=3D"" st=
ate=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>One caveat remains. What if cleaning up server resource=
s takes time? The <code>startServer</code> goroutine will initiate the clea=
nup when the test context closes, but will it finish before the main gorout=
ine exits? Not necessarily.</p><p>There is a useful test context property t=
hat can help us. The test context is canceled <em>just before</em> <code>T.=
Cleanup</code>-registered functions are called. So we can use <code>T.Clean=
up</code> to register a function that waits for the server to stop:</p><div=
 class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"la=
nguage-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><=
span class=3D"line"><span class=3D"cl"><span class=3D"kd">func</span> <span=
 class=3D"nf">Test</span><span class=3D"p">(</span><span class=3D"nx">t</sp=
an> <span class=3D"o">*</span><span class=3D"nx">testing</span><span class=
=3D"p">.</span><span class=3D"nx">T</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">srv</span> <span class=3D"o">:=3D</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">t</span><span class=3D"p"=
>.</span><span class=3D"nf">Context</span><span class=3D"p">())</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">t</span><span class=3D"p">.</span><span class=3D"nf">Cleanup</span><span =
class=3D"p">(</span><span class=3D"kd">func</span><span class=3D"p">()</spa=
n> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"o">&lt;-</span><span class=3D"nx">srv</span><span class=3D"p">.</span><=
span class=3D"nf">Done</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>})</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>if</span> <span class=3D"nx">srv</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"how much?"=
</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">42</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatal</span><s=
pan class=3D"p">(</span><span class=3D"s">"unexpected value"</span><span cl=
ass=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"test-cleanup.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><details><summary>The server code has also changed</summar=
y><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=
=3D"language-go" data-lang=3D"go"><span class=3D"line"><span class=3D"cl"><=
span class=3D"c1">// Server provides answers to all questions.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">type</span> <span class=3D"nx">Server</span>=
 <span class=3D"kd">struct</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">done</span> <span class=3D"kd">chan</span> <span class=3D"kd">struct</spa=
n><span class=3D"p">{}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Get returns an anser from the server.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">s</span> <span class=3D"o">*</span><span class=3D"nx">Server</=
span><span class=3D"p">)</span> <span class=3D"nf">Get</span><span class=3D=
"p">(</span><span class=3D"nx">query</span> <span class=3D"kt">string</span=
><span class=3D"p">)</span> <span class=3D"kt">int</span> <span class=3D"p"=
>{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"mi">42</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Stop stops the server.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">s</span> <span class=3D"o">*</span><span class=3D"nx">Server</=
span><span class=3D"p">)</span> <span class=3D"nf">Stop</span><span class=
=3D"p">()</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// Simulate a long operation.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nx">time</span><span class=3D"p">.</span><sp=
an class=3D"nf">Sleep</span><span class=3D"p">(</span><span class=3D"mi">10=
</span> <span class=3D"o">*</span> <span class=3D"nx">time</span><span clas=
s=3D"p">.</span><span class=3D"nx">Millisecond</span><span class=3D"p">)</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"s">"server stopped"</span><span class=
=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nb=
">close</span><span class=3D"p">(</span><span class=3D"nx">s</span><span cl=
ass=3D"p">.</span><span class=3D"nx">done</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Done returns a channel that's closed when the server stops.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"p">(</span><span =
class=3D"nx">s</span> <span class=3D"o">*</span><span class=3D"nx">Server</=
span><span class=3D"p">)</span> <span class=3D"nf">Done</span><span class=
=3D"p">()</span> <span class=3D"o">&lt;-</span><span class=3D"kd">chan</spa=
n> <span class=3D"kd">struct</span><span class=3D"p">{}</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nx">s</span><span class=3D"p">.</span><span c=
lass=3D"nx">done</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 startServer starts a server that can
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1">// be stopped by canceling the context.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"kd">func</span> <span class=3D"nf">startServer</=
span><span class=3D"p">(</span><span class=3D"nx">ctx</span> <span class=3D=
"nx">context</span><span class=3D"p">.</span><span class=3D"nx">Context</sp=
an><span class=3D"p">)</span> <span class=3D"o">*</span><span class=3D"nx">=
Server</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">srv</span> <span class=3D"o">:=3D</span> <span class=3D"o">&amp;</span><s=
pan class=3D"nx">Server</span><span class=3D"p">{</span><span class=3D"nx">=
done</span><span class=3D"p">:</span> <span class=3D"nb">make</span><span c=
lass=3D"p">(</span><span class=3D"kd">chan</span> <span class=3D"kd">struct=
</span><span class=3D"p">{})}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>go</span> <span class=3D"kd">func</span><span class=3D"p">()</span> <span =
class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">select</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">case</span> <span class=3D"o">&lt;-</span><span class=3D"nx">ctx</sp=
an><span class=3D"p">.</span><span class=3D"nf">Done</span><span class=3D"p=
">():</span>
</span></span><span class=3D"line"><span class=3D"cl">            <span cla=
ss=3D"nx">srv</span><span class=3D"p">.</span><span class=3D"nf">Stop</span=
><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>}()</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"nx">srv</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div></details><p>Like tests, benchmarks have t=
heir own <a href=3D"https://tip.golang.org/pkg/testing#B.Context"><code>B.C=
ontext</code></a>.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/36532=
">36532</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/603959">603959</a>, <=
a href=3D"https://go.dev/cl/637236">637236</a></p><p>Oh, and speaking of te=
sts, the new <a href=3D"https://tip.golang.org/pkg/testing#T.Chdir"><code>T=
.Chdir</code></a> and <a href=3D"https://tip.golang.org/pkg/testing#B.Chdir=
"><code>B.Chdir</code></a> methods change the working directory for the dur=
ation of a test or benchmark:</p><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contentedi=
table=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"=
><span class=3D"kd">func</span> <span class=3D"nf">Test</span><span class=
=3D"p">(</span><span class=3D"nx">t</span> <span class=3D"o">*</span><span =
class=3D"nx">testing</span><span class=3D"p">.</span><span class=3D"nx">T</=
span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">t</span><span class=3D"p">.</span><span class=3D"nf">Run</span><span clas=
s=3D"p">(</span><span class=3D"s">"test1"</span><span class=3D"p">,</span> =
<span class=3D"kd">func</span><span class=3D"p">(</span><span class=3D"nx">=
t</span> <span class=3D"o">*</span><span class=3D"nx">testing</span><span c=
lass=3D"p">.</span><span class=3D"nx">T</span><span class=3D"p">)</span> <s=
pan class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"c1">// Change the working directory for the current test.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>        <span class=3D"nx">t</span><span class=3D"p">.</span><s=
pan class=3D"nf">Chdir</span><span class=3D"p">(</span><span class=3D"s">"/=
tmp"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"nx">cwd</span><span class=3D"p">,</span> <span class=3D"nx">_</span> <s=
pan class=3D"o">:=3D</span> <span class=3D"nx">os</span><span class=3D"p">.=
</span><span class=3D"nf">Getwd</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">if</span> <span class=3D"nx">cwd</span> <span class=3D"o">!=3D</span=
> <span class=3D"s">"/tmp"</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">            <span cla=
ss=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatalf</span=
><span class=3D"p">(</span><span class=3D"s">"unexpected cwd: %s"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">cwd</span><span class=3D"p">)</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>})</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">t</span><span class=3D"p">.</span><span class=3D"nf">Run</span><span clas=
s=3D"p">(</span><span class=3D"s">"test2"</span><span class=3D"p">,</span> =
<span class=3D"kd">func</span><span class=3D"p">(</span><span class=3D"nx">=
t</span> <span class=3D"o">*</span><span class=3D"nx">testing</span><span c=
lass=3D"p">.</span><span class=3D"nx">T</span><span class=3D"p">)</span> <s=
pan class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"c1">// This test uses the original working directory.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>        <span class=3D"nx">cwd</span><span class=3D"p">,</span>=
 <span class=3D"nx">_</span> <span class=3D"o">:=3D</span> <span class=3D"n=
x">os</span><span class=3D"p">.</span><span class=3D"nf">Getwd</span><span =
class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"k">if</span> <span class=3D"nx">cwd</span> <span class=3D"o">=3D=3D</sp=
an> <span class=3D"s">"/tmp"</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">            <span cla=
ss=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nf">Fatalf</span=
><span class=3D"p">(</span><span class=3D"s">"unexpected cwd: %s"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">cwd</span><span class=3D"p">)</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl">        <span class=
=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"p"=
>})</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"test.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><code>Chdir</code> methods use <code>Cleanup</code> to =
restore the working directory to its original value after the test or bench=
mark.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/62516">62516</a> =
=E2=80=A2 =F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/529895">529=
895</a></p><h2 id=3D"discard-log-output">Discard log output</h2><p>An easy =
way to create a silent logger (e.g. for testing or benchmarking) is to use =
<code>slog.TextHandler</code> with <code>io.Discard</code>:</p><div class=
=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language=
-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span c=
lass=3D"line"><span class=3D"cl"><span class=3D"nx">log</span> <span class=
=3D"o">:=3D</span> <span class=3D"nx">slog</span><span class=3D"p">.</span>=
<span class=3D"nf">New</span><span class=3D"p">(</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">slog</span><span class=3D"p">.</span><span class=3D"nf">NewTextHandler</s=
pan><span class=3D"p">(</span><span class=3D"nx">io</span><span class=3D"p"=
>.</span><span class=3D"nx">Discard</span><span class=3D"p">,</span> <span =
class=3D"kc">nil</span><span class=3D"p">),</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">)</=
span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">lo=
g</span><span class=3D"p">.</span><span class=3D"nf">Info</span><span class=
=3D"p">(</span><span class=3D"s">"Prints nothing"</span><span class=3D"p">)=
</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>Now there's an even easier way with the <a href=3D"http=
s://tip.golang.org/pkg/log/slog#DiscardHandler"><code>slog.DiscardHandler</=
code></a> package-level variable:</p><div class=3D"highlight"><pre tabindex=
=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go" conten=
teditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span class=3D=
"cl"><span class=3D"nx">log</span> <span class=3D"o">:=3D</span> <span clas=
s=3D"nx">slog</span><span class=3D"p">.</span><span class=3D"nf">New</span>=
<span class=3D"p">(</span><span class=3D"nx">slog</span><span class=3D"p">.=
</span><span class=3D"nx">DiscardHandler</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">lo=
g</span><span class=3D"p">.</span><span class=3D"nf">Info</span><span class=
=3D"p">(</span><span class=3D"s">"Prints nothing"</span><span class=3D"p">)=
</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/62005">620=
05</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/626486">626486</a></p=
><h2 id=3D"appender-interfaces">Appender interfaces</h2><p>Two new interfac=
es, <a href=3D"https://tip.golang.org/pkg/encoding#TextAppender"><code>enco=
ding.TextAppender</code></a> and <a href=3D"https://tip.golang.org/pkg/enco=
ding#BinaryAppender"><code>encoding.BinaryAppender</code></a>, allow append=
ing an object's textual or binary representation to a byte slice.</p><div c=
lass=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lang=
uage-go" data-lang=3D"go"><span class=3D"line"><span class=3D"cl"><span cla=
ss=3D"kd">type</span> <span class=3D"nx">TextAppender</span> <span class=3D=
"kd">interface</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// AppendText appends the textual representation of itself to the end of =
b
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// (allocating a larger slice if necessa=
ry) and returns the updated slice.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">//
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// Implementations must not retain b, no=
r mutate any bytes within b[:len(b)].
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nf">AppendText</span><span class=3D"p">(</sp=
an><span class=3D"nx">b</span> <span class=3D"p">[]</span><span class=3D"kt=
">byte</span><span class=3D"p">)</span> <span class=3D"p">([]</span><span c=
lass=3D"kt">byte</span><span class=3D"p">,</span> <span class=3D"kt">error<=
/span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go"><span clas=
s=3D"line"><span class=3D"cl"><span class=3D"kd">type</span> <span class=3D=
"nx">BinaryAppender</span> <span class=3D"kd">interface</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"c1=
">// AppendBinary appends the binary representation of itself to the end of=
 b
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// (allocating a larger slice if necessa=
ry) and returns the updated slice.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">//
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"c1">// Implementations must not retain b, no=
r mutate any bytes within b[:len(b)].
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span>    <span class=3D"nf">AppendBinary</span><span class=3D"p">(</=
span><span class=3D"nx">b</span> <span class=3D"p">[]</span><span class=3D"=
kt">byte</span><span class=3D"p">)</span> <span class=3D"p">([]</span><span=
 class=3D"kt">byte</span><span class=3D"p">,</span> <span class=3D"kt">erro=
r</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><p>These interfaces provide the same funct=
ionality as <code>TextMarshaler</code> and <code>BinaryMarshaler</code>, bu=
t instead of allocating a new slice each time, they append the data directl=
y to an existing slice.</p><p>These interfaces are now implemented by stand=
ard library types that already implemented <code>TextMarshaler</code> or <c=
ode>BinaryMarshaler</code>: <code>math/big.Float</code>, <code>net.IP</code=
>, <code>regexp.Regexp</code>, <code>time.Time</code>, and others:</p><div =
class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lan=
guage-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><s=
pan class=3D"line"><span class=3D"cl"><span class=3D"c1">// 2021-02-03T04:0=
5:06Z
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"nx">t</span> <span class=3D"o">:=3D</span> <span=
 class=3D"nx">time</span><span class=3D"p">.</span><span class=3D"nf">Date<=
/span><span class=3D"p">(</span><span class=3D"mi">2021</span><span class=
=3D"p">,</span> <span class=3D"mi">2</span><span class=3D"p">,</span> <span=
 class=3D"mi">3</span><span class=3D"p">,</span> <span class=3D"mi">4</span=
><span class=3D"p">,</span> <span class=3D"mi">5</span><span class=3D"p">,<=
/span> <span class=3D"mi">6</span><span class=3D"p">,</span> <span class=3D=
"mi">0</span><span class=3D"p">,</span> <span class=3D"nx">time</span><span=
 class=3D"p">.</span><span class=3D"nx">UTC</span><span class=3D"p">)</span=
>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"kd">va=
r</span> <span class=3D"nx">b</span> <span class=3D"p">[]</span><span class=
=3D"kt">byte</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">b<=
/span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span class=
=3D"o">:=3D</span> <span class=3D"nx">t</span><span class=3D"p">.</span><sp=
an class=3D"nf">AppendText</span><span class=3D"p">(</span><span class=3D"n=
x">b</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"b=3D%s, err=3D%v"</span><span class=3D"=
p">,</span> <span class=3D"nx">b</span><span class=3D"p">,</span> <span cla=
ss=3D"nx">err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"succeded">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status>
            =E2=9C=93 Done
            <codapi-ref>by <a href=3D"https://codapi.org/">codapi</a></coda=
pi-ref></codapi-status>
</codapi-toolbar>
<codapi-output mode=3D"text" style=3D"">
<a href=3D"https://antonz.org/go-1-24/#close">=E2=9C=95</a>
<pre><code>b=3D2021-02-03T04:05:06Z, err=3D&lt;nil&gt;</code></pre>
</codapi-output>
</codapi-snippet><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/62384">623=
84</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/601595">601595</a>, <=
a href=3D"https://go.dev/cl/601776">601776</a>, <a href=3D"https://go.dev/c=
l/603255">603255</a>, <a href=3D"https://go.dev/cl/603815">603815</a>, <a h=
ref=3D"https://go.dev/cl/605056">605056</a>, <a href=3D"https://go.dev/cl/6=
05758">605758</a>, <a href=3D"https://go.dev/cl/606655">606655</a>, <a href=
=3D"https://go.dev/cl/607079">607079</a>, <a href=3D"https://go.dev/cl/6075=
20">607520</a>, <a href=3D"https://go.dev/cl/634515">634515</a></p><h2 id=
=3D"more-string-and-byte-iterators">More string and byte iterators</h2><p>G=
o 1.23 went all in on iterators, so we see more and more of them in the sta=
ndard library.</p><p>New functions in the <a href=3D"https://tip.golang.org=
/pkg/strings"><code>strings</code></a> package:</p><p><a href=3D"https://ti=
p.golang.org/pkg/strings#Lines"><code>Lines</code></a> returns an iterator =
over the newline-terminated lines in the string <code>s</code>:</p><div cla=
ss=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"langua=
ge-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span=
 class=3D"line"><span class=3D"cl"><span class=3D"nx">s</span> <span class=
=3D"o">:=3D</span> <span class=3D"s">"one\ntwo\nsix"</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">for=
</span> <span class=3D"nx">line</span> <span class=3D"o">:=3D</span> <span =
class=3D"k">range</span> <span class=3D"nx">strings</span><span class=3D"p"=
>.</span><span class=3D"nf">Lines</span><span class=3D"p">(</span><span cla=
ss=3D"nx">s</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Print</span><span =
class=3D"p">(</span><span class=3D"nx">line</span><span class=3D"p">)</span=
>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><a href=3D"https://tip.golang.org/pkg/strings#SplitSeq"=
><code>SplitSeq</code></a> returns an iterator over all substrings of <code=
>s</code> separated by <code>sep</code>:</p><div class=3D"highlight"><pre t=
abindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=3D"go"=
 contenteditable=3D"true" spellcheck=3D"false"><span class=3D"line"><span c=
lass=3D"cl"><span class=3D"nx">s</span> <span class=3D"o">:=3D</span> <span=
 class=3D"s">"one-two-six"</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">for=
</span> <span class=3D"nx">part</span> <span class=3D"o">:=3D</span> <span =
class=3D"k">range</span> <span class=3D"nx">strings</span><span class=3D"p"=
>.</span><span class=3D"nf">SplitSeq</span><span class=3D"p">(</span><span =
class=3D"nx">s</span><span class=3D"p">,</span> <span class=3D"s">"-"</span=
><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"nx">part</span><span class=3D"p">)</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><a href=3D"https://tip.golang.org/pkg/strings#SplitAfte=
rSeq"><code>SplitAfterSeq</code></a> returns an iterator over substrings of=
 <code>s</code> split after each instance of <code>sep</code>:</p><div clas=
s=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"languag=
e-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span =
class=3D"line"><span class=3D"cl"><span class=3D"nx">s</span> <span class=
=3D"o">:=3D</span> <span class=3D"s">"one-two-six"</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">for=
</span> <span class=3D"nx">part</span> <span class=3D"o">:=3D</span> <span =
class=3D"k">range</span> <span class=3D"nx">strings</span><span class=3D"p"=
>.</span><span class=3D"nf">SplitAfterSeq</span><span class=3D"p">(</span><=
span class=3D"nx">s</span><span class=3D"p">,</span> <span class=3D"s">"-"<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"nx">part</span><span class=3D"p">)</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><a href=3D"https://tip.golang.org/pkg/strings#FieldsSeq=
"><code>FieldsSeq</code></a> returns an iterator over substrings of <code>s=
</code> split around runs of whitespace characters, as defined by <code>uni=
code.IsSpace</code>:</p><div class=3D"highlight"><pre tabindex=3D"0" class=
=3D"chroma"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D=
"true" spellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span c=
lass=3D"nx">s</span> <span class=3D"o">:=3D</span> <span class=3D"s">"one t=
wo\nsix"</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">for=
</span> <span class=3D"nx">part</span> <span class=3D"o">:=3D</span> <span =
class=3D"k">range</span> <span class=3D"nx">strings</span><span class=3D"p"=
>.</span><span class=3D"nf">FieldsSeq</span><span class=3D"p">(</span><span=
 class=3D"nx">s</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"nx">part</span><span class=3D"p">)</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p><a href=3D"https://tip.golang.org/pkg/strings#FieldsFun=
cSeq"><code>FieldsFuncSeq</code></a> returns an iterator over substrings of=
 <code>s</code> split around runs of Unicode code points satisfying <code>f=
(c)</code>:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma=
"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D"true" spe=
llcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"nx=
">f</span> <span class=3D"o">:=3D</span> <span class=3D"kd">func</span><spa=
n class=3D"p">(</span><span class=3D"nx">c</span> <span class=3D"kt">rune</=
span><span class=3D"p">)</span> <span class=3D"kt">bool</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"k"=
>return</span> <span class=3D"p">!</span><span class=3D"nx">unicode</span><=
span class=3D"p">.</span><span class=3D"nf">IsLetter</span><span class=3D"p=
">(</span><span class=3D"nx">c</span><span class=3D"p">)</span> <span class=
=3D"o">&amp;&amp;</span> <span class=3D"p">!</span><span class=3D"nx">unico=
de</span><span class=3D"p">.</span><span class=3D"nf">IsNumber</span><span =
class=3D"p">(</span><span class=3D"nx">c</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">s<=
/span> <span class=3D"o">:=3D</span> <span class=3D"s">"one,two;six..."</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">for=
</span> <span class=3D"nx">part</span> <span class=3D"o">:=3D</span> <span =
class=3D"k">range</span> <span class=3D"nx">strings</span><span class=3D"p"=
>.</span><span class=3D"nf">FieldsFuncSeq</span><span class=3D"p">(</span><=
span class=3D"nx">s</span><span class=3D"p">,</span> <span class=3D"nx">f</=
span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">fmt</span><span class=3D"p">.</span><span class=3D"nf">Println</span><spa=
n class=3D"p">(</span><span class=3D"nx">part</span><span class=3D"p">)</sp=
an>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>The same iterator functions were added to the <a href=
=3D"https://tip.golang.org/pkg/bytes"><code>bytes</code></a> package.</p><p=
>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/61901">61901</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/587095">587095</a></p=
><h2 id=3D"sha-3-and-friends">SHA-3 and friends</h2><p>The new <a href=3D"h=
ttps://tip.golang.org/pkg/crypto/sha3"><code>crypto/sha3</code></a> package=
 implements the SHA-3 hash function and SHAKE and cSHAKE extendable-output =
functions, as defined in <a href=3D"http://doi.org/10.6028/NIST.FIPS.202">F=
IPS 202</a>:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chrom=
a"><code class=3D"language-go" data-lang=3D"go" contenteditable=3D"true" sp=
ellcheck=3D"false"><span class=3D"line"><span class=3D"cl"><span class=3D"n=
x">s</span> <span class=3D"o">:=3D</span> <span class=3D"p">[]</span><span =
class=3D"nb">byte</span><span class=3D"p">(</span><span class=3D"s">"go is =
awesome"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"Source: %s\n"</span><span class=3D"p">,=
</span> <span class=3D"nx">s</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"SHA3-224: %x\n"</span><span class=3D"p"=
>,</span> <span class=3D"nx">sha3</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Sum224</span><span class=3D"p">(</span><span class=3D"nx">s</span=
><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"SHA3-256: %x\n"</span><span class=3D"p"=
>,</span> <span class=3D"nx">sha3</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Sum256</span><span class=3D"p">(</span><span class=3D"nx">s</span=
><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"SHA3-384: %x\n"</span><span class=3D"p"=
>,</span> <span class=3D"nx">sha3</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Sum384</span><span class=3D"p">(</span><span class=3D"nx">s</span=
><span class=3D"p">))</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Printf</span><span cla=
ss=3D"p">(</span><span class=3D"s">"SHA3-512: %x\n"</span><span class=3D"p"=
>,</span> <span class=3D"nx">sha3</span><span class=3D"p">.</span><span cla=
ss=3D"nf">Sum512</span><span class=3D"p">(</span><span class=3D"nx">s</span=
><span class=3D"p">))</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/69982">699=
82</a> =E2=80=A2 =F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/6291=
76">629176</a></p><p>And two more <code>crypto</code> packages:</p><p><a hr=
ef=3D"https://tip.golang.org/pkg/crypto/hkdf/"><code>crypto/hkdf</code></a>=
 package implements the HMAC-based Extract-and-Expand key derivation functi=
on HKDF, as defined in <a href=3D"https://www.rfc-editor.org/rfc/rfc5869.ht=
ml">RFC 5869</a>.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/61477"=
>61477</a> =E2=80=A2 =F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/=
630296">630296</a></p><p><a href=3D"https://tip.golang.org/pkg/crypto/pbkdf=
2/"><code>crypto/pbkdf2</code></a> package implements the password-based ke=
y derivation function PBKDF2, as defined in <a href=3D"https://www.rfc-edit=
or.org/rfc/rfc8018.html">RFC 8018</a>.</p><p>=F0=9D=97=A3 <a href=3D"https:=
//go.dev/issue/69488">69488</a> =E2=80=A2 =F0=9D=97=96=F0=9D=97=9F <a href=
=3D"https://go.dev/cl/628135">628135</a></p><h2 id=3D"http-protocols">HTTP =
protocols</h2><p>The new <a href=3D"https://tip.golang.org/pkg/net/http#Ser=
ver.Protocols"><code>Server.Protocols</code></a> and <a href=3D"https://tip=
.golang.org/pkg/net/http#Transport.Protocols"><code>Transport.Protocols</co=
de></a> fields in the <code>net/http</code> package provide a simple way to=
 configure what HTTP protocols a server or client use:</p><div class=3D"hig=
hlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" da=
ta-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D=
"line"><span class=3D"cl"><span class=3D"nx">t</span> <span class=3D"o">:=
=3D</span> <span class=3D"nx">http</span><span class=3D"p">.</span><span cl=
ass=3D"nx">DefaultTransport</span><span class=3D"p">.(</span><span class=3D=
"o">*</span><span class=3D"nx">http</span><span class=3D"p">.</span><span c=
lass=3D"nx">Transport</span><span class=3D"p">).</span><span class=3D"nf">C=
lone</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"c1">//=
 Use either HTTP/1 or HTTP/2.
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"nx">t</span><span class=3D"p">.</span><span clas=
s=3D"nx">Protocols</span> <span class=3D"p">=3D</span> <span class=3D"nb">n=
ew</span><span class=3D"p">(</span><span class=3D"nx">http</span><span clas=
s=3D"p">.</span><span class=3D"nx">Protocols</span><span class=3D"p">)</spa=
n>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">t<=
/span><span class=3D"p">.</span><span class=3D"nx">Protocols</span><span cl=
ass=3D"p">.</span><span class=3D"nf">SetHTTP1</span><span class=3D"p">(</sp=
an><span class=3D"kc">true</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">t<=
/span><span class=3D"p">.</span><span class=3D"nx">Protocols</span><span cl=
ass=3D"p">.</span><span class=3D"nf">SetHTTP2</span><span class=3D"p">(</sp=
an><span class=3D"kc">true</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">cl=
i</span> <span class=3D"o">:=3D</span> <span class=3D"o">&amp;</span><span =
class=3D"nx">http</span><span class=3D"p">.</span><span class=3D"nx">Client=
</span><span class=3D"p">{</span><span class=3D"nx">Transport</span><span c=
lass=3D"p">:</span> <span class=3D"nx">t</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">re=
s</span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span clas=
s=3D"o">:=3D</span> <span class=3D"nx">cli</span><span class=3D"p">.</span>=
<span class=3D"nf">Get</span><span class=3D"p">(</span><span class=3D"s">"h=
ttp://httpbingo.org/status/200"</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"k">if<=
/span> <span class=3D"nx">err</span> <span class=3D"o">!=3D</span> <span cl=
ass=3D"kc">nil</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nb=
">panic</span><span class=3D"p">(</span><span class=3D"nx">err</span><span =
class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">re=
s</span><span class=3D"p">.</span><span class=3D"nx">Body</span><span class=
=3D"p">.</span><span class=3D"nf">Close</span><span class=3D"p">()</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>The supported protocols are:</p><ul><li>HTTP1 is the HT=
TP/1.0 and HTTP/1.1 protocols. HTTP1 is supported on both unsecured TCP and=
 secured TLS connections.</li><li>HTTP2 is the HTTP/2 protcol over a TLS co=
nnection.</li><li>UnencryptedHTTP2 is the HTTP/2 protocol over an unsecured=
 TCP connection.</li></ul><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/6=
7814">67814</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/607496">607496</a></p=
><h2 id=3D"omit-zero-values-in-json">Omit zero values in JSON</h2><p>The ne=
w <code>omitzero</code> option in the field tag instructs the JSON marshale=
r to omit zero values. It is clearer and less error-prone than <code>omitem=
pty</code> when the intent is to omit zero values. Unlike <code>omitempty</=
code>, <code>omitzero</code> omits zero-valued <code>time.Time</code> value=
s, a common source of friction.</p><p>Compare <code>omitempty</code>:</p><d=
iv class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"=
language-go" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"=
><span class=3D"line"><span class=3D"cl"><span class=3D"kd">type</span> <sp=
an class=3D"nx">Person</span> <span class=3D"kd">struct</span> <span class=
=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">Name</span>      <span class=3D"kt">string</span>    <span class=3D"s">`j=
son:"name"`</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">BirthDate</span> <span class=3D"nx">time</span><span class=3D"p">.</span>=
<span class=3D"nx">Time</span> <span class=3D"s">`json:"birth_date,omitempt=
y"`</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">al=
ice</span> <span class=3D"o">:=3D</span> <span class=3D"nx">Person</span><s=
pan class=3D"p">{</span><span class=3D"nx">Name</span><span class=3D"p">:</=
span> <span class=3D"s">"Alice"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">b<=
/span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span class=
=3D"o">:=3D</span> <span class=3D"nx">json</span><span class=3D"p">.</span>=
<span class=3D"nf">Marshal</span><span class=3D"p">(</span><span class=3D"n=
x">alice</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"nb">string</span><span class=3D"p">(</span=
><span class=3D"nx">b</span><span class=3D"p">),</span> <span class=3D"nx">=
err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>To <code>omitzero</code>:</p><div class=3D"highlight"><=
pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go" data-lang=
=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span class=3D"line">=
<span class=3D"cl"><span class=3D"kd">type</span> <span class=3D"nx">Person=
</span> <span class=3D"kd">struct</span> <span class=3D"p">{</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">Name</span>      <span class=3D"kt">string</span>    <span class=3D"s">`j=
son:"name"`</span>
</span></span><span class=3D"line"><span class=3D"cl">    <span class=3D"nx=
">BirthDate</span> <span class=3D"nx">time</span><span class=3D"p">.</span>=
<span class=3D"nx">Time</span> <span class=3D"s">`json:"birth_date,omitzero=
"`</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">}</=
span>
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">al=
ice</span> <span class=3D"o">:=3D</span> <span class=3D"nx">Person</span><s=
pan class=3D"p">{</span><span class=3D"nx">Name</span><span class=3D"p">:</=
span> <span class=3D"s">"Alice"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">b<=
/span><span class=3D"p">,</span> <span class=3D"nx">err</span> <span class=
=3D"o">:=3D</span> <span class=3D"nx">json</span><span class=3D"p">.</span>=
<span class=3D"nf">Marshal</span><span class=3D"p">(</span><span class=3D"n=
x">alice</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"nb">string</span><span class=3D"p">(</span=
><span class=3D"nx">b</span><span class=3D"p">),</span> <span class=3D"nx">=
err</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>If the field type has an <code>IsZero() bool</code> met=
hod, it will determine whether the value is zero. Otherwise, the value is z=
ero if it is <a href=3D"https://go.dev/ref/spec#The_zero_value">the zero va=
lue for its type</a>.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/45=
669">45669</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/615676">615676</a></p=
><h2 id=3D"random-text">Random text</h2><p>The <a href=3D"https://tip.golan=
g.org/pkg/crypto/rand#Text"><code>crypto/rand.Text</code></a> function retu=
rns a cryptographically random string using the standard <a href=3D"https:/=
/www.rfc-editor.org/rfc/rfc4648.html">Base32</a> alphabet:</p><div class=3D=
"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language-go=
" data-lang=3D"go" contenteditable=3D"true" spellcheck=3D"false"><span clas=
s=3D"line"><span class=3D"cl"><span class=3D"nx">text</span> <span class=3D=
"o">:=3D</span> <span class=3D"nx">rand</span><span class=3D"p">.</span><sp=
an class=3D"nf">Text</span><span class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"nx">text</span><span class=3D"p">)</span>
</span></span></code></pre></div><codapi-snippet sandbox=3D"go:dev" editor=
=3D"basic" template=3D"main.go" output=3D"" state=3D"unknown">
<codapi-toolbar>
<button>Run</button>
<a href=3D"https://antonz.org/go-1-24/#edit">Edit</a>
<codapi-status></codapi-status>
</codapi-toolbar>

</codapi-snippet><p>The result contains at least 128 bits of randomness, en=
ough to prevent brute force guessing attacks and to make the likelihood of =
collisions vanishingly small.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/=
issue/67057">67057</a> =E2=80=A2
=F0=9D=97=96=F0=9D=97=9F <a href=3D"https://go.dev/cl/627477">627477</a></p=
><h2 id=3D"tool-dependencies">Tool dependencies</h2><p>Go modules can now t=
rack executable dependencies using <code>tool</code> directives in <code>go=
.mod</code>.</p><p>To add a tool dependency, use <code>go get -tool</code>:=
</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code cla=
ss=3D"language-sh" data-lang=3D"sh"><span class=3D"line"><span class=3D"cl"=
>go mod init sandbox
</span></span><span class=3D"line"><span class=3D"cl">go get -tool golang.o=
rg/x/tools/cmd/stringer
</span></span></code></pre></div><p>This adds a <code>tool</code> dependenc=
y with a <code>require</code> directive to the <code>go.mod</code>:</p><div=
 class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"la=
nguage-text" data-lang=3D"text"><span class=3D"line"><span class=3D"cl">mod=
ule sandbox
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">go 1.24rc1
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">tool golang.org/x/too=
ls/cmd/stringer
</span></span><span class=3D"line"><span class=3D"cl">
</span></span><span class=3D"line"><span class=3D"cl">require (
</span></span><span class=3D"line"><span class=3D"cl">    golang.org/x/mod =
v0.22.0 // indirect
</span></span><span class=3D"line"><span class=3D"cl">    golang.org/x/sync=
 v0.10.0 // indirect
</span></span><span class=3D"line"><span class=3D"cl">    golang.org/x/tool=
s v0.29.0 // indirect
</span></span><span class=3D"line"><span class=3D"cl">)
</span></span></code></pre></div><p>Tool dependencies remove the need for t=
he previous workaround of adding tools as blank imports to a file conventio=
nally named "tools.go". The <code>go tool</code> command can now run these =
tools in addition to tools shipped with the Go distribution:</p><div class=
=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"language=
-sh" data-lang=3D"sh"><span class=3D"line"><span class=3D"cl">go tool strin=
ger
</span></span></code></pre></div><p>Refer to the <a href=3D"https://go.dev/=
doc/modules/managing-dependencies#tools">documentation</a> for details.</p>=
<p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/48429">48429</a></p><h2 id=
=3D"json-output-for-build-install-and-test">JSON output for build, install =
and test</h2><p>The <code>go build</code>, <code>go install</code>, and <co=
de>go test</code> commands now accept a <code>-json</code> flag that report=
s build output and failures as structured JSON on standard output.</p><p>Fo=
r example, here is the <code>go test</code> output in default verbose mode:=
</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code cla=
ss=3D"language-sh" data-lang=3D"sh"><span class=3D"line"><span class=3D"cl"=
>go <span class=3D"nb">test</span> -v
</span></span></code></pre></div><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-text" data-lang=3D"text"><span =
class=3D"line"><span class=3D"cl">=3D=3D=3D RUN   TestSet_Add
</span></span><span class=3D"line"><span class=3D"cl">--- PASS: TestSet_Add=
 (0.00s)
</span></span><span class=3D"line"><span class=3D"cl">=3D=3D=3D RUN   TestS=
et_Contains
</span></span><span class=3D"line"><span class=3D"cl">--- PASS: TestSet_Con=
tains (0.00s)
</span></span><span class=3D"line"><span class=3D"cl">PASS
</span></span><span class=3D"line"><span class=3D"cl">ok      sandbox 0.934=
s
</span></span></code></pre></div><p>And here is the <code>go test</code> ou=
tput for the same program in JSON mode:</p><div class=3D"highlight"><pre ta=
bindex=3D"0" class=3D"chroma"><code class=3D"language-sh" data-lang=3D"sh">=
<span class=3D"line"><span class=3D"cl">go <span class=3D"nb">test</span> -=
json
</span></span></code></pre></div><div class=3D"highlight"><pre tabindex=3D"=
0" class=3D"chroma"><code class=3D"language-json" data-lang=3D"json"><span =
class=3D"line"><span class=3D"cl"><span class=3D"p">{</span><span class=3D"=
nt">"Time"</span><span class=3D"p">:</span><span class=3D"s2">"2025-01-11T1=
9:22:29.280091+05:00"</span><span class=3D"p">,</span><span class=3D"nt">"A=
ction"</span><span class=3D"p">:</span><span class=3D"s2">"start"</span><sp=
an class=3D"p">,</span><span class=3D"nt">"Package"</span><span class=3D"p"=
>:</span><span class=3D"s2">"sandbox"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671331+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"run"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</spa=
n><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span class=
=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><s=
pan class=3D"s2">"TestSet_Add"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671418+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</=
span><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span cla=
ss=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span>=
<span class=3D"s2">"TestSet_Add"</span><span class=3D"p">,</span><span clas=
s=3D"nt">"Output"</span><span class=3D"p">:</span><span class=3D"s2">"=3D=
=3D=3D RUN   TestSet_Add\n"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.67156+05:00"</span><span class=3D"p">,</span><=
span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"s=
2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</s=
pan><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span clas=
s=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><=
span class=3D"s2">"TestSet_Add"</span><span class=3D"p">,</span><span class=
=3D"nt">"Output"</span><span class=3D"p">:</span><span class=3D"s2">"--- PA=
SS: TestSet_Add (0.00s)\n"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671579+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"pass"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</sp=
an><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span class=
=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><s=
pan class=3D"s2">"TestSet_Add"</span><span class=3D"p">,</span><span class=
=3D"nt">"Elapsed"</span><span class=3D"p">:</span><span class=3D"mi">0</spa=
n><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671601+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"run"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</spa=
n><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span class=
=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><s=
pan class=3D"s2">"TestSet_Contains"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671608+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</=
span><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span cla=
ss=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span>=
<span class=3D"s2">"TestSet_Contains"</span><span class=3D"p">,</span><span=
 class=3D"nt">"Output"</span><span class=3D"p">:</span><span class=3D"s2">"=
=3D=3D=3D RUN   TestSet_Contains\n"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.67163+05:00"</span><span class=3D"p">,</span><=
span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"s=
2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</s=
pan><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span clas=
s=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><=
span class=3D"s2">"TestSet_Contains"</span><span class=3D"p">,</span><span =
class=3D"nt">"Output"</span><span class=3D"p">:</span><span class=3D"s2">"-=
-- PASS: TestSet_Contains (0.00s)\n"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671638+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"pass"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</sp=
an><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span class=
=3D"p">,</span><span class=3D"nt">"Test"</span><span class=3D"p">:</span><s=
pan class=3D"s2">"TestSet_Contains"</span><span class=3D"p">,</span><span c=
lass=3D"nt">"Elapsed"</span><span class=3D"p">:</span><span class=3D"mi">0<=
/span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.671645+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</=
span><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span cla=
ss=3D"p">,</span><span class=3D"nt">"Output"</span><span class=3D"p">:</spa=
n><span class=3D"s2">"PASS\n"</span><span class=3D"p">}</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.672058+05:00"</span><span class=3D"p">,</span>=
<span class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"=
s2">"output"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</=
span><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span cla=
ss=3D"p">,</span><span class=3D"nt">"Output"</span><span class=3D"p">:</spa=
n><span class=3D"s2">"ok  \tsandbox\t0.392s\n"</span><span class=3D"p">}</s=
pan>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"p">{</=
span><span class=3D"nt">"Time"</span><span class=3D"p">:</span><span class=
=3D"s2">"2025-01-11T19:22:29.6721+05:00"</span><span class=3D"p">,</span><s=
pan class=3D"nt">"Action"</span><span class=3D"p">:</span><span class=3D"s2=
">"pass"</span><span class=3D"p">,</span><span class=3D"nt">"Package"</span=
><span class=3D"p">:</span><span class=3D"s2">"sandbox"</span><span class=
=3D"p">,</span><span class=3D"nt">"Elapsed"</span><span class=3D"p">:</span=
><span class=3D"mf">0.392</span><span class=3D"p">}</span>
</span></span></code></pre></div><p>There may also be non-JSON error text o=
n standard error, even with the <code>-json</code> flag. Typically, this in=
dicates an early, serious error.</p><p>For details of the JSON format, see =
<code>go help buildjson</code>.</p><p>=F0=9D=97=A3 <a href=3D"https://go.de=
v/issue/62067">62067</a></p><h2 id=3D"main-modules-version">Main module's v=
ersion</h2><p>The <code>go build</code> command now sets the main module's =
version (<code>BuildInfo.Main.Version</code>) in the compiled binary based =
on the version control system tag or commit. A <code>+dirty</code> suffix i=
s added if there are uncommitted changes.</p><p>Here's a program that print=
s the version:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chr=
oma"><code class=3D"language-go" data-lang=3D"go"><span class=3D"line"><spa=
n class=3D"cl"><span class=3D"c1">// get build information embedded in the =
running binary
</span></span></span><span class=3D"line"><span class=3D"cl"><span class=3D=
"c1"></span><span class=3D"nx">info</span><span class=3D"p">,</span> <span =
class=3D"nx">_</span> <span class=3D"o">:=3D</span> <span class=3D"nx">debu=
g</span><span class=3D"p">.</span><span class=3D"nf">ReadBuildInfo</span><s=
pan class=3D"p">()</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"s">"Go version:"</span><span class=3D"p">,=
</span> <span class=3D"nx">info</span><span class=3D"p">.</span><span class=
=3D"nx">GoVersion</span><span class=3D"p">)</span>
</span></span><span class=3D"line"><span class=3D"cl"><span class=3D"nx">fm=
t</span><span class=3D"p">.</span><span class=3D"nf">Println</span><span cl=
ass=3D"p">(</span><span class=3D"s">"App version:"</span><span class=3D"p">=
,</span> <span class=3D"nx">info</span><span class=3D"p">.</span><span clas=
s=3D"nx">Main</span><span class=3D"p">.</span><span class=3D"nx">Version</s=
pan><span class=3D"p">)</span>
</span></span></code></pre></div><p>Here's the output for Go 1.23:</p><div =
class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lan=
guage-text" data-lang=3D"text"><span class=3D"line"><span class=3D"cl">Go v=
ersion: go1.23.4
</span></span><span class=3D"line"><span class=3D"cl">App version: (devel)
</span></span></code></pre></div><p>Here's the output for Go 1.24:</p><div =
class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lan=
guage-text" data-lang=3D"text"><span class=3D"line"><span class=3D"cl">Go v=
ersion: go1.24rc1
</span></span><span class=3D"line"><span class=3D"cl">App version: v0.0.0-2=
0250111143208-a7857c757b85+dirty
</span></span></code></pre></div><p>When the current commit matches a tagge=
d version, the value is set to <code>v&lt;tag&gt;[+dirty]</code>:</p><div c=
lass=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code class=3D"lang=
uage-text" data-lang=3D"text"><span class=3D"line"><span class=3D"cl">v1.2.=
4
</span></span><span class=3D"line"><span class=3D"cl">v1.2.4+dirty
</span></span></code></pre></div><p>When the current commit doesn't match a=
 tagged version, the value is set to <code>&lt;pseudo&gt;[+dirty]</code>, w=
here <code>pseudo</code> consists of the latest tag, current date, and comm=
it:</p><div class=3D"highlight"><pre tabindex=3D"0" class=3D"chroma"><code =
class=3D"language-text" data-lang=3D"text"><span class=3D"line"><span class=
=3D"cl">v1.2.3-0.20240620130020-daa7c0413123
</span></span><span class=3D"line"><span class=3D"cl">v1.2.3-0.202406201300=
20-daa7c0413123+dirty
</span></span></code></pre></div><p>When no VCS information is available, t=
he value is set to <code>(devel)</code> (as in Go 1.23).</p><p>Use the <cod=
e>-buildvcs=3Dfalse</code> flag to omit version control information from th=
e binary.</p><p>=F0=9D=97=A3 <a href=3D"https://go.dev/issue/50603">50603</=
a></p><h2 id=3D"summary">Summary</h2><p>Go 1.24 introduces many new feature=
s, including weak pointers, finalizers, and directory-scoped filesystem acc=
ess. A lot of effort has gone into implementing faster maps, which is a ver=
y welcome change. Also, the Go team clearly prioritizes the developer exper=
ience, offering easier and safer ways to write benchmarks, test concurrent =
code, and use custom tools. And of course, cryptographic improvements like =
SHA-3 and random text generation are a nice touch.</p><p>All in all, a grea=
t release!</p><p>=E2=94=80=E2=94=80</p><p>P.S. To catch up on other Go rele=
ases, check out the <a href=3D"https://antonz.org/which-go/">Go features by=
 version</a> list or explore the interactive tours for Go <a href=3D"https:=
//antonz.org/go-1-23/">1.23</a> and <a href=3D"https://antonz.org/go-1-22/"=
>1.22</a>.</p><p>P.P.S. Interactive examples in this post are powered by <a=
 href=3D"https://codapi.org/">codapi</a> =E2=80=94 an open source tool I'm =
building. Use it to embed live code snippets into your product docs, online=
 course or blog.</p><p><a href=3D"https://antonz.org/subscribe/">=E2=98=85&=
nbsp;Subscribe</a> to keep up with new posts.</p></div></div><footer class=
=3D"post__footer"><div class=3D"row"><div class=3D"col-xs-12"><div class=3D=
"post__date"><time datetime=3D"2025-01-13 10:00:00 +0000 UTC">13 Jan, 2025<=
/time></div><div class=3D"post__tags"><a href=3D"https://antonz.org/tags/th=
ank-go/">thank-go</a>&nbsp;</div></div></div></footer></article><aside clas=
s=3D"post__related"><div class=3D"post__nav article"><div class=3D"row"><di=
v class=3D"col-xs-12 col-sm-6"><p>=E2=86=90&nbsp;<a href=3D"https://antonz.=
org/til/">TILs are junk food</a></p></div><div class=3D"col-xs-12 col-sm-6"=
><p><a href=3D"https://antonz.org/go-map-shrink/">Go's map does not shrink<=
/a>&nbsp;=E2=86=92</p></div></div></div><div class=3D"article"><div class=
=3D"row"><div class=3D"col-xs-12 col-sm-8 col-md-6"><h3>See also</h3><p><a =
href=3D"https://antonz.org/go-concurrency/context/">Gist of Go: Context</a>=
</p><p><a href=3D"https://antonz.org/go-concurrency/time/">Gist of Go: Time=
</a></p><p><a href=3D"https://antonz.org/go-concurrency/pipelines/">Gist of=
 Go: Pipelines</a></p></div></div></div></aside></div></div><footer class=
=3D"container footer"><ul class=3D"naked-list"><li class=3D"footer__item">S=
ubscribe:
<a href=3D"https://buttondown.email/antonz" class=3D"footer__social-link"><=
i class=3D"fas fa-envelope"></i><span>Newsletter</span>
</a><a href=3D"https://twitter.com/ohmypy" class=3D"footer__social-link"><i=
 class=3D"fab fa-twitter-1"></i><span>Twitter</span>
</a><a href=3D"https://c.im/@antonz" class=3D"footer__social-link"><svg cla=
ss=3D"icon" viewBox=3D"0 0 16 16" role=3D"img"><path fill=3D"currentcolor" =
d=3D"M11.19 12.195c2.016-.24 3.77-1.475 3.99-2.603.348-1.778.32-4.339.32-4.=
339.0-3.47-2.286-4.488-2.286-4.488C12.062.238 10.083.017 8.027.0h-.05C5.92.=
017 3.942.238 2.79.765c0 0-2.285 1.017-2.285 4.488l-.002.662c-.004.64-.007 =
1.35.011 2.091.083 3.394.626 6.74 3.78 7.57 1.454.383 2.703.463 3.709.408 1=
.823-.1 2.847-.647 2.847-.647l-.06-1.317s-1.303.41-2.767.36c-1.45-.05-2.98-=
.156-3.215-1.928a3.614 3.614.0 01-.033-.496s1.424.346 3.228.428c1.103.05 2.=
137-.064 3.188-.189zm1.613-2.47H11.13v-4.08c0-.859-.364-1.295-1.091-1.295-.=
804.0-1.207.517-1.207 1.541v2.233H7.168V5.89c0-1.024-.403-1.541-1.207-1.541=
-.727.0-1.091.436-1.091 1.296v4.079H3.197V5.522c0-.859.22-1.541.66-2.046.45=
6-.505 1.052-.764 1.793-.764.856.0 1.504.328 1.933.983L8 4.39l.417-.695c.42=
9-.655 1.077-.983 1.934-.983.74.0 1.336.259 1.791.764.442.505.661 1.187.661=
 2.046v4.203z"></path></svg>
</a><a href=3D"https://www.linkedin.com/in/nalgeon/" class=3D"footer__socia=
l-link"><i class=3D"fab fa-linkedin-2"></i><span>LinkedIn</span>
</a><a href=3D"https://github.com/nalgeon" class=3D"footer__social-link"><i=
 class=3D"fab fa-github-1"></i><span>GitHub</span>
</a><a href=3D"https://antonz.org/index.xml" class=3D"footer__social-link">=
<i class=3D"fas fa-rss"></i><span>RSS</span></a></li><li class=3D"footer__i=
tem">Email: <a href=3D"mailto:m@antonz.org">m@antonz.org</a></li></ul></foo=
ter></body></html>
------MultipartBoundary--vrhnCtQJUSNQ4IdEPuHR3LN8o1BDbqwaKu6ApG8vl5----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://antonz.org/assets/css/style.ab5b07a3b8460dd96d9aa8eef3fcde58195fdd8aeae66b56e0428d9bc3c4a9f6.css

@charset "utf-8";

html { line-height: 1.15; text-size-adjust: 100%; }

body { margin: 0px; }

hr { height: 0px; color: inherit; }

abbr[title] { text-decoration: underline dotted; }

b, strong { font-weight: bolder; }

small { font-size: 80%; }

sub, sup { font-size: 60%; line-height: 0; position: relative; }

table { text-indent: 0px; border-color: inherit; }

button, input, optgroup, select, textarea { font-family: inherit; font-size=
: 100%; line-height: 1.15; margin: 0px; }

button, select { text-transform: none; }

button, [type=3D"button"], [type=3D"reset"], [type=3D"submit"] { appearance=
: button; }

legend { padding: 0px; }

progress { vertical-align: baseline; }

::-webkit-inner-spin-button, ::-webkit-outer-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

summary { display: list-item; }

.container-fluid { margin-right: auto; margin-left: auto; padding-right: 2r=
em; padding-left: 2rem; }

.row { box-sizing: border-box; display: flex; flex: 0 1 auto; flex-flow: wr=
ap; margin-right: -0.5rem; margin-left: -0.5rem; }

.row.reverse { flex-direction: row-reverse; }

.col.reverse { flex-direction: column-reverse; }

.col-xs, .col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, =
.col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12, .col-x=
s-offset-1, .col-xs-offset-2, .col-xs-offset-3, .col-xs-offset-4, .col-xs-o=
ffset-5, .col-xs-offset-6, .col-xs-offset-7, .col-xs-offset-8, .col-xs-offs=
et-9, .col-xs-offset-10, .col-xs-offset-11, .col-xs-offset-12 { box-sizing:=
 border-box; flex: 0 0 auto; padding-right: 0.5rem; padding-left: 0.5rem; }

.col-xs { flex-grow: 1; flex-basis: 0px; max-width: 100%; }

.col-xs-1 { flex-basis: 8.333%; max-width: 8.333%; }

.col-xs-2 { flex-basis: 16.667%; max-width: 16.667%; }

.col-xs-3 { flex-basis: 25%; max-width: 25%; }

.col-xs-4 { flex-basis: 33.333%; max-width: 33.333%; }

.col-xs-5 { flex-basis: 41.667%; max-width: 41.667%; }

.col-xs-6 { flex-basis: 50%; max-width: 50%; }

.col-xs-7 { flex-basis: 58.333%; max-width: 58.333%; }

.col-xs-8 { flex-basis: 66.667%; max-width: 66.667%; }

.col-xs-9 { flex-basis: 75%; max-width: 75%; }

.col-xs-10 { flex-basis: 83.333%; max-width: 83.333%; }

.col-xs-11 { flex-basis: 91.667%; max-width: 91.667%; }

.col-xs-12 { flex-basis: 100%; max-width: 100%; }

.col-xs-offset-1 { margin-left: 8.333%; }

.col-xs-offset-2 { margin-left: 16.667%; }

.col-xs-offset-3 { margin-left: 25%; }

.col-xs-offset-4 { margin-left: 33.333%; }

.col-xs-offset-5 { margin-left: 41.667%; }

.col-xs-offset-6 { margin-left: 50%; }

.col-xs-offset-7 { margin-left: 58.333%; }

.col-xs-offset-8 { margin-left: 66.667%; }

.col-xs-offset-9 { margin-left: 75%; }

.col-xs-offset-10 { margin-left: 83.333%; }

.col-xs-offset-11 { margin-left: 91.667%; }

.start-xs { justify-content: flex-start; text-align: start; }

.center-xs { justify-content: center; text-align: center; }

.end-xs { justify-content: flex-end; text-align: end; }

.top-xs { align-items: flex-start; }

.middle-xs { align-items: center; }

.bottom-xs { align-items: flex-end; }

.around-xs { justify-content: space-around; }

.between-xs { justify-content: space-between; }

.first-xs { order: -1; }

.last-xs { order: 1; }

@media only screen and (min-width: 48em) {
  .container { width: 46rem; }
  .col-sm, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6=
, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col=
-sm-offset-1, .col-sm-offset-2, .col-sm-offset-3, .col-sm-offset-4, .col-sm=
-offset-5, .col-sm-offset-6, .col-sm-offset-7, .col-sm-offset-8, .col-sm-of=
fset-9, .col-sm-offset-10, .col-sm-offset-11, .col-sm-offset-12 { box-sizin=
g: border-box; flex: 0 0 auto; padding-right: 0.5rem; padding-left: 0.5rem;=
 }
  .col-sm { flex-grow: 1; flex-basis: 0px; max-width: 100%; }
  .col-sm-1 { flex-basis: 8.333%; max-width: 8.333%; }
  .col-sm-2 { flex-basis: 16.667%; max-width: 16.667%; }
  .col-sm-3 { flex-basis: 25%; max-width: 25%; }
  .col-sm-4 { flex-basis: 33.333%; max-width: 33.333%; }
  .col-sm-5 { flex-basis: 41.667%; max-width: 41.667%; }
  .col-sm-6 { flex-basis: 50%; max-width: 50%; }
  .col-sm-7 { flex-basis: 58.333%; max-width: 58.333%; }
  .col-sm-8 { flex-basis: 66.667%; max-width: 66.667%; }
  .col-sm-9 { flex-basis: 75%; max-width: 75%; }
  .col-sm-10 { flex-basis: 83.333%; max-width: 83.333%; }
  .col-sm-11 { flex-basis: 91.667%; max-width: 91.667%; }
  .col-sm-12 { flex-basis: 100%; max-width: 100%; }
  .col-sm-offset-0 { margin-left: 0px; }
  .col-sm-offset-1 { margin-left: 8.333%; }
  .col-sm-offset-2 { margin-left: 16.667%; }
  .col-sm-offset-3 { margin-left: 25%; }
  .col-sm-offset-4 { margin-left: 33.333%; }
  .col-sm-offset-5 { margin-left: 41.667%; }
  .col-sm-offset-6 { margin-left: 50%; }
  .col-sm-offset-7 { margin-left: 58.333%; }
  .col-sm-offset-8 { margin-left: 66.667%; }
  .col-sm-offset-9 { margin-left: 75%; }
  .col-sm-offset-10 { margin-left: 83.333%; }
  .col-sm-offset-11 { margin-left: 91.667%; }
  .start-sm { justify-content: flex-start; text-align: start; }
  .center-sm { justify-content: center; text-align: center; }
  .end-sm { justify-content: flex-end; text-align: end; }
  .top-sm { align-items: flex-start; }
  .middle-sm { align-items: center; }
  .bottom-sm { align-items: flex-end; }
  .around-sm { justify-content: space-around; }
  .between-sm { justify-content: space-between; }
  .first-sm { order: -1; }
  .last-sm { order: 1; }
}

@media only screen and (min-width: 62em) {
  .container { width: 61rem; }
  .col-md, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6=
, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col=
-md-offset-1, .col-md-offset-2, .col-md-offset-3, .col-md-offset-4, .col-md=
-offset-5, .col-md-offset-6, .col-md-offset-7, .col-md-offset-8, .col-md-of=
fset-9, .col-md-offset-10, .col-md-offset-11, .col-md-offset-12 { box-sizin=
g: border-box; flex: 0 0 auto; padding-right: 0.5rem; padding-left: 0.5rem;=
 }
  .col-md { flex-grow: 1; flex-basis: 0px; max-width: 100%; }
  .col-md-1 { flex-basis: 8.333%; max-width: 8.333%; }
  .col-md-2 { flex-basis: 16.667%; max-width: 16.667%; }
  .col-md-3 { flex-basis: 25%; max-width: 25%; }
  .col-md-4 { flex-basis: 33.333%; max-width: 33.333%; }
  .col-md-5 { flex-basis: 41.667%; max-width: 41.667%; }
  .col-md-6 { flex-basis: 50%; max-width: 50%; }
  .col-md-7 { flex-basis: 58.333%; max-width: 58.333%; }
  .col-md-8 { flex-basis: 66.667%; max-width: 66.667%; }
  .col-md-9 { flex-basis: 75%; max-width: 75%; }
  .col-md-10 { flex-basis: 83.333%; max-width: 83.333%; }
  .col-md-11 { flex-basis: 91.667%; max-width: 91.667%; }
  .col-md-12 { flex-basis: 100%; max-width: 100%; }
  .col-md-offset-1 { margin-left: 8.333%; }
  .col-md-offset-2 { margin-left: 16.667%; }
  .col-md-offset-3 { margin-left: 25%; }
  .col-md-offset-4 { margin-left: 33.333%; }
  .col-md-offset-5 { margin-left: 41.667%; }
  .col-md-offset-6 { margin-left: 50%; }
  .col-md-offset-7 { margin-left: 58.333%; }
  .col-md-offset-8 { margin-left: 66.667%; }
  .col-md-offset-9 { margin-left: 75%; }
  .col-md-offset-10 { margin-left: 83.333%; }
  .col-md-offset-11 { margin-left: 91.667%; }
  .start-md { justify-content: flex-start; text-align: start; }
  .center-md { justify-content: center; text-align: center; }
  .end-md { justify-content: flex-end; text-align: end; }
  .top-md { align-items: flex-start; }
  .middle-md { align-items: center; }
  .bottom-md { align-items: flex-end; }
  .around-md { justify-content: space-around; }
  .between-md { justify-content: space-between; }
  .first-md { order: -1; }
  .last-md { order: 1; }
}

@media only screen and (min-width: 75em) {
  .container { width: 71rem; }
  .col-lg, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6=
, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col=
-lg-offset-1, .col-lg-offset-2, .col-lg-offset-3, .col-lg-offset-4, .col-lg=
-offset-5, .col-lg-offset-6, .col-lg-offset-7, .col-lg-offset-8, .col-lg-of=
fset-9, .col-lg-offset-10, .col-lg-offset-11, .col-lg-offset-12 { box-sizin=
g: border-box; flex: 0 0 auto; padding-right: 0.5rem; padding-left: 0.5rem;=
 }
  .col-lg { flex-grow: 1; flex-basis: 0px; max-width: 100%; }
  .col-lg-1 { flex-basis: 8.333%; max-width: 8.333%; }
  .col-lg-2 { flex-basis: 16.667%; max-width: 16.667%; }
  .col-lg-3 { flex-basis: 25%; max-width: 25%; }
  .col-lg-4 { flex-basis: 33.333%; max-width: 33.333%; }
  .col-lg-5 { flex-basis: 41.667%; max-width: 41.667%; }
  .col-lg-6 { flex-basis: 50%; max-width: 50%; }
  .col-lg-7 { flex-basis: 58.333%; max-width: 58.333%; }
  .col-lg-8 { flex-basis: 66.667%; max-width: 66.667%; }
  .col-lg-9 { flex-basis: 75%; max-width: 75%; }
  .col-lg-10 { flex-basis: 83.333%; max-width: 83.333%; }
  .col-lg-11 { flex-basis: 91.667%; max-width: 91.667%; }
  .col-lg-12 { flex-basis: 100%; max-width: 100%; }
  .col-lg-offset-1 { margin-left: 8.333%; }
  .col-lg-offset-2 { margin-left: 16.667%; }
  .col-lg-offset-3 { margin-left: 25%; }
  .col-lg-offset-4 { margin-left: 33.333%; }
  .col-lg-offset-5 { margin-left: 41.667%; }
  .col-lg-offset-6 { margin-left: 50%; }
  .col-lg-offset-7 { margin-left: 58.333%; }
  .col-lg-offset-8 { margin-left: 66.667%; }
  .col-lg-offset-9 { margin-left: 75%; }
  .col-lg-offset-10 { margin-left: 83.333%; }
  .col-lg-offset-11 { margin-left: 91.667%; }
  .start-lg { justify-content: flex-start; text-align: start; }
  .center-lg { justify-content: center; text-align: center; }
  .end-lg { justify-content: flex-end; text-align: end; }
  .top-lg { align-items: flex-start; }
  .middle-lg { align-items: center; }
  .bottom-lg { align-items: flex-end; }
  .around-lg { justify-content: space-around; }
  .between-lg { justify-content: space-between; }
  .first-lg { order: -1; }
  .last-lg { order: 1; }
}

:root { --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Helveti=
ca, Arial,
        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol=
"; --font-serif: "PT Serif", Georgia, serif; --font-monospace: ui-monospace=
, "SFMono-Regular", "SF Mono", Menlo, Consolas,
        "Liberation Mono", monospace; --color-text: #000; --color-blue: #00=
8bf5; --color-gray: #555; --color-red: #ed7647; --color-yellow: #fdd000; --=
color-pre: #f5f5f5; --color-box: #eaeaea; --color-bg: #fff; --color-code-ke=
yword: #a90d91; --color-code-type: #a90d91; --color-code-string: #c41a16; -=
-color-code-comment: #177500; --font-size-large: 1.2rem; --font-size-x-larg=
e: 1.2rem; }

html { box-sizing: border-box; }

*, ::before, ::after { box-sizing: inherit; }

[hidden] { display: none !important; }

body { color: var(--color-text); font-size: 16px; font-family: var(--font-s=
ans); font-weight: normal; line-height: 1.35; background: var(--color-bg); =
-webkit-font-smoothing: antialiased; }

h1, h2, h3 { font-weight: normal; }

h1, h2 { line-height: 1; }

.container { padding-left: 1em; padding-right: 1em; width: 100%; }

@media only screen and (min-width: 48em) {
  .container { padding-left: 3em; padding-right: 3em; }
}

@media only screen and (min-width: 62em) {
  .container { max-width: 960px; margin-left: auto; margin-right: auto; pad=
ding-left: 0px; padding-right: 0px; }
}

a { color: var(--color-blue); border-bottom: 1px solid rgba(0, 139, 245, 0.=
2); text-decoration: none; }

a:active, a:hover, a:visited:active, a:visited:hover { color: rgb(92, 184, =
255); border-bottom-color: rgba(92, 184, 255, 0.2); }

a:visited { color: rgb(85, 26, 139); border-bottom-color: rgba(85, 26, 139,=
 0.2); }

a[href^=3D"#"] { border-bottom-style: dashed; }

a.link--black { color: var(--color-text); border-bottom-color: var(--color-=
text); }

blockquote { margin: 0px; padding: 0px; }

code, pre { font-family: var(--font-monospace); }

pre { margin: 0px 0px 0.8em; background: var(--color-pre); overflow-x: auto=
; white-space: pre; line-height: 1.2; tab-size: 4; }

pre > code { display: block; padding: 1.5em; font-size: 80%; }

p > code, li > code, td > code, p > a > code, li > a > code { background: v=
ar(--color-pre); font-size: 80%; padding: 0.125em 0.25em; }

p { margin: 0px 0px 0.8em; }

p:last-child { margin-bottom: 0px; }

img { display: block; height: auto; max-width: 100%; width: auto; }

video { display: block; height: auto; max-width: 100%; width: auto; margin-=
bottom: 0.8em; }

abbr::after { display: inline-block; margin-left: 0.25em; margin-right: 0.2=
5em; vertical-align: text-bottom; font-size: 80%; content: "=E2=93=98"; }

details { margin-bottom: 0.8em; }

details summary { color: var(--color-blue); cursor: pointer; }

details summary.summary-ai::marker { content: "=F0=9F=A4=96 "; }

form input[type=3D"email"], form input[type=3D"password"], form input[type=
=3D"search"], form input[type=3D"text"], form input[type=3D"url"], form sel=
ect, form textarea { border-radius: 0.125em; border: solid 1px var(--color-=
gray); background-color: var(--color-bg); color: var(--color-text); cursor:=
 text; display: block; padding: 0.5em; appearance: none; }

form input.error, form select.error, form textarea.error { border-color: va=
r(--color-red); }

.button, button, input[type=3D"button"], input[type=3D"reset"], input[type=
=3D"submit"] { background: var(--color-blue); border: 0px; border-radius: 0=
.125em; color: var(--color-bg); cursor: pointer; display: inline-block; ver=
tical-align: middle; outline: 0px; overflow: hidden; padding: 0.5em 1em; po=
sition: relative; text-decoration: none; text-align: center; appearance: no=
ne; }

.button:hover, button:hover, input[type=3D"button"]:hover, input[type=3D"re=
set"]:hover, input[type=3D"submit"]:hover { background-color: rgb(0, 123, 2=
21); border-bottom: none; color: var(--color-bg); }

.button:visited, .button:visited:hover { border-bottom: none; color: var(--=
color-bg); }

button:disabled, input[type=3D"button"]:disabled, input[type=3D"reset"]:dis=
abled, input[type=3D"submit"]:disabled { opacity: 0.4; pointer-events: none=
; cursor: default; }

.button--black { background: var(--color-text); }

abbr[title] { text-decoration: none; }

mark { background: var(--color-yellow); padding: 0px 0.25em; }

@media (prefers-color-scheme: dark) {
  :root { --color-text: #fff; --color-blue: #008bf5; --color-gray: #6c7986;=
 --color-red: #ff8a65; --color-yellow: #ffdf80; --color-pre: #151b23; --col=
or-box: #1e242b; --color-bg: #000; --color-code-keyword: #fc5fa3; --color-c=
ode-type: #fc5fa3; --color-code-string: #fc6a5d; --color-code-comment: #6c7=
986; }
  a { border-bottom: 1px solid var(--color-blue); }
  a:active, a:hover, a:visited:active, a:visited:hover { border-bottom: non=
e; }
  a:visited { color: var(--color-blue); border-bottom: 1px solid var(--colo=
r-blue); }
  img { opacity: 0.75; transition: opacity 0.3s ease-in-out 0s; }
  img:hover { opacity: 1; }
}

.hljs-keyword { color: var(--color-code-keyword); }

.hljs-type { color: var(--color-code-type); }

.hljs-string { color: var(--color-code-string); }

.hljs-comment { color: var(--color-code-comment); }

.bg { background-color: var(--color-pre); }

.chroma { background-color: var(--color-pre); }

.chroma .x { }

.chroma .err { color: var(--color-text); }

.chroma .cl { }

.chroma .lnlinks { outline: none; text-decoration: none; color: inherit; }

.chroma .lntd { vertical-align: top; padding: 0px; margin: 0px; border: 0px=
; }

.chroma .lntable { border-spacing: 0px; padding: 0px; margin: 0px; border: =
0px; }

.chroma .hl { background-color: var(--color-pre); }

.chroma .lnt { white-space: pre; user-select: none; margin-right: 0.4em; pa=
dding: 0px 0.4em; color: var(--color-code-comment); }

.chroma .ln { white-space: pre; user-select: none; margin-right: 0.4em; pad=
ding: 0px 0.4em; color: var(--color-code-comment); }

.chroma .line { display: flex; }

.chroma .k { color: var(--color-code-keyword); }

.chroma .kc { color: var(--color-code-keyword); }

.chroma .kd { color: var(--color-code-keyword); }

.chroma .kn { color: var(--color-code-keyword); }

.chroma .kp { color: var(--color-code-keyword); }

.chroma .kr { color: var(--color-code-keyword); }

.chroma .kt { color: var(--color-code-keyword); }

.chroma .n { color: var(--color-text); }

.chroma .na { color: var(--color-code-keyword); }

.chroma .nb { color: var(--color-code-keyword); }

.chroma .bp { color: var(--color-code-keyword); }

.chroma .nc { color: var(--color-code-keyword); }

.chroma .no { color: var(--color-text); }

.chroma .nd { color: var(--color-text); }

.chroma .ni { color: var(--color-text); }

.chroma .ne { color: var(--color-text); }

.chroma .nf { color: var(--color-text); }

.chroma .fm { color: var(--color-text); }

.chroma .nl { color: var(--color-text); }

.chroma .nn { color: var(--color-text); }

.chroma .nx { color: var(--color-text); }

.chroma .py { color: var(--color-text); }

.chroma .nt { color: var(--color-text); }

.chroma .nv { color: var(--color-text); }

.chroma .vc { color: var(--color-text); }

.chroma .vg { color: var(--color-text); }

.chroma .vi { color: var(--color-text); }

.chroma .vm { color: var(--color-text); }

.chroma .l { color: var(--color-code-string); }

.chroma .ld { color: var(--color-code-string); }

.chroma .s { color: var(--color-code-string); }

.chroma .sa { color: var(--color-code-string); }

.chroma .sb { color: var(--color-code-string); }

.chroma .sc { color: var(--color-code-string); }

.chroma .dl { color: var(--color-code-string); }

.chroma .sd { color: var(--color-code-string); }

.chroma .s2 { color: var(--color-code-string); }

.chroma .se { color: var(--color-code-string); }

.chroma .sh { color: var(--color-code-string); }

.chroma .si { color: var(--color-code-string); }

.chroma .sx { color: var(--color-code-string); }

.chroma .sr { color: var(--color-code-string); }

.chroma .s1 { color: var(--color-code-string); }

.chroma .ss { color: var(--color-code-string); }

.chroma .m { color: var(--color-code-string); }

.chroma .mb { color: var(--color-code-string); }

.chroma .mf { color: var(--color-code-string); }

.chroma .mh { color: var(--color-code-string); }

.chroma .mi { color: var(--color-code-string); }

.chroma .il { color: var(--color-code-string); }

.chroma .mo { color: var(--color-code-string); }

.chroma .o { color: var(--color-text); }

.chroma .ow { color: var(--color-text); }

.chroma .p { }

.chroma .c { color: var(--color-code-comment); }

.chroma .ch { color: var(--color-code-comment); }

.chroma .cm { color: var(--color-code-comment); }

.chroma .c1 { color: var(--color-code-comment); }

.chroma .cs { color: var(--color-code-comment); }

.chroma .cp { color: var(--color-code-string); }

.chroma .cpf { color: var(--color-code-string); }

.chroma .g { }

.chroma .gd { }

.chroma .ge { }

.chroma .gr { }

.chroma .gh { }

.chroma .gi { }

.chroma .go { }

.chroma .gp { }

.chroma .gs { }

.chroma .gu { }

.chroma .gt { }

.chroma .gl { }

.chroma .w { }

@font-face { font-family: fa-brands; font-style: normal; font-weight: 400; =
font-display: block; src: url("../fonts/fa-brands-400.woff2") format("woff2=
"); }

@font-face { font-family: "Font Awesome"; font-style: normal; font-weight: =
400; font-display: block; src: url("../fonts/fa-regular-400.woff2") format(=
"woff2"); }

@font-face { font-family: "Font Awesome"; font-style: normal; font-weight: =
900; font-display: block; src: url("../fonts/fa-solid-900.woff2") format("w=
off2"); }

.fa, .fab, .far, .fas { -webkit-font-smoothing: antialiased; display: inlin=
e-block; font-style: normal; font-variant: normal; text-rendering: auto; li=
ne-height: 1; }

.fab { font-family: fa-brands; font-weight: 400; }

.far { font-family: "Font Awesome"; font-weight: 400; }

.fas { font-family: "Font Awesome"; font-weight: 900; }

.fa-arrow-alt-circle-down::before { content: "=EF=8D=98"; }

.fa-book::before { content: "=EF=80=AD"; }

.fa-chalkboard-teacher::before { content: "=EF=94=9C"; }

.fa-cloud::before { content: "=EF=83=82"; }

.fa-code::before { content: "=EF=84=A1"; }

.fa-cube::before { content: "=EF=86=B2"; }

.fa-database::before { content: "=EF=87=80"; }

.fa-dot-circle::before { content: "=EF=86=92"; }

.fa-envelope::before { content: "=EF=83=A0"; }

.fa-file::before { content: "=EF=85=9B"; }

.fa-kiwi-bird::before { content: "=EF=94=B5"; }

.fa-microphone::before { content: "=EF=84=B0"; }

.fa-play::before { content: "=EF=85=84"; }

.fa-robot::before { content: "=EF=95=84"; }

.fa-rss::before { content: "=EF=82=9E"; }

.fa-star::before { content: "=EF=80=85"; }

.fa-telegram-plane::before { content: "=EF=8F=BE"; }

.fa-terminal::before { content: "=EF=84=A0"; }

.fa-user::before { content: "=EF=80=87"; }

.fa-discord::before { content: "=EE=A0=80"; }

.fa-facebook-1::before { content: "=EE=A0=81"; }

.fa-facebook-2::before { content: "=EE=A0=82"; }

.fa-facebook-3::before { content: "=EE=A0=83"; }

.fa-github-1::before { content: "=EE=A0=84"; }

.fa-github-2::before { content: "=EE=A0=85"; }

.fa-github-3::before { content: "=EE=A0=86"; }

.fa-instagram::before { content: "=EE=A0=87"; }

.fa-linkedin-1::before { content: "=EE=A0=88"; }

.fa-linkedin-2::before { content: "=EE=A0=8A"; }

.fa-telegram::before { content: "=EE=A0=89"; }

.fa-twitter-1::before { content: "=EE=A0=8B"; }

.fa-twitter-2::before { content: "=EE=A0=8C"; }

.fa-youtube::before { content: "=EE=A0=8D"; }

.icon { display: inline-block; vertical-align: middle; width: 1em; height: =
auto; }

.icon--rounded { border-radius: 50%; }

body { display: flex; flex-direction: column; min-height: 100vh; }

.storey { padding-top: 4em; padding-bottom: 4em; }

.storey--notop { padding-top: 0px; }

.storey__header { font-size: 1.5em; font-weight: 700; margin: 0px 0px 0.75e=
m; }

.flex { display: flex; }

.article { font-size: 1.1rem; }

@media only screen and (min-width: 48em) {
  .article { font-size: var(--font-size-large); }
}

@media only screen and (min-width: 62em) {
  .article { font-size: 1.35rem; }
  pre { font-size: var(--font-size-large); }
}

.article h1 { font-size: 1.8em; font-weight: 700; margin: 0px 0px 0.5em; }

.article h2 { font-size: 1.4em; font-weight: 600; line-height: 1.35; margin=
: 1em 0px 0.5em; }

.article h2:first-child { margin-top: 0px; }

.article h2 .anchor { visibility: hidden; position: absolute; margin-left: =
-1em; width: 1em; cursor: pointer; border-bottom: none; }

.article h3 { font-size: 1em; font-weight: 600; margin: 1em 0px 0.5em; }

.article h3:first-child { margin-top: 0px; }

.article ul, .article ol { padding-left: 2.5em; padding-right: 2.5em; margi=
n: 0px 0px 0.8em; }

.article ul li { list-style: none; }

.article ol li { list-style: outside decimal; }

.article li { margin: 0px 0px 0.4em; }

.article figure { margin: 0px 0px 0.8em; }

.article figcaption, .article .figcaption { color: var(--color-gray); font-=
size: 90%; margin-top: 0.2em; }

.article figcaption a, .article .figcaption a { color: var(--color-gray); b=
order-color: var(--color-gray); }

.article blockquote { border-left: 0.3em solid var(--color-gray); color: va=
r(--color-gray); margin-bottom: 0.8em; padding: 0px 1em; }

.article .big { font-size: 1.5em; margin: 0px 0px 0.8em; }

.article blockquote.big { border: none; color: var(--color-gray); font-fami=
ly: var(--font-serif); font-style: italic; padding: 0px 1.5em; }

@media only screen and (min-width: 48em) {
  .article blockquote.big { padding: 0px 3em; }
}

.article .boxed { margin-bottom: 0.8em; border: 0.25em solid var(--color-bo=
x); padding: 1.5em; font-size: 90%; }

.article .boxed > p:last-child { margin-bottom: 0px; }

.article .boxed--blue { border: 1em solid var(--color-blue); }

@media only screen and (min-width: 48em) {
  .article .boxed { padding: 2em; }
}

.article table { width: 100%; margin: 0px 0px 0.8em; overflow-x: auto; vert=
ical-align: top; border: 1px solid rgb(234, 234, 234); border-spacing: 0px;=
 border-collapse: collapse; text-align: left; font-size: 0.9em; }

.article table td, .article table th { padding: 0.4em; vertical-align: top;=
 border-bottom: 1px solid rgb(234, 234, 234); }

.article table tr:last-child td { border-bottom: none; }

pre { line-height: 1.2; background: var(--color-pre) !important; }

pre + p, pre + blockquote { margin-top: 0.8em; }

pre + pre { margin-top: 1px; }

pre > code { padding: 1.5rem; }

.highlight + p, .highlight + blockquote { margin-top: 0.8em; }

.highlight + pre { margin-top: 1px; }

.footnotes { margin: 1em 0px; }

.footnotes hr { display: none; }

.footnotes ol { padding-left: 1.5em; padding-right: 1.5em; font-size: 80%; =
}

a.footnote-ref { border: none; }

a.footnote-ref::before { content: "["; }

a.footnote-ref::after { content: "]"; }

a.footnote-backref { font-family: monospace; border-bottom: none; }

@media only screen and (min-width: 48em) {
  .longread .article h2 { position: sticky; top: 0px; z-index: 1; backgroun=
d: var(--color-bg); }
  .article h2:hover .anchor { visibility: visible; }
  .footnotes ol { columns: 2; }
}

@media only screen and (min-width: 62em) {
  .footnotes ol { columns: 3; }
}

codapi-snippet { display: block; margin-bottom: 0.8em; background: var(--co=
lor-pre); }

div.highlight + codapi-snippet, pre + codapi-snippet { margin-top: -0.8em; =
}

codapi-toolbar { display: flex; flex-wrap: wrap; align-items: center; gap: =
1em; margin-bottom: 0px; padding: 0px 1.5em 1em; font-size: 1rem; }

codapi-toolbar button { padding: 0px; border: none; background: none; line-=
height: 1.35; color: var(--color-blue); }

codapi-toolbar button::after { content: " =E2=96=B6"; }

codapi-toolbar button:hover { background: none; color: rgb(92, 184, 255); }

codapi-toolbar a { border: none !important; }

codapi-status { display: block; white-space: nowrap; }

codapi-status svg { width: 1em; height: 1em; }

codapi-output { display: block; margin-bottom: 0.8em; border-top: 1px solid=
 var(--color-bg); }

codapi-output[hidden] { display: none; }

codapi-output a[href=3D"#close"] { display: none; }

codapi-output pre { margin-bottom: 0px; }

codapi-output pre > code { margin-bottom: 0px; padding: 1em 1.5em; }

div.highlight + div.highlight { margin-top: -0.8em; border-top: 1px solid v=
ar(--color-bg); }

.utterances { margin-left: 0px !important; }

.footer { color: var(--color-gray); padding-top: 1em; padding-bottom: 1em; =
}

.footer__item { margin-left: 2em; }

.footer__link { border-bottom-color: rgba(153, 153, 153, 0.4); color: inher=
it; text-decoration: none; }

.footer__link:visited { border-bottom-color: rgba(153, 153, 153, 0.4); colo=
r: inherit; }

.footer__social-link { color: rgb(33, 150, 243); display: inline-block; hei=
ght: 1.5em; line-height: 1.5em; text-align: center; text-decoration: none; =
width: 2em; border: none !important; }

.footer__social-link:visited { color: rgb(33, 150, 243); }

.footer__social-link:hover, .footer__social-link:visited:hover { color: rgb=
(92, 184, 255); }

.footer__social-link span { display: none; }

.header { padding-top: 1em; }

.header-icon { border-radius: 10%; display: inline-block; height: 1.5em; ve=
rtical-align: middle; width: 1.5em; }

.color-red { color: var(--color-red); }

.color-gray { color: var(--color-gray); }

.color-gray a, .color-gray a:visited { border-color: rgba(0, 0, 0, 0.14); c=
olor: var(--color-gray); }

.color-gray a:hover { border-bottom: none; }

.color-sin { color: var(--color-yellow); }

.color-grayscale { filter: grayscale(100%); }

.highlight { background-color: rgb(255, 245, 157); }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-right { text-align: right; }

.valign-middle { vertical-align: middle; }

.img-inline { vertical-align: middle; display: inline !important; }

.img-link { display: inline-block; border: none !important; }

.img-link:hover { border: none !important; }

.img-bordered { border: 0.2em solid var(--color-box); }

.img-bordered-thin { border: 1px solid var(--color-box); }

.img-rounded { border-radius: 0.5em; }

.naked-list { list-style: none; margin: 0px; padding: 0px; }

.naked-list li { display: inline-block; }

.naked-list li:first-child { margin-left: 0px; }

@media only screen and (max-width: 48em) {
  .naked-list { display: inline-block; margin: auto; text-align: left; }
  .naked-list .footer__item { display: block; margin: 0.25em 0px 0.5em !imp=
ortant; }
}

.col-tile { padding-bottom: 0.5rem; }

.nowrap { white-space: nowrap; }

a.disabled { pointer-events: none; color: var(--color-gray); border-bottom-=
color: rgba(0, 0, 0, 0.14); }

@media only screen and (max-width: 767px) {
  .hidden-mobile { display: none !important; }
}

@media only screen and (min-width: 768px) {
  .only-mobile { display: none; }
}

@media only screen and (max-width: 991px) {
  .hidden-md { display: none !important; }
}

.home { background: linear-gradient(rgb(255, 255, 255), rgb(247, 248, 252))=
; }

.home__block { font-size: var(--font-size-large); }

.home__row > div { margin-bottom: 1.5em; }

.menu__link { display: inline-block; margin-right: 1em; border: none !impor=
tant; }

.menu__link:last-child { margin-right: 0px; }

.menu__link i { color: rgb(51, 51, 51); }

.menu__link span, .menu__link:visited span { color: var(--color-blue); bord=
er-bottom: 1px solid rgba(0, 139, 245, 0.2); }

.menu__link:active span, .menu__link:hover span { color: rgb(92, 184, 255);=
 border-bottom-color: rgba(92, 184, 255, 0.2); }

.menu__link:active i, .menu__link:hover i { color: rgb(92, 184, 255); }

.post-stub { margin-bottom: 1.5em; }

.post-stub__header { position: relative; margin: 0px; }

.post-stub__title { margin-right: 0.5rem; }

.post-stub__star { display: none; width: 1.2em; color: var(--color-yellow);=
 }

.post-stub__date { white-space: nowrap; color: var(--color-gray); font-size=
: 0.8em; }

.post-stub__description { margin: 0.2em 0px 0px; }

@media only screen and (min-width: 48em) {
  .post-stub__star { position: absolute; display: inline-block; left: -1.3e=
m; top: 0.2em; }
}

.post__date { color: var(--color-gray); display: inline-block; margin-right=
: 1em; }

.post__footer { margin-top: 1em; }

.post__related { margin-top: 4em; margin-bottom: 2em; }

.post__nav p { margin-bottom: 0.8em; }

.post__tags { color: var(--color-gray); display: inline-block; }

.post__tags a { border-bottom-color: rgba(0, 0, 0, 0.1); color: currentcolo=
r; }

.article + .posts { margin-top: 1.5em; }

@media only screen and (min-width: 48em) {
  .posts { font-size: var(--font-size-large); }
}

a.portfolio-thumb { border: none; display: inline-block; }

img.portfolio-thumb--raised { border-top: 1px solid rgb(234, 234, 234); box=
-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.4) 0px =
2px 3px 0px; }

img.portfolio-thumb { margin: 0px 0px 0.5em; }

.project-section-header { margin-bottom: 0.5em; padding-left: 1.5em; font-s=
ize: 1em; font-weight: 700; }

.project-block { position: relative; width: 100%; margin-bottom: 1em; borde=
r: 1px solid rgb(234, 234, 234); border-radius: 0.25em; padding: 1em 1.5em;=
 }

.project-block--highlight { border-color: var(--color-blue); }

.project-block--highlight::after { position: absolute; top: 0px; right: 0px=
; display: inline-block; width: 1.5rem; height: 1.5rem; background: var(--c=
olor-blue); border-bottom-left-radius: 0.25em; text-align: center; color: r=
gb(255, 255, 255); content: "=E2=98=85"; }

.project-block--noborder { border: none; }

.project-block p { margin: 0px 0px 0.5em; }

.project-block p:last-child { margin-bottom: 0px; }

.project-book { margin: 1em 2em 1em 0px; }

@media (prefers-color-scheme: dark) {
  img.portfolio-thumb--raised { border: 1px solid var(--color-gray); box-sh=
adow: none; }
}

.search-module input[type=3D"search"] { width: 100%; outline-style: none; f=
ont-size: 12px; }

.sqlime-example { margin: 0px 0px 0.8em; font-family: var(--font-monospace)=
; line-height: 1; }

.sqlime-example div:nth-child(1) { margin: 0px 0px 0.8em; font-size: 0.8em;=
 }

.sqlime-example button { border: 1px solid var(--color-blue); background: n=
one; color: var(--color-blue); }

.sqlime-example button:hover { background: var(--color-blue); color: var(--=
color-bg); }

.sqlime-example sqlime-output { padding: 1.5em; background-color: var(--col=
or-pre); font-size: 0.8em; }

.sqlime-example table { display: inline-block; width: auto; max-width: 100%=
; margin-bottom: 0px; border-top: 1px solid var(--color-text); border-right=
: none; border-bottom: 1px solid var(--color-text); border-left: 1px solid =
var(--color-text); line-height: 1; font-size: 1em; }

.sqlime-example table th { vertical-align: top; padding: 0.6em 1em; border-=
top: none; border-right: 1px solid var(--color-text); border-bottom: 1px so=
lid var(--color-text); border-left: none; font-weight: normal; line-height:=
 1; }

.sqlime-example table td { vertical-align: top; padding: 0.2em 1em; border-=
right: 1px solid var(--color-text); border-bottom: none; line-height: 1; }

.sqlime-example table tr:first-child td { padding-top: 0.8em; }

.sqlime-example table tr:last-child td { padding-bottom: 0.8em; }

@media only screen and (min-width: 62em) {
  .sqlime-example { font-size: var(--font-size-large); }
}

.subscribe-block { margin-bottom: 2rem; }

.subscribe-block a { border: none; display: inline-block; }

.subscribe-form { font-size: 1rem; }

.subscribe-form input[type=3D"email"] { display: inline-block; vertical-ali=
gn: middle; }

.subscribe-form button[type=3D"submit"] { border: 1px solid var(--color-blu=
e); }

@media only screen and (max-width: 62em) {
  .subscribe-form input[type=3D"email"] { width: 10rem; }
}
------MultipartBoundary--vrhnCtQJUSNQ4IdEPuHR3LN8o1BDbqwaKu6ApG8vl5----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://antonz.org/assets/logo.svg

<?xml version=3D"1.0" encoding=3D"UTF-8"?>
<!-- Generated by Pixelmator Pro 2.4.3 -->
<svg width=3D"1024" height=3D"1024" viewBox=3D"0 0 1024 1024" xmlns=3D"http=
://www.w3.org/2000/svg" xmlns:xlink=3D"http://www.w3.org/1999/xlink">
    <path id=3D"Rectangle" fill=3D"#000000" fill-rule=3D"evenodd" stroke=3D=
"none" d=3D"M 0 1024 L 1024 1024 L 1024 0 L 0 0 Z"/>
    <path id=3D"a" fill=3D"#ffffff" fill-rule=3D"evenodd" stroke=3D"none" d=
=3D"M 683.42926 590.483032 C 683.42926 606.237 685.595337 617.658447 689.92=
7673 624.747681 C 694.26001 631.836914 701.283569 637.219482 710.998474 640=
.895386 L 685.398438 722.81543 C 660.717285 720.452271 639.909302 715.00415=
 622.973816 706.470764 C 606.038391 697.937378 592.713379 685.006226 582.99=
8474 667.67688 C 566.981995 686.844238 546.502197 701.088135 521.558472 710=
.409241 C 496.614746 719.730347 471.146271 724.390747 445.152313 724.390747=
 C 402.091583 724.390747 367.761658 712.116028 342.16153 687.566162 C 316.5=
61401 663.016296 303.761536 631.443237 303.761536 592.846191 C 303.761536 5=
47.422363 321.550079 512.370361 357.127686 487.689209 C 392.705292 463.0080=
57 442.78891 450.667664 507.380005 450.667664 L 563.700012 450.667664 L 563=
.700012 434.913818 C 563.700012 392.115662 536.131042 370.716919 480.99231 =
370.716919 C 467.601471 370.716919 450.403687 372.620483 429.398468 376.427=
673 C 408.393219 380.234863 387.388306 385.683044 366.383087 392.772278 L 3=
37.632294 310.064636 C 364.676544 299.824585 392.836273 292.078979 422.1123=
05 286.827698 C 451.388367 281.576355 477.578857 278.950745 500.684601 278.=
950745 C 562.912598 278.950745 608.926514 291.619385 638.727722 316.956909 =
C 668.52887 342.294495 683.42926 378.856201 683.42926 426.643066 Z M 488.08=
1543 635.381531 C 501.472382 635.381531 515.519409 631.377441 530.223083 62=
3.369263 C 544.926758 615.360962 556.085632 604.005188 563.700012 589.30151=
4 L 563.700012 521.559998 L 532.97998 521.559998 C 498.32135 521.559998 472=
.852905 526.876831 456.573853 537.510742 C 440.2948 548.144653 432.155396 5=
63.701416 432.155396 584.181519 C 432.155396 600.197998 437.0784 612.735352=
 446.924622 621.793823 C 456.770813 630.852356 470.489655 635.381531 488.08=
1543 635.381531 Z"/>
</svg>=0A
------MultipartBoundary--vrhnCtQJUSNQ4IdEPuHR3LN8o1BDbqwaKu6ApG8vl5------
